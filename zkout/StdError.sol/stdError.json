{"abi":null,"bytecode":{"object":"0000008003000039000000400030043f0000000102200190000000170000c13d00000000020100190000001f02200198000000390000613d000000000101043b000000e001100270000000200210009c0000001f0000a13d000000210210009c000000290000a13d000000220210009c0000003b0000613d000000230210009c0000003f0000613d000000240110009c000000390000c13d0000002c01000041000000a00010043f00000012010000390000004e0000013d0000000001000416000000000101004b000000390000c13d0000002001000039000001000010044300000120000004430000001e01000041000000730001042e000000270210009c000000310000213d0000002a0210009c000000430000613d0000002b0110009c000000390000c13d0000002c01000041000000a00010043f00000001010000390000004e0000013d000000250210009c000000470000613d000000260110009c000000390000c13d0000002c01000041000000a00010043f00000031010000390000004e0000013d000000280210009c0000004b0000613d000000290110009c000000390000c13d0000002c01000041000000a00010043f00000011010000390000004e0000013d000000000100001900000074000104300000002c01000041000000a00010043f00000051010000390000004e0000013d0000002c01000041000000a00010043f00000022010000390000004e0000013d0000002c01000041000000a00010043f00000032010000390000004e0000013d0000002c01000041000000a00010043f00000041010000390000004e0000013d0000002c01000041000000a00010043f0000002101000039000000a40010043f0000002401000039000000800010043f000000e001000039000000400010043f00000080020000390072005c0000040f000000e00110008a0000002d020000410000002d0310009c000000000102801900000060011002100000002e011001c7000000730001042e00000020030000390000000004310436000000003202043400000000002404350000004001100039000000000402004b0000006b0000613d000000000400001900000000054100190000000006430019000000000606043300000000006504350000002004400039000000000524004b000000640000413d000000000321001900000000000304350000001f02200039000000200300008a000000000232016f0000000001210019000000000001042d0000007200000432000000730001042e0000007400010430000000000000000000000000000000000000000000000000000000020000000000000000000000000000004000000100000000000000000000000000000000000000000000000000fffffffc00000000000000000000000000000000000000000000000000000000000000000000000000000000986c5f6700000000000000000000000000000000000000000000000000000000b67689d900000000000000000000000000000000000000000000000000000000b67689da00000000000000000000000000000000000000000000000000000000d160e4de00000000000000000000000000000000000000000000000000000000fa784a4400000000000000000000000000000000000000000000000000000000986c5f6800000000000000000000000000000000000000000000000000000000b22dc54d000000000000000000000000000000000000000000000000000000001de4555f000000000000000000000000000000000000000000000000000000001de45560000000000000000000000000000000000000000000000000000000008995290f0000000000000000000000000000000000000000000000000000000005ee861200000000000000000000000000000000000000000000000000000000103329774e487b710000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000e00000000000000000"},"assembly":"\t.text\n\t.file\t\"StdError.sol:stdError\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tadd\t128, r0, r3\n\tst.1\t64, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\tr1, r0, r2\n\tand!\t@CPI0_1[0], r2, r2\n\tjump.eq\t@.BB0_2\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_2[0], r1, r2\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r1, r2\n\tjump.le\t@.BB0_12\n\tsub.s!\t@CPI0_4[0], r1, r2\n\tjump.eq\t@.BB0_24\n\tsub.s!\t@CPI0_5[0], r1, r2\n\tjump.eq\t@.BB0_25\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t18, r0, r1\n\tjump\t@.BB0_18\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_9[0], r1, r2\n\tjump.gt\t@.BB0_9\n\tsub.s!\t@CPI0_12[0], r1, r2\n\tjump.eq\t@.BB0_17\n\tsub.s!\t@CPI0_13[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t1, r0, r1\n\tjump\t@.BB0_18\n.BB0_12:\n\tsub.s!\t@CPI0_7[0], r1, r2\n\tjump.eq\t@.BB0_22\n\tsub.s!\t@CPI0_8[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t49, r0, r1\n\tjump\t@.BB0_18\n.BB0_9:\n\tsub.s!\t@CPI0_10[0], r1, r2\n\tjump.eq\t@.BB0_20\n\tsub.s!\t@CPI0_11[0], r1, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t17, r0, r1\n\tjump\t@.BB0_18\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_24:\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t81, r0, r1\n\tjump\t@.BB0_18\n.BB0_25:\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t34, r0, r1\n\tjump\t@.BB0_18\n.BB0_17:\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t50, r0, r1\n\tjump\t@.BB0_18\n.BB0_22:\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t65, r0, r1\n\tjump\t@.BB0_18\n.BB0_20:\n\tadd\t@CPI0_14[0], r0, r1\n\tst.1\t160, r1\n\tadd\t33, r0, r1\n.BB0_18:\n\tst.1\t164, r1\n\tadd\t36, r0, r1\n\tst.1\t128, r1\n\tadd\t224, r0, r1\n\tst.1\t64, r1\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_bytes, @DEFAULT_UNWIND\n\tsub.s\t224, r1, r1\n\tadd\t@CPI0_15[0], r0, r2\n\tsub.s!\t@CPI0_15[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\t@CPI0_16[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nabi_encode_bytes:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1.inc\tr2, r2, r3\n\tst.1\tr4, r2\n\tadd\t64, r1, r1\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr1, r4, r5\n\tadd\tr3, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r2, r3\n\tst.1\tr3, r0\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_1:\n\t.cell 340282366604025813406317257057592410112\nCPI0_2:\n\t.cell 2557239143\nCPI0_3:\n\t.cell 3061221849\nCPI0_4:\n\t.cell 3061221850\nCPI0_5:\n\t.cell 3512788190\nCPI0_6:\n\t.cell 4202187332\nCPI0_7:\n\t.cell 2557239144\nCPI0_8:\n\t.cell 2989344077\nCPI0_9:\n\t.cell 501503327\nCPI0_10:\n\t.cell 501503328\nCPI0_11:\n\t.cell 2308253967\nCPI0_12:\n\t.cell 99517970\nCPI0_13:\n\t.cell 271788407\nCPI0_14:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_15:\n\t.cell 4294967295\nCPI0_16:\n\t.cell 4132070672510939561984\n","methodIdentifiers":{"arithmeticError()":"8995290f","assertionError()":"10332977","divisionError()":"fa784a44","encodeStorageError()":"d160e4de","enumConversionError()":"1de45560","indexOOBError()":"05ee8612","memOverflowError()":"986c5f68","popError()":"b22dc54d","zeroVarError()":"b67689da"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.3a2587f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"arithmeticError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assertionError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divisionError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodeStorageError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enumConversionError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexOOBError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memOverflowError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"popError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroVarError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/forge-std/src/StdError.sol\":\"stdError\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":foundry-era-contracts/=lib/foundry-era-contracts/\",\":murky/=lib/foundry-era-contracts/lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solpp/=lib/foundry-era-contracts/src/solpp/solpp-generated-contracts/\"]},\"sources\":{\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 4:\"lib/forge-std/src/StdError.sol\"\nobject \"stdError_6441\" {\n    code {\n        {\n            /// @src 4:162:1012  \"library stdError {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"stdError_6441_deployed\")\n            codecopy(_1, dataoffset(\"stdError_6441_deployed\"), _2)\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, _2)\n        }\n    }\n    /// @use-src 4:\"lib/forge-std/src/StdError.sol\"\n    object \"stdError_6441_deployed\" {\n        code {\n            {\n                /// @src 4:162:1012  \"library stdError {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let _3 := 0\n                    switch shr(224, calldataload(_3))\n                    case 0x05ee8612 {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\"\n                        mstore(add(_1, 0x20), shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ add(_1, 36), /** @src 4:820:824  \"0x32\" */ 0x32)\n                        /// @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\"\n                        mstore(_1, 36)\n                        finalize_allocation(_1)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos := mload(_2)\n                        return(memPos, sub(abi_encode_bytes(memPos, _1), memPos))\n                    }\n                    case 0x10332977 {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:224:271  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x01)\"\n                        let expr_mpos := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:224:271  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x01)\"\n                        mstore(add(expr_mpos, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:224:271  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x01)\" */ add(expr_mpos, 36), /** @src 4:266:270  \"0x01\" */ 0x01)\n                        /// @src 4:224:271  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x01)\"\n                        mstore(expr_mpos, 36)\n                        finalize_allocation(expr_mpos)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_1 := mload(_2)\n                        return(memPos_1, sub(abi_encode_bytes(memPos_1, expr_mpos), memPos_1))\n                    }\n                    case 0x1de45560 {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:505:552  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x21)\"\n                        let expr_mpos_1 := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:505:552  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x21)\"\n                        mstore(add(expr_mpos_1, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:505:552  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x21)\" */ add(expr_mpos_1, 36), /** @src 4:547:551  \"0x21\" */ 0x21)\n                        /// @src 4:505:552  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x21)\"\n                        mstore(expr_mpos_1, 36)\n                        finalize_allocation(expr_mpos_1)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_2 := mload(_2)\n                        return(memPos_2, sub(abi_encode_bytes(memPos_2, expr_mpos_1), memPos_2))\n                    }\n                    case 0x8995290f {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:317:364  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x11)\"\n                        let expr_mpos_2 := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:317:364  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x11)\"\n                        mstore(add(expr_mpos_2, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:317:364  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x11)\" */ add(expr_mpos_2, 36), /** @src 4:359:363  \"0x11\" */ 0x11)\n                        /// @src 4:317:364  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x11)\"\n                        mstore(expr_mpos_2, 36)\n                        finalize_allocation(expr_mpos_2)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_3 := mload(_2)\n                        return(memPos_3, sub(abi_encode_bytes(memPos_3, expr_mpos_2), memPos_3))\n                    }\n                    case 0x986c5f68 {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:872:919  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x41)\"\n                        let expr_mpos_3 := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:872:919  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x41)\"\n                        mstore(add(expr_mpos_3, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:872:919  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x41)\" */ add(expr_mpos_3, 36), /** @src 4:914:918  \"0x41\" */ 0x41)\n                        /// @src 4:872:919  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x41)\"\n                        mstore(expr_mpos_3, 36)\n                        finalize_allocation(expr_mpos_3)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_4 := mload(_2)\n                        return(memPos_4, sub(abi_encode_bytes(memPos_4, expr_mpos_3), memPos_4))\n                    }\n                    case 0xb22dc54d {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:687:734  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x31)\"\n                        let expr_mpos_4 := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:687:734  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x31)\"\n                        mstore(add(expr_mpos_4, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:687:734  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x31)\" */ add(expr_mpos_4, 36), /** @src 4:729:733  \"0x31\" */ 0x31)\n                        /// @src 4:687:734  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x31)\"\n                        mstore(expr_mpos_4, 36)\n                        finalize_allocation(expr_mpos_4)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_5 := mload(_2)\n                        return(memPos_5, sub(abi_encode_bytes(memPos_5, expr_mpos_4), memPos_5))\n                    }\n                    case 0xb67689da {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:962:1009  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x51)\"\n                        let expr_mpos_5 := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:962:1009  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x51)\"\n                        mstore(add(expr_mpos_5, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:962:1009  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x51)\" */ add(expr_mpos_5, 36), /** @src 4:1004:1008  \"0x51\" */ 0x51)\n                        /// @src 4:962:1009  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x51)\"\n                        mstore(expr_mpos_5, 36)\n                        finalize_allocation(expr_mpos_5)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_6 := mload(_2)\n                        return(memPos_6, sub(abi_encode_bytes(memPos_6, expr_mpos_5), memPos_6))\n                    }\n                    case 0xd160e4de {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:601:648  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x22)\"\n                        let expr_mpos_6 := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:601:648  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x22)\"\n                        mstore(add(expr_mpos_6, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:601:648  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x22)\" */ add(expr_mpos_6, 36), /** @src 4:643:647  \"0x22\" */ 0x22)\n                        /// @src 4:601:648  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x22)\"\n                        mstore(expr_mpos_6, 36)\n                        finalize_allocation(expr_mpos_6)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_7 := mload(_2)\n                        return(memPos_7, sub(abi_encode_bytes(memPos_7, expr_mpos_6), memPos_7))\n                    }\n                    case 0xfa784a44 {\n                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                        /// @src 4:408:455  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x12)\"\n                        let expr_mpos_7 := /** @src 4:162:1012  \"library stdError {...\" */ mload(_2)\n                        /// @src 4:408:455  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x12)\"\n                        mstore(add(expr_mpos_7, 0x20), /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        mstore(/** @src 4:408:455  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x12)\" */ add(expr_mpos_7, 36), /** @src 4:450:454  \"0x12\" */ 0x12)\n                        /// @src 4:408:455  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x12)\"\n                        mstore(expr_mpos_7, 36)\n                        finalize_allocation(expr_mpos_7)\n                        /// @src 4:162:1012  \"library stdError {...\"\n                        let memPos_8 := mload(_2)\n                        return(memPos_8, sub(abi_encode_bytes(memPos_8, expr_mpos_7), memPos_8))\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr)\n            {\n                let newFreePtr := add(memPtr, 96)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, /** @src 4:778:825  \"abi.encodeWithSignature(\\\"Panic(uint256)\\\", 0x32)\" */ shl(224, 0x4e487b71))\n                    /// @src 4:162:1012  \"library stdError {...\"\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_encode_bytes(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000818000a\"\n    }\n}\n","hash":"0100002f2a98ca3d605939cf65cdc87334f268c7e326972717e8def1b7e0e6ec","factoryDependencies":{},"id":4}