{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"ERC20Mock.sol:ERC20Mock\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[6]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_11\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_84\n\tld\tr1, r2\n\tshr.s\t224, r2, r2\n\tsub.s!\t@CPI0_7[0], r2, r4\n\tjump.le\t@.BB0_21\n\tsub.s!\t@CPI0_8[0], r2, r4\n\tjump.gt\t@.BB0_27\n\tsub.s!\t@CPI0_12[0], r2, r4\n\tjump.eq\t@.BB0_63\n\tsub.s!\t@CPI0_13[0], r2, r4\n\tjump.eq\t@.BB0_68\n\tsub.s!\t@CPI0_14[0], r2, r1\n\tjump.ne\t@.BB0_84\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_84\n\tadd\t4, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r5\n\tshr.s\t1, r2, r1\n\tand\t127, r1, r4\n\tadd.eq\tr4, r0, r1\n\tsub.s!\t31, r1, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\txor\tr2, r6, r6\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_13\n\tst.1\t128, r1\n\tsub!\tr5, r0, r5\n\tjump.ne\t@.BB0_94\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr4, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_120\n.BB0_11:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_84\n\tadd\t9, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_1[0], r0, r1\n\tst.1\t160, r1\n\tadd\t256, r0, r1\n\tst.1\t64, r1\n\tadd\t4, r0, r7\n\tst.1\t192, r7\n\tadd\t@CPI0_2[0], r0, r1\n\tst.1\t224, r1\n\tadd\t3, r0, r4\n\tsload\tr4, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r3\n\tadd.ne\tr1, r0, r3\n\tsub.s!\t31, r3, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.eq\t@.BB0_14\n.BB0_13:\n\tadd\t@CPI0_31[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_14:\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_19\n\tadd\tr3, r0, stack-[4]\n\tadd\tr7, r0, stack-[6]\n\tadd\tr4, r0, stack-[5]\n\tst.1\t0, r4\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r2\n\tadd\t31, r2, r2\n\tshr.s\t5, r2, r2\n\tadd\tr1, r2, r2\n\tsub!\tr1, r2, r3\n\tadd\tstack-[6], r0, r7\n\tadd\tstack-[5], r0, r4\n\tjump.ge\t@.BB0_19\n.BB0_18:\n\tsstore\tr1, r0\n\tadd\t1, r1, r1\n\tsub!\tr1, r2, r3\n\tjump.lt\t@.BB0_18\n.BB0_19:\n\tld.1\t160, r1\n\tand\t@CPI0_4[0], r1, r1\n\tor\t18, r1, r1\n\tsstore\tr4, r1\n\tld.1\t192, r4\n\tsub.s!\t@CPI0_5[0], r4, r1\n\tjump.lt\t@.BB0_35\n.BB0_20:\n\tadd\t@CPI0_31[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_21:\n\tsub.s!\t@CPI0_15[0], r2, r4\n\tjump.le\t@.BB0_44\n\tsub.s!\t@CPI0_16[0], r2, r4\n\tjump.eq\t@.BB0_73\n\tsub.s!\t@CPI0_17[0], r2, r4\n\tjump.eq\t@.BB0_51\n\tsub.s!\t@CPI0_18[0], r2, r1\n\tjump.ne\t@.BB0_84\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_84\n\tadd\t18, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_27:\n\tsub.s!\t@CPI0_9[0], r2, r4\n\tjump.eq\t@.BB0_76\n\tsub.s!\t@CPI0_10[0], r2, r4\n\tjump.eq\t@.BB0_81\n\tsub.s!\t@CPI0_11[0], r2, r2\n\tjump.ne\t@.BB0_84\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_84\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_84\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_21[0], r2, r3\n\tjump.gt\t@.BB0_84\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tsub.s!\t@CPI0_21[0], r3, r1\n\tjump.gt\t@.BB0_84\n\tst.1\t0, r2\n\tadd\t1, r0, r1\n\tst.1\t32, r1\n\tadd\t64, r0, r2\n\tadd\tr2, r0, stack-[6]\n\tadd\tr0, r0, r1\n\tadd\tr3, r0, stack-[5]\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tadd\tr0, r0, r1\n\tadd\tstack-[6], r0, r2\n\tjump\t@.BB0_72\n.BB0_35:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r2\n\tand\t127, r2, r3\n\tadd.ne\tr2, r0, r3\n\tsub.s!\t31, r3, r2\n\tadd\t0, r0, r2\n\tadd.gt\t1, r0, r2\n\txor\tr1, r2, r1\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_13\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_40\n\tadd\tr3, r0, stack-[4]\n\tadd\tr4, r0, stack-[5]\n\tadd\tr7, r0, stack-[6]\n\tst.1\t0, r7\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tadd\tstack-[5], r0, r4\n\tadd\t31, r4, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r4, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[4], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tadd\tstack-[6], r0, r7\n\tjump.ge\t@.BB0_40\n.BB0_39:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_39\n.BB0_40:\n\tsub.s!\t31, r4, r1\n\tjump.le\t@.BB0_85\n\tadd\tr4, r0, stack-[5]\n\tadd\tr7, r0, stack-[6]\n\tst.1\t0, r7\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tsub.s\t32, r0, r2\n\tadd\tstack-[5], r0, r8\n\tand!\tr8, r2, r2\n\tld\tr1, r1\n\tjump.ne\t@.BB0_102\n\tadd\t224, r0, r3\n\tadd\tstack-[6], r0, r7\n\tjump\t@.BB0_105\n.BB0_44:\n\tsub.s!\t@CPI0_19[0], r2, r4\n\tjump.eq\t@.BB0_59\n\tsub.s!\t@CPI0_20[0], r2, r2\n\tjump.ne\t@.BB0_84\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_84\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_84\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_21[0], r3, r2\n\tjump.gt\t@.BB0_84\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r4\n\tcontext.caller\tr2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_89\n\tadd\t@CPI0_35[0], r0, r1\n\tjump\t@.BB0_91\n.BB0_51:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t100, r3, r3\n\tjump.lt\t@.BB0_84\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_84\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r3\n\tsub.s!\t@CPI0_21[0], r3, r2\n\tjump.gt\t@.BB0_84\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[6]\n\tsub.s!\t@CPI0_21[0], r2, r2\n\tjump.gt\t@.BB0_84\n\tptr.add.s\t68, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tst.1\t0, r3\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[3]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr3, r0, stack-[5]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tcontext.caller\tr2\n\tadd\tr2, r0, stack-[2]\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tsload\tr1, r3\n\tsub.s\t1, r0, r1\n\tsub!\tr3, r1, r1\n\tjump.ne\t@.BB0_129\n.BB0_58:\n\tadd\tr5, r0, r1\n\tadd\tstack-[6], r0, r2\n\tadd\tstack-[4], r0, r3\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tstack-[3], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tjump\t@.BB0_113\n.BB0_59:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_84\n\tadd\t3, r0, r3\n\tsload\tr3, r2\n\tand!\t1, r2, r5\n\tshr.s\t1, r2, r1\n\tand\t127, r1, r4\n\tadd.eq\tr4, r0, r1\n\tsub.s!\t31, r1, r6\n\tadd\t0, r0, r6\n\tadd.gt\t1, r0, r6\n\txor\tr2, r6, r6\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_13\n\tst.1\t128, r1\n\tsub!\tr5, r0, r5\n\tjump.ne\t@.BB0_92\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr4, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n\tjump\t@.BB0_121\n.BB0_63:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_84\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_84\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_21[0], r4, r2\n\tjump.gt\t@.BB0_84\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_96\n\tadd\t@CPI0_33[0], r0, r1\n\tjump\t@.BB0_91\n.BB0_68:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t36, r3, r3\n\tjump.lt\t@.BB0_84\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_84\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_21[0], r1, r2\n\tjump.gt\t@.BB0_84\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t64, r0, r2\n\tadd\tr0, r0, r1\n.BB0_72:\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tjump\t@.BB0_75\n.BB0_73:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_84\n\tadd\t2, r0, r1\n.BB0_75:\n\tsload\tr1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_22[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_76:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_84\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_84\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_21[0], r4, r2\n\tjump.gt\t@.BB0_84\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r2\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_98\n\tadd\t@CPI0_27[0], r0, r1\n\tjump\t@.BB0_91\n.BB0_81:\n\tcontext.get_context_u128\tr2\n\tsub.s!\t68, r3, r3\n\tjump.lt\t@.BB0_84\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_84\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_21[0], r2, r3\n\tjump.le\t@.BB0_88\n.BB0_84:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_85:\n\tsub!\tr4, r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_87\n\tld.1\t224, r1\n.BB0_87:\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r2\n\tshl.s\t1, r4, r1\n\tjump\t@.BB0_108\n.BB0_88:\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tcontext.caller\tr1\n\tnear_call\tr0, @fun_transfer, @DEFAULT_UNWIND\n\tadd\t1, r0, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_23[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_89:\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_109\n\tadd\t@CPI0_34[0], r0, r1\n.BB0_91:\n\tst.1\t128, r1\n\tst.1\t132, r0\n\tadd\t@CPI0_28[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_92:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.lt\t@.BB0_93\n\tadd\t@CPI0_38[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_115:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_115\n\tadd\t192, r3, r1\n\tjump\t@.BB0_121\n.BB0_94:\n\tst.1\t0, r3\n\tsub.s!\t2, r2, r2\n\tjump.ge\t@.BB0_117\n.BB0_93:\n\tadd\t32, r0, r1\n\tjump\t@.BB0_122\n.BB0_96:\n\tadd\t2, r0, r1\n\tsload\tr1, r3\n\tadd\tr3, r5, r2\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t1, r3, r3\n\tjump.ne\t@.BB0_123\n\tadd\t@CPI0_31[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_32[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_98:\n\tadd\tr2, r0, stack-[5]\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[6]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tsload\tr1, r3\n\tadd\tstack-[5], r0, r4\n\tsub!\tr3, r4, r1\n\tjump.ge\t@.BB0_125\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[4]\n\tadd\t@CPI0_26[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\tr5, r0, r2\n\tnear_call\tr0, @abi_encode_address_uint256_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n.BB0_101:\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_102:\n\tadd\t32, r0, r4\n\tadd\tr0, r0, r3\n\tadd\tstack-[6], r0, r7\n.BB0_103:\n\tadd\tr4, r0, r5\n\tadd\t192, r5, r4\n\tld.1\tr4, r4\n\tsstore\tr1, r4\n\tadd\t32, r5, r4\n\tadd\t1, r1, r1\n\tadd\t32, r3, r3\n\tsub!\tr3, r2, r6\n\tjump.lt\t@.BB0_103\n\tadd\t224, r5, r3\n.BB0_105:\n\tsub!\tr2, r8, r2\n\tjump.ge\t@.BB0_107\n\tshl.s\t3, r8, r2\n\tand\t248, r2, r2\n\tsub.s\t1, r0, r4\n\tshr\tr4, r2, r2\n\txor\tr2, r4, r2\n\tld.1\tr3, r3\n\tand\tr3, r2, r2\n\tsstore\tr1, r2\n.BB0_107:\n\tadd\t1, r0, r1\n\tshl.s\t1, r8, r2\n.BB0_108:\n\tor\tr2, r1, r1\n\tsstore\tr7, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_6[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_109:\n\tadd\tr4, r0, stack-[4]\n\tadd\tr2, r0, stack-[5]\n\tst.1\t0, r2\n\tadd\t1, r0, r1\n\tadd\tr1, r0, stack-[3]\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr3, r0, stack-[6]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tst.1\t0, r3\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tadd\tstack-[4], r0, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r4\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_37[0], r0, r4\n\tadd\tstack-[5], r0, r5\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_84\n\tld.1\t64, r1\n\tadd\tstack-[3], r0, r2\n\tst.1\tr1, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd\t@CPI0_0[0], r0, r2\n.BB0_113:\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_23[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_117:\n\tadd\t@CPI0_29[0], r0, r2\n\tadd\tr0, r0, r4\n.BB0_118:\n\tadd\tr4, r0, r3\n\tsload\tr2, r4\n\tadd\t160, r3, r5\n\tst.1\tr5, r4\n\tadd\t1, r2, r2\n\tadd\t32, r3, r4\n\tsub!\tr4, r1, r5\n\tjump.lt\t@.BB0_118\n\tadd\t192, r3, r1\n.BB0_120:\n.BB0_121:\n\tsub.s\t97, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tsub.s!\t@CPI0_30[0], r1, r2\n\tjump.gt\t@.BB0_20\n.BB0_122:\n\tadd\t128, r1, r1\n\tadd\tr1, r0, stack-[6]\n\tst.1\t64, r1\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_string, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_123:\n\tadd\tr5, r0, stack-[5]\n\tsstore\tr1, r2\n\tst.1\t0, r4\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tadd\tr4, r0, stack-[6]\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r6\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[5], r0, r3\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd\t@CPI0_0[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_25[0], r0, r4\n\tadd\tr0, r0, r5\n\tjump\t@.BB0_127\n.BB0_125:\n\tadd\tr3, r0, stack-[4]\n\tst.1\t0, r5\n\tst.1\t32, r0\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tadd\tstack-[5], r0, r3\n\tsub\tstack-[4], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\t2, r0, r1\n\tsload\tr1, r2\n\tsub\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd\t@CPI0_0[0], r0, r4\n\tadd.ge\tr4, r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_25[0], r0, r4\n\tadd\tr0, r0, r6\n.BB0_127:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_84\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_129:\n\tadd\tstack-[4], r0, r4\n\tsub!\tr3, r4, r1\n\tjump.ge\t@.BB0_131\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[6]\n\tadd\t@CPI0_36[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\tstack-[2], r0, r2\n\tnear_call\tr0, @abi_encode_address_uint256_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r4\n\tjump\t@.BB0_101\n.BB0_131:\n\tsub!\tr5, r0, r1\n\tjump.ne\t@.BB0_133\n\tld.1\t64, r1\n\tadd\t@CPI0_35[0], r0, r2\n\tjump\t@.BB0_135\n.BB0_133:\n\tadd\tr3, r0, stack-[1]\n\tsub!\tstack-[2], r0, r1\n\tjump.ne\t@.BB0_136\n\tld.1\t64, r1\n\tadd\t@CPI0_34[0], r0, r2\n.BB0_135:\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_32[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_136:\n\tadd\tstack-[5], r0, r1\n\tst.1\t0, r1\n\tadd\tstack-[3], r0, r1\n\tst.1\t32, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tld\tr1, r1\n\tadd\tstack-[2], r0, r2\n\tst.1\t0, r2\n\tst.1\t32, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_24[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r5\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_84\n\tadd\tstack-[1], r0, r3\n\tsub.s\tstack-[4], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tjump\t@.BB0_58\n.func_end0:\n\nabi_encode_string:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1.inc\tr2, r2, r3\n\tst.1\tr4, r2\n\tadd\t64, r1, r1\n\tsub!\tr2, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\tr1, r4, r5\n\tadd\tr3, r4, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r2, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tadd\tr1, r2, r3\n\tst.1\tr3, r0\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr1, r2, r1\n\tret\n.func_end1:\n\nabi_encode_address_uint256_uint256:\n.func_begin2:\n\tadd\t64, r1, r5\n\tst.1\tr5, r4\n\tadd\t32, r1, r4\n\tst.1\tr4, r3\n\tand\t@CPI2_0[0], r2, r2\n\tst.1\tr1, r2\n\tadd\t96, r1, r1\n\tret\n.func_end2:\n\nfun_transfer:\n.func_begin3:\n\tnop\tstack+=[5]\n\tadd\tr3, r0, stack-[5]\n\tand!\t@CPI3_0[0], r1, r3\n\tjump.eq\t@.BB3_1\n\tadd\tr1, r0, stack-[1]\n\tand!\t@CPI3_0[0], r2, stack-[3]\n\tjump.eq\t@.BB3_4\n\tadd\tr3, r0, stack-[4]\n\tst.1\t0, r3\n\tst.1\t32, r0\n\tadd\t@CPI3_1[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI3_1[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI3_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[2]\n\tsub.s!\tstack-[5], r2, r1\n\tjump.lt\t@.BB3_8\n\tadd\tstack-[4], r0, r1\n\tst.1\t0, r1\n\tst.1\t32, r0\n\tadd\t@CPI3_1[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI3_1[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI3_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_6\n\tadd\tstack-[2], r0, r3\n\tsub.s\tstack-[5], r3, r2\n\tld\tr1, r1\n\tsstore\tr1, r2\n\tadd\tstack-[3], r0, r1\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI3_1[0], r1, r2\n\tadd.ge\t@CPI3_1[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI3_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB3_6\n\tld\tr1, r1\n\tsload\tr1, r2\n\tadd\tstack-[5], r0, r3\n\tadd\tr2, r3, r2\n\tsstore\tr1, r2\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tadd\t@CPI3_1[0], r0, r2\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI3_1[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI3_1[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI3_3[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI3_4[0], r0, r4\n\tadd\tstack-[4], r0, r5\n\tadd\tstack-[3], r0, r6\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB3_6\n\tret\n.BB3_6:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_1:\n\tld.1\t64, r1\n\tadd\t@CPI3_8[0], r0, r2\n\tjump\t@.BB3_2\n.BB3_4:\n\tld.1\t64, r1\n\tadd\t@CPI3_6[0], r0, r2\n.BB3_2:\n\tst.1\tr1, r2\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI3_1[0], r0, r2\n\tsub.s!\t@CPI3_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI3_7[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB3_8:\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[4]\n\tadd\t@CPI3_5[0], r0, r1\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tadd\tstack-[1], r0, r2\n\tadd\tstack-[2], r0, r3\n\tadd\tstack-[5], r0, r4\n\tnear_call\tr0, @abi_encode_address_uint256_uint256, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r4\n\tsub\tr1, r4, r1\n\tadd\t@CPI3_1[0], r0, r2\n\tsub.s!\t@CPI3_1[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI3_1[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__farcall:\n.func_begin5:\n.tmp0:\n\tfar_call\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n__staticcall:\n.func_begin6:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB6_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB6_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end6:\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI3_1:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 31354931781646621595089740405153289882186679765730157299414427614141187358720\nCPI0_2:\n\t.cell 31298262265224839331899592985801609587101329272545498938344861095838198267904\nCPI0_3:\nCPI3_3:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_4:\n\t.cell -24519928653854221733733552434404946937899825954937634816\nCPI0_5:\n\t.cell 18446744073709551616\nCPI0_6:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_7:\n\t.cell 1086394136\nCPI0_8:\n\t.cell 2646777771\nCPI0_9:\n\t.cell 2646777772\nCPI0_10:\n\t.cell 2835717307\nCPI0_11:\n\t.cell 3714247998\nCPI0_12:\n\t.cell 1086394137\nCPI0_13:\n\t.cell 1889567281\nCPI0_14:\n\t.cell 2514000705\nCPI0_15:\n\t.cell 404098524\nCPI0_16:\n\t.cell 404098525\nCPI0_17:\n\t.cell 599290589\nCPI0_18:\n\t.cell 826074471\nCPI0_19:\n\t.cell 117300739\nCPI0_20:\n\t.cell 157198259\nCPI0_21:\nCPI2_0:\nCPI3_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_22:\n\t.cell 2535301202817642044428229017600\nCPI0_23:\n\t.cell 2535301200456458802993406410752\nCPI0_24:\nCPI3_2:\n\t.cell 904625697166532776746648320380374280103671760270919307471179981048634146816\nCPI0_25:\nCPI3_4:\n\t.cell -15402802100530019096323380498944738953123845089667699673314898783681816316945\nCPI0_26:\nCPI3_5:\n\t.cell -12521951952277481918037692698396753805066444367861040067922658107645432430592\nCPI0_27:\nCPI3_8:\n\t.cell -47593579280375979043157453241769130281332370874351131709864197298683662827520\nCPI0_28:\n\t.cell 2852213852874699394802404818944\nCPI0_29:\n\t.cell -53278079350709166316280423202849322519190186591071851114874353210178472783461\nCPI0_30:\n\t.cell 18446744073709551487\nCPI0_31:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_32:\nCPI3_7:\n\t.cell 2852213850513516153367582212096\nCPI0_33:\nCPI3_6:\n\t.cell -8925786854382365140803610566892621886666030076708212855559399484773745295360\nCPI0_34:\n\t.cell -48779021399624352913043740871316806255710487544085296571819983744317932961792\nCPI0_35:\n\t.cell -11755061144800301697569464646051016592542027884323852438436504014981133500416\nCPI0_36:\n\t.cell -2008451700269974843276142548484964856347179961252680468036279050352537370624\nCPI0_37:\n\t.cell -52305948261162578668367882225327028569797882979485679342215860919519743330011\nCPI0_38:\n\t.cell -27889059366240281169193357100633332908378892778709981755071813198463099602853\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address,uint256)":"9dc29fac","decimals()":"313ce567","mint(address,uint256)":"40c10f19","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.3a2587f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\":\"ERC20Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":foundry-era-contracts/=lib/foundry-era-contracts/\",\":murky/=lib/foundry-era-contracts/lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solpp/=lib/foundry-era-contracts/src/solpp/solpp-generated-contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\":{\"keccak256\":\"0x3ae81a443846c6d9bd387d6c6a5d7271a25095c83bb93817eefdaa22e13ca9e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f98462a56f254dc0046038e92527e3b7ee5bf0e03f60e3459fbd400c14be01a7\",\"dweb:/ipfs/QmevANfRaMrqy8Jh33LxEs5vP2xBPQspxtij8bsonw3GHM\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 45:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 46:\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\", 47:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 48:\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\", 49:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 53:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\nobject \"ERC20Mock_43479\" {\n    code {\n        {\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let _2 := 64\n            let newFreePtr := add(_1, _2)\n            let _3 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n            }\n            mstore(_2, newFreePtr)\n            mstore(_1, 9)\n            let _4 := 32\n            mstore(add(_1, _4), \"ERC20Mock\")\n            let memPtr := mload(_2)\n            let newFreePtr_1 := add(memPtr, _2)\n            if or(gt(newFreePtr_1, _3), lt(newFreePtr_1, memPtr))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n            }\n            mstore(_2, newFreePtr_1)\n            let _5 := 4\n            mstore(memPtr, _5)\n            mstore(add(memPtr, _4), \"E20M\")\n            let newLen := mload(_1)\n            if gt(newLen, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(_5, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n            }\n            /// @src 47:1962:1975  \"_name = name_\"\n            let _6 := 0x03\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            let _7 := sload(/** @src 47:1962:1975  \"_name = name_\" */ _6)\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            let length := /** @src -1:-1:-1 */ 0\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            let _8 := 1\n            length := shr(_8, _7)\n            let outOfPlaceEncoding := and(_7, _8)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, _4))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(_5, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n            }\n            let _9 := 31\n            if gt(length, _9)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 47:1962:1975  \"_name = name_\" */ _6)\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                let deleteStart := add(data, shr(5, add(newLen, _9)))\n                if lt(newLen, _4) { deleteStart := data }\n                let _10 := add(data, shr(5, add(length, _9)))\n                let start := deleteStart\n                for { } lt(start, _10) { start := add(start, _8) }\n                {\n                    sstore(start, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            let srcOffset := /** @src -1:-1:-1 */ 0\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            srcOffset := _4\n            switch gt(newLen, _9)\n            case 1 {\n                let loopEnd := and(newLen, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 47:1962:1975  \"_name = name_\" */ _6)\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                for { } lt(i, loopEnd) { i := add(i, _4) }\n                {\n                    sstore(dstPtr, mload(add(_1, srcOffset)))\n                    dstPtr := add(dstPtr, _8)\n                    srcOffset := add(srcOffset, _4)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(_1, srcOffset))\n                    sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 47:1962:1975  \"_name = name_\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen), 248), not(0)))))\n                }\n                sstore(/** @src 47:1962:1975  \"_name = name_\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ add(shl(_8, newLen), _8))\n            }\n            default {\n                let value := /** @src -1:-1:-1 */ 0\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                if newLen\n                {\n                    value := mload(add(_1, srcOffset))\n                }\n                sstore(/** @src 47:1962:1975  \"_name = name_\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ or(and(value, not(shr(shl(/** @src 47:1962:1975  \"_name = name_\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen), not(0)))), shl(_8, newLen)))\n            }\n            let newLen_1 := mload(memPtr)\n            if gt(newLen_1, _3)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(_5, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n            }\n            let _11 := sload(_5)\n            let length_1 := /** @src -1:-1:-1 */ 0\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            length_1 := shr(_8, _11)\n            let outOfPlaceEncoding_1 := and(_11, _8)\n            if iszero(outOfPlaceEncoding_1)\n            {\n                length_1 := and(length_1, 0x7f)\n            }\n            if eq(outOfPlaceEncoding_1, lt(length_1, _4))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                mstore(_5, 0x22)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n            }\n            if gt(length_1, _9)\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _5)\n                let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _9)))\n                if lt(newLen_1, _4) { deleteStart_1 := data_1 }\n                let _12 := add(data_1, shr(5, add(length_1, _9)))\n                let start_1 := deleteStart_1\n                for { } lt(start_1, _12) { start_1 := add(start_1, _8) }\n                {\n                    sstore(start_1, /** @src -1:-1:-1 */ 0)\n                }\n            }\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            let srcOffset_1 := /** @src -1:-1:-1 */ 0\n            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n            srcOffset_1 := _4\n            switch gt(newLen_1, _9)\n            case 1 {\n                let loopEnd_1 := and(newLen_1, not(31))\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _5)\n                let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                let i_1 := /** @src -1:-1:-1 */ 0\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _4) }\n                {\n                    sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                    dstPtr_1 := add(dstPtr_1, _8)\n                    srcOffset_1 := add(srcOffset_1, _4)\n                }\n                if lt(loopEnd_1, newLen_1)\n                {\n                    let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                    sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 47:1962:1975  \"_name = name_\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen_1), 248), not(0)))))\n                }\n                sstore(_5, add(shl(_8, newLen_1), _8))\n            }\n            default {\n                let value_1 := /** @src -1:-1:-1 */ 0\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                if newLen_1\n                {\n                    value_1 := mload(add(memPtr, srcOffset_1))\n                }\n                sstore(_5, or(and(value_1, not(shr(shl(/** @src 47:1962:1975  \"_name = name_\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen_1), not(0)))), shl(_8, newLen_1)))\n            }\n            let _13 := mload(_2)\n            let _14 := datasize(\"ERC20Mock_43479_deployed\")\n            codecopy(_13, dataoffset(\"ERC20Mock_43479_deployed\"), _14)\n            return(_13, _14)\n        }\n    }\n    /// @use-src 46:\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\", 47:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 53:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\n    object \"ERC20Mock_43479_deployed\" {\n        code {\n            {\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := _4\n                        let slotValue := sload(/** @src 47:2151:2156  \"_name\" */ 0x03)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let length := _4\n                        let _5 := 1\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        let _6 := 32\n                        if eq(outOfPlaceEncoding, lt(length, _6))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x22)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_1, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(_1, _6), and(slotValue, not(255)))\n                            ret := add(add(_1, shl(5, iszero(iszero(length)))), _6)\n                        }\n                        case 1 {\n                            mstore(_4, /** @src 47:2151:2156  \"_name\" */ 0x03)\n                            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                            let i := _4\n                            for { } lt(i, length) { i := add(i, _6) }\n                            {\n                                mstore(add(add(_1, i), _6), sload(dataPos))\n                                dataPos := add(dataPos, _5)\n                            }\n                            ret := add(add(_1, i), _6)\n                        }\n                        let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_2, newFreePtr)\n                        return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0 := abi_decode_address_3706()\n                        let _7 := calldataload(36)\n                        /// @src 47:10057:10146  \"if (owner == address(0)) {...\"\n                        if /** @src 47:10061:10080  \"owner == address(0)\" */ iszero(/** @src 53:735:745  \"msg.sender\" */ caller())\n                        /// @src 47:10057:10146  \"if (owner == address(0)) {...\"\n                        {\n                            /// @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                            let _8 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                            /// @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                            mstore(_8, shl(224, 0xe602df05))\n                            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_8, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                            /// @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                            revert(_8, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        let _9 := and(/** @src 47:10159:10180  \"spender == address(0)\" */ value0, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        /// @src 47:10155:10245  \"if (spender == address(0)) {...\"\n                        if /** @src 47:10159:10180  \"spender == address(0)\" */ iszero(/** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _9)\n                        /// @src 47:10155:10245  \"if (spender == address(0)) {...\"\n                        {\n                            /// @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                            let _10 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                            /// @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                            mstore(_10, shl(225, 0x4a1406b1))\n                            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_10, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                            /// @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                            revert(_10, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        mstore(_4, /** @src 53:735:745  \"msg.sender\" */ caller())\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(0x20, /** @src 47:9105:9109  \"true\" */ 0x01)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _11 := keccak256(_4, _2)\n                        mstore(_4, _9)\n                        mstore(0x20, _11)\n                        sstore(keccak256(_4, _2), _7)\n                        /// @src 47:10333:10364  \"Approval(owner, spender, value)\"\n                        let _12 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                        mstore(_12, _7)\n                        /// @src 47:10333:10364  \"Approval(owner, spender, value)\"\n                        log3(_12, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 47:10333:10364  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 53:735:745  \"msg.sender\" */ caller(), /** @src 47:10333:10364  \"Approval(owner, spender, value)\" */ _9)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let memPos := mload(_2)\n                        mstore(memPos, /** @src 47:9105:9109  \"true\" */ 0x01)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        return(memPos, 0x20)\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _13 := sload(/** @src 47:3222:3234  \"_totalSupply\" */ 0x02)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _13)\n                        return(memPos_1, 32)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(_4, _4) }\n                        let value0_1 := abi_decode_address_3706()\n                        let value1 := abi_decode_address()\n                        let value := calldataload(68)\n                        let _14 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(_4, _14)\n                        mstore(32, 1)\n                        let _15 := keccak256(_4, _2)\n                        mstore(_4, /** @src 53:735:745  \"msg.sender\" */ caller())\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(32, _15)\n                        let _16 := sload(keccak256(_4, _2))\n                        /// @src 47:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                        if /** @src 47:10828:10865  \"currentAllowance != type(uint256).max\" */ iszero(eq(_16, /** @src 47:10848:10865  \"type(uint256).max\" */ not(0)))\n                        /// @src 47:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                        {\n                            /// @src 47:10881:11011  \"if (currentAllowance < value) {...\"\n                            if /** @src 47:10885:10909  \"currentAllowance < value\" */ lt(_16, value)\n                            /// @src 47:10881:11011  \"if (currentAllowance < value) {...\"\n                            {\n                                /// @src 47:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                let _17 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                /// @src 47:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                mstore(_17, shl(225, 0x7dc7a0d9))\n                                revert(_17, sub(abi_encode_address_uint256_uint256(add(_17, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), /** @src 53:735:745  \"msg.sender\" */ caller(), /** @src 47:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ _16, value), _17))\n                            }\n                            /// @src 47:10057:10146  \"if (owner == address(0)) {...\"\n                            if /** @src 47:10061:10080  \"owner == address(0)\" */ iszero(/** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _14)\n                            /// @src 47:10057:10146  \"if (owner == address(0)) {...\"\n                            {\n                                /// @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                let _18 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                /// @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                mstore(_18, shl(224, 0xe602df05))\n                                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(/** @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_18, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                /// @src 47:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                revert(_18, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                            }\n                            /// @src 47:10155:10245  \"if (spender == address(0)) {...\"\n                            if /** @src 47:10159:10180  \"spender == address(0)\" */ iszero(/** @src 53:735:745  \"msg.sender\" */ caller())\n                            /// @src 47:10155:10245  \"if (spender == address(0)) {...\"\n                            {\n                                /// @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                let _19 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                /// @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                mstore(_19, shl(225, 0x4a1406b1))\n                                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(/** @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_19, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                /// @src 47:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                revert(_19, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                            }\n                            mstore(_4, _14)\n                            mstore(32, 1)\n                            let _20 := keccak256(_4, _2)\n                            mstore(_4, /** @src 53:735:745  \"msg.sender\" */ caller())\n                            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(32, _20)\n                            sstore(keccak256(_4, _2), sub(/** @src 47:11077:11101  \"currentAllowance - value\" */ _16, value))\n                        }\n                        /// @src 47:5249:5254  \"value\"\n                        fun_transfer(value0_1, value1, value)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let memPos_2 := mload(_2)\n                        mstore(memPos_2, 1)\n                        return(memPos_2, 32)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPos_3 := mload(_2)\n                        mstore(memPos_3, /** @src 47:3075:3077  \"18\" */ 0x12)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        return(memPos_3, 32)\n                    }\n                    case 0x40c10f19 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_2 := abi_decode_address_3706()\n                        let value_1 := calldataload(36)\n                        let _21 := and(/** @src 47:7791:7812  \"account == address(0)\" */ value0_2, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        /// @src 47:7787:7878  \"if (account == address(0)) {...\"\n                        if /** @src 47:7791:7812  \"account == address(0)\" */ iszero(/** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _21)\n                        /// @src 47:7787:7878  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 47:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                            let _22 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                            /// @src 47:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(_22, shl(224, 0xec442f05))\n                            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 47:7835:7867  \"ERC20InvalidReceiver(address(0))\" */ add(_22, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                            /// @src 47:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                            revert(_22, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        let _23 := sload(/** @src 47:6496:6517  \"_totalSupply += value\" */ 0x02)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let sum := add(_23, value_1)\n                        if gt(_23, sum)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x11)\n                            revert(_4, 36)\n                        }\n                        sstore(/** @src 47:6496:6517  \"_totalSupply += value\" */ 0x02, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ sum)\n                        mstore(_4, _21)\n                        mstore(0x20, _4)\n                        let dataSlot := keccak256(_4, _2)\n                        sstore(dataSlot, add(sload(/** @src 47:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ value_1))\n                        /// @src 47:7346:7371  \"Transfer(from, to, value)\"\n                        let _24 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                        mstore(_24, value_1)\n                        /// @src 47:7346:7371  \"Transfer(from, to, value)\"\n                        log3(_24, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 47:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4, /** @src 47:7346:7371  \"Transfer(from, to, value)\" */ _21)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        return(_4, _4)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        mstore(_4, and(abi_decode_address_3706(), sub(shl(160, 1), 1)))\n                        mstore(32, _4)\n                        let _25 := sload(keccak256(_4, _2))\n                        let memPos_4 := mload(_2)\n                        mstore(memPos_4, _25)\n                        return(memPos_4, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let memPtr := mload(_2)\n                        let ret_1 := _4\n                        let slotValue_1 := sload(_3)\n                        let length_1 := _4\n                        let _26 := 1\n                        length_1 := shr(1, slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_1 := and(length_1, 0x7f)\n                        }\n                        let _27 := 32\n                        if eq(outOfPlaceEncoding_1, lt(length_1, _27))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x22)\n                            revert(_4, 0x24)\n                        }\n                        mstore(memPtr, length_1)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr, _27), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr, shl(5, iszero(iszero(length_1)))), _27)\n                        }\n                        case 1 {\n                            mstore(_4, _3)\n                            let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                            let i_1 := _4\n                            for { } lt(i_1, length_1) { i_1 := add(i_1, _27) }\n                            {\n                                mstore(add(add(memPtr, i_1), _27), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, _26)\n                            }\n                            ret_1 := add(add(memPtr, i_1), _27)\n                        }\n                        let newFreePtr_1 := add(memPtr, and(add(sub(ret_1, memPtr), 31), not(31)))\n                        if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        mstore(_2, newFreePtr_1)\n                        return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr), newFreePtr_1))\n                    }\n                    case 0x9dc29fac {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_3 := abi_decode_address_3706()\n                        let value_2 := calldataload(36)\n                        let _28 := and(/** @src 47:8317:8338  \"account == address(0)\" */ value0_3, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                        /// @src 47:8313:8402  \"if (account == address(0)) {...\"\n                        if /** @src 47:8317:8338  \"account == address(0)\" */ iszero(/** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _28)\n                        /// @src 47:8313:8402  \"if (account == address(0)) {...\"\n                        {\n                            /// @src 47:8361:8391  \"ERC20InvalidSender(address(0))\"\n                            let _29 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                            /// @src 47:8361:8391  \"ERC20InvalidSender(address(0))\"\n                            mstore(_29, shl(225, 0x4b637e8f))\n                            /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 47:8361:8391  \"ERC20InvalidSender(address(0))\" */ add(_29, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                            /// @src 47:8361:8391  \"ERC20InvalidSender(address(0))\"\n                            revert(_29, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        mstore(_4, _28)\n                        mstore(0x20, _4)\n                        let _30 := sload(keccak256(_4, _2))\n                        /// @src 47:6599:6714  \"if (fromBalance < value) {...\"\n                        if /** @src 47:6603:6622  \"fromBalance < value\" */ lt(_30, value_2)\n                        /// @src 47:6599:6714  \"if (fromBalance < value) {...\"\n                        {\n                            /// @src 47:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            let _31 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                            /// @src 47:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            mstore(_31, shl(226, 0x391434e3))\n                            revert(_31, sub(abi_encode_address_uint256_uint256(add(_31, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), /** @src 47:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ value0_3, _30, value_2), _31))\n                        }\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(_4, _28)\n                        mstore(0x20, _4)\n                        sstore(keccak256(_4, _2), sub(/** @src 47:6852:6871  \"fromBalance - value\" */ _30, value_2))\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        sstore(/** @src 47:7073:7094  \"_totalSupply -= value\" */ 0x02, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(sload(/** @src 47:7073:7094  \"_totalSupply -= value\" */ 0x02), /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ value_2))\n                        /// @src 47:7346:7371  \"Transfer(from, to, value)\"\n                        let _32 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                        mstore(_32, value_2)\n                        /// @src 47:7346:7371  \"Transfer(from, to, value)\"\n                        log3(_32, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 47:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _28, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        return(_4, _4)\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_4 := abi_decode_address_3706()\n                        /// @src 47:3754:3759  \"value\"\n                        fun_transfer(/** @src 53:735:745  \"msg.sender\" */ caller(), /** @src 47:3754:3759  \"value\" */ value0_4, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ calldataload(36))\n                        let memPos_5 := mload(_2)\n                        mstore(memPos_5, 1)\n                        return(memPos_5, 32)\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let value0_5 := abi_decode_address_3706()\n                        let value1_1 := abi_decode_address()\n                        let _33 := sub(shl(160, 1), 1)\n                        mstore(_4, and(value0_5, _33))\n                        mstore(32, /** @src 47:3952:3963  \"_allowances\" */ 0x01)\n                        /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _34 := keccak256(_4, _2)\n                        mstore(_4, and(value1_1, _33))\n                        mstore(32, _34)\n                        let _35 := sload(keccak256(_4, _2))\n                        let memPos_6 := mload(_2)\n                        mstore(memPos_6, _35)\n                        return(memPos_6, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                let _1 := 32\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                let i := 0\n                for { } lt(i, length) { i := add(i, _1) }\n                {\n                    mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                }\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n            }\n            function abi_decode_address_3706() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_encode_address_uint256_uint256(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                mstore(add(headStart, 32), value1)\n                mstore(add(headStart, 64), value2)\n            }\n            /// @ast-id 43724 @src 47:5656:5956  \"function _transfer(address from, address to, uint256 value) internal {...\"\n            function fun_transfer(var_from, var_to, var_value)\n            {\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                let _1 := sub(shl(160, 1), 1)\n                let _2 := and(/** @src 47:5739:5757  \"from == address(0)\" */ var_from, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _1)\n                /// @src 47:5735:5821  \"if (from == address(0)) {...\"\n                if /** @src 47:5739:5757  \"from == address(0)\" */ iszero(/** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                /// @src 47:5735:5821  \"if (from == address(0)) {...\"\n                {\n                    /// @src 47:5780:5810  \"ERC20InvalidSender(address(0))\"\n                    let _3 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(64)\n                    /// @src 47:5780:5810  \"ERC20InvalidSender(address(0))\"\n                    mstore(_3, /** @src 47:8361:8391  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                    /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    mstore(/** @src 47:5780:5810  \"ERC20InvalidSender(address(0))\" */ add(_3, 4), /** @src 47:5755:5756  \"0\" */ 0x00)\n                    /// @src 47:5780:5810  \"ERC20InvalidSender(address(0))\"\n                    revert(_3, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                }\n                let _4 := and(/** @src 47:5834:5850  \"to == address(0)\" */ var_to, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _1)\n                /// @src 47:5830:5916  \"if (to == address(0)) {...\"\n                if /** @src 47:5834:5850  \"to == address(0)\" */ iszero(/** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                /// @src 47:5830:5916  \"if (to == address(0)) {...\"\n                {\n                    /// @src 47:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                    let _5 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(64)\n                    /// @src 47:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                    mstore(_5, /** @src 47:7835:7867  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                    /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    mstore(/** @src 47:5873:5905  \"ERC20InvalidReceiver(address(0))\" */ add(_5, 4), /** @src 47:5755:5756  \"0\" */ 0x00)\n                    /// @src 47:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                    revert(_5, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                }\n                /// @src 47:6356:6896  \"if (from == address(0)) {...\"\n                let _6 := 0\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                mstore(/** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                mstore(0x20, /** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6)\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                let _7 := sload(keccak256(/** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40))\n                /// @src 47:6599:6714  \"if (fromBalance < value) {...\"\n                if /** @src 47:6603:6622  \"fromBalance < value\" */ lt(_7, var_value)\n                /// @src 47:6599:6714  \"if (fromBalance < value) {...\"\n                {\n                    /// @src 47:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    let _8 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(0x40)\n                    /// @src 47:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                    mstore(_8, shl(226, 0x391434e3))\n                    revert(_8, sub(abi_encode_address_uint256_uint256(add(_8, 4), var_from, _7, var_value), _8))\n                }\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                mstore(/** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                mstore(0x20, /** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6)\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                sstore(keccak256(/** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40), sub(/** @src 47:6852:6871  \"fromBalance - value\" */ _7, var_value))\n                /// @src 46:110:391  \"contract ERC20Mock is ERC20 {...\"\n                mstore(/** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                let dataSlot := keccak256(/** @src 47:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40)\n                sstore(dataSlot, add(sload(/** @src 47:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ var_value))\n                /// @src 47:7346:7371  \"Transfer(from, to, value)\"\n                let _9 := /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(0x40)\n                mstore(_9, var_value)\n                /// @src 47:7346:7371  \"Transfer(from, to, value)\"\n                log3(_9, /** @src 46:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 47:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _2, _4)\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000818000a\"\n    }\n}\n","hash":"010001191bd0c20330815eebb1830a5ce2fc61c5966f725b42e03468f37140f6","factoryDependencies":{},"id":46}