{"abi":null,"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"MinimalAccountTest.t.sol:MinimalAccountTest\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[14]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_14\n\tadd\t128, r0, r2\n\tst.1\t64, r2\n\tsub.s!\t4, r3, r3\n\tjump.lt\t@.BB0_279\n\tld\tr1, r1\n\tshr.s\t224, r1, r1\n\tsub.s!\t@CPI0_13[0], r1, r3\n\tjump.gt\t@.BB0_32\n\tsub.s!\t@CPI0_26[0], r1, r2\n\tjump.le\t@.BB0_45\n\tsub.s!\t@CPI0_27[0], r1, r2\n\tjump.le\t@.BB0_97\n\tsub.s!\t@CPI0_28[0], r1, r2\n\tjump.eq\t@.BB0_151\n\tsub.s!\t@CPI0_29[0], r1, r2\n\tjump.eq\t@.BB0_145\n\tsub.s!\t@CPI0_30[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t27, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[5]\n\tsub.s!\t@CPI0_43[0], r2, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[5], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_57[0], r2, r2\n\tsub.s!\t@CPI0_46[0], r2, r3\n\tjump.gt\t@.BB0_163\n\tadd\t128, r2, r15\n\tst.1\t64, r15\n\tadd\tstack-[5], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r1\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_383\n.BB0_12:\n\tadd\t32, r0, r1\n\tst.1.inc\tr15, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\t64, r15, r3\n\tshl.s\t5, r1, r2\n\tadd\tr2, r3, r2\n\tsub!\tr1, r0, r4\n\tjump.ne\t@.BB0_442\n.BB0_13:\n\tsub\tr2, r15, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r15, r3\n\tadd.ge\tr2, r0, r15\n\tshl.s\t64, r15, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_14:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t12, r0, r1\n\tsload\tr1, r2\n\tsub.s\t256, r0, r3\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t31, r0, r1\n\tsload\tr1, r2\n\tand\tr2, r3, r2\n\tor\t1, r2, r2\n\tsstore\tr1, r2\n\tadd\t10, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_1[0], r0, r2\n\tst.1\t160, r2\n\tst.1\t224, r2\n\tst.1\t234, r0\n\tst.1\t192, r1\n\tadd\t256, r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_2[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tld\tr1, r1\n\tadd\t@CPI0_3[0], r0, r2\n\tst.1\t256, r2\n\tst.1\t260, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_4[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_19\n\tadd\tr0, r0, r7\n.BB0_18:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t256, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_18\n.BB0_19:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_21\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t256, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_21:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t256, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_279\n\tld.1\t256, r1\n\tadd\tr1, r0, stack-[14]\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.gt\t@.BB0_279\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r6\n\tadd\t36, r6, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_9[0], r0, r1\n\tst.1\tr6, r1\n\tadd\t4, r6, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r6, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\t100, r6, r2\n\tsub!\tr1, r0, r3\n\tjump.eq\t@.BB0_29\n\tadd\tr0, r0, r3\n.BB0_28:\n\tadd\tr3, r2, r4\n\tadd\t160, r3, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_28\n.BB0_29:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r6, r3\n\tadd\tr2, r0, r3\n\tadd.lt\tr6, r0, r3\n\tshl.s\t64, r3, r3\n\tadd\t100, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r3, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tadd\tr6, r0, stack-[13]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_287\n\tadd\tstack-[13], r0, r1\n\tadd\tr1, r0, r2\n\tsub.s!\t@CPI0_10[0], r1, r1\n\tjump.ge\t@.BB0_163\n\tst.1\t64, r2\n\tadd\t35, r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_11[0], r2, r2\n\tor\tstack-[14], r2, r2\n\tsstore\tr1, r2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_12[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_32:\n\tsub.s!\t@CPI0_14[0], r1, r3\n\tjump.le\t@.BB0_51\n\tsub.s!\t@CPI0_15[0], r1, r3\n\tjump.le\t@.BB0_106\n\tsub.s!\t@CPI0_16[0], r1, r2\n\tjump.eq\t@.BB0_154\n\tsub.s!\t@CPI0_17[0], r1, r2\n\tjump.eq\t@.BB0_148\n\tsub.s!\t@CPI0_18[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t31, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_38[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_39:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_42\n\tadd\tr0, r0, r6\n.BB0_41:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_41\n.BB0_42:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n.BB0_43:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_44:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_45:\n\tsub.s!\t@CPI0_33[0], r1, r2\n\tjump.gt\t@.BB0_85\n\tsub.s!\t@CPI0_36[0], r1, r2\n\tjump.eq\t@.BB0_119\n\tsub.s!\t@CPI0_37[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t33, r0, r1\n\tsload\tr1, r2\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\t128, r3\n\tand\t@CPI0_6[0], r1, r4\n\tst.1\t132, r4\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr2, r0, stack-[13]\n\tadd\tr4, r0, stack-[14]\n\tjump.ne\t@.BB0_209\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_215\n.BB0_51:\n\tsub.s!\t@CPI0_21[0], r1, r2\n\tjump.gt\t@.BB0_90\n\tsub.s!\t@CPI0_24[0], r1, r2\n\tjump.eq\t@.BB0_123\n\tsub.s!\t@CPI0_25[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t29, r0, r4\n\tsload\tr4, r1\n\tadd\tr1, r0, stack-[6]\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[6], r0, r1\n\tshl.s\t5, r1, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_57[0], r2, r2\n\tsub.s!\t@CPI0_46[0], r2, r3\n\tjump.gt\t@.BB0_163\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r4\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_96\n\tadd\t160, r0, r4\n\tadd\t@CPI0_71[0], r0, r5\n\tadd\t32784, r0, stack-[5]\n\tadd\tr0, r0, r6\n.BB0_59:\n\tsub.s!\t@CPI0_61[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\tr6, r0, stack-[11]\n\tadd\tr4, r0, stack-[13]\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tsload\tr5, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\tr1, r0, stack-[14]\n\tst.1.inc\tr1, r2, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tr5, r0, stack-[12]\n\tadd\t1, r5, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tld\tr1, r2\n\tadd\tstack-[8], r0, r9\n\tsub.s!\t8, r9, r1\n\tjump.lt\t@.BB0_78\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n.BB0_63:\n\tadd\t224, r8, r3\n\tsload\tr2, r4\n\tand\t@CPI0_62[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t192, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t160, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t128, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t96, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t64, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t32, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr8, r3\n\tadd\t1, r2, r2\n\tadd\t256, r8, r8\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r9, r3\n\tjump.lt\t@.BB0_63\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_66\n.BB0_65:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr8, r3, r8\n\tor\t1, r1, r1\n.BB0_66:\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[12], r0, r5\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_68\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_80\n.BB0_69:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_70\n.BB0_81:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_82\n.BB0_71:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_72\n.BB0_83:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_84\n.BB0_73:\n\tsub!\tr1, r9, r1\n\tjump.ge\t@.BB0_75\n.BB0_74:\n\tand\t@CPI0_62[0], r2, r1\n\tst.1.inc\tr8, r1, r8\n.BB0_75:\n\tsub\tr8, r7, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r7, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tadd\tstack-[14], r0, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\tr1, r7\n\tst.1.inc\tr4, r3, r4\n\tadd\t2, r5, r5\n\tld.1\t64, r1\n\tadd\t1, r6, r6\n\tsub.s!\tstack-[6], r6, r2\n\tjump.lt\t@.BB0_59\n\tjump\t@.BB0_96\n.BB0_68:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_69\n.BB0_80:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_81\n.BB0_70:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_71\n.BB0_82:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_83\n.BB0_72:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_73\n.BB0_84:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r1\n\tjump.lt\t@.BB0_74\n\tjump\t@.BB0_75\n.BB0_78:\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_65\n\tjump\t@.BB0_66\n.BB0_85:\n\tsub.s!\t@CPI0_34[0], r1, r2\n\tjump.eq\t@.BB0_139\n\tsub.s!\t@CPI0_35[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t22, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.eq\t@.BB0_89\n\tadd\t160, r0, r4\n\tadd\t@CPI0_78[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_229:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_229\n\tjump\t@.BB0_268\n.BB0_90:\n\tsub.s!\t@CPI0_22[0], r1, r2\n\tjump.eq\t@.BB0_142\n\tsub.s!\t@CPI0_23[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t28, r0, r4\n\tsload\tr4, r1\n\tadd\tr1, r0, stack-[6]\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[6], r0, r1\n\tshl.s\t5, r1, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_57[0], r2, r2\n\tsub.s!\t@CPI0_46[0], r2, r3\n\tjump.gt\t@.BB0_163\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r4\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_356\n.BB0_96:\n\tadd\tr1, r0, stack-[14]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_array_struct_FuzzSelector_dyn, @DEFAULT_UNWIND\n\tjump\t@.BB0_330\n.BB0_97:\n\tsub.s!\t@CPI0_31[0], r1, r2\n\tjump.eq\t@.BB0_157\n\tsub.s!\t@CPI0_32[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t30, r0, r1\n\tsload\tr1, r2\n\tadd\tr2, r0, stack-[1]\n\tsub.s!\t@CPI0_43[0], r2, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[1], r0, r2\n\tshl.s\t5, r2, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_57[0], r2, r2\n\tsub.s!\t@CPI0_46[0], r2, r3\n\tjump.gt\t@.BB0_163\n\tadd\t128, r2, r3\n\tst.1\t64, r3\n\tadd\tstack-[1], r0, r2\n\tst.1\t128, r2\n\tst.1\t0, r1\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_421\n.BB0_103:\n\tadd\t32, r0, r1\n\tst.1.inc\tr3, r1, r2\n\tld.1\t128, r1\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[14]\n\tadd\t64, r3, r2\n\tshl.s\t5, r1, r3\n\tadd\tr2, r3, r5\n\tadd\tr1, r0, stack-[13]\n\tsub!\tr1, r0, r3\n\tjump.ne\t@.BB0_450\n\tadd\tr5, r0, r11\n.BB0_105:\n\tadd\tstack-[14], r0, r4\n\tsub\tr11, r4, r1\n\tjump\t@.BB0_271\n.BB0_106:\n\tsub.s!\t@CPI0_19[0], r1, r3\n\tjump.eq\t@.BB0_160\n\tsub.s!\t@CPI0_20[0], r1, r1\n\tjump.ne\t@.BB0_279\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t8, r0, r1\n\tsload\tr1, r1\n\tand!\t255, r1, r1\n\tjump.ne\t@.BB0_118\n\tadd\t@CPI0_53[0], r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.1\t132, r1\n\tadd\t@CPI0_54[0], r0, r1\n\tst.1\t164, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_55[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_113\n\tadd\tr0, r0, r7\n.BB0_112:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_112\n.BB0_113:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_115\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_115:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_336\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r2\n\tst.1\t64, r2\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_279\n\tld.1\t128, r1\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n.BB0_118:\n\tsub!\tr1, r0, r1\n\tadd\t0, r0, r1\n\tadd.ne\t1, r0, r1\n\tst.1\tr2, r1\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_56[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_119:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t@CPI0_89[0], r0, r1\n\tst.1\t164, r1\n\tcontext.gas_left\tr1\n\tadd\t@CPI0_90[0], r0, r2\n\tst.1\t128, r2\n\tst.1\t132, r0\n\tadd\t96, r0, r2\n\tadd\tr2, r0, stack-[14]\n\tst.1\t196, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_91[0], r1, r1\n\tst.1\t228, r0\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_164\n\tld\tr1, r2\n\tsub!\tr2, r0, r1\n\tjump.ne\t@.BB0_292\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_165\n.BB0_123:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t26, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_43[0], r5, r2\n\tjump.gt\t@.BB0_163\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_57[0], r2, r2\n\tsub.s!\t@CPI0_46[0], r2, r3\n\tjump.gt\t@.BB0_163\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_329\n\tadd\t160, r0, r6\n\tadd\t@CPI0_72[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_128:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_441\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_134\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[12]\n\tadd\tr9, r0, stack-[10]\n\tadd\tr8, r0, stack-[13]\n\tadd\tr6, r0, stack-[14]\n\tadd\tr7, r0, stack-[11]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tadd\tstack-[12], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[13], r0, r8\n\tjump.eq\t@.BB0_135\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r7\n\tadd\tstack-[10], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_133:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_133\n\tjump\t@.BB0_136\n.BB0_134:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_136\n.BB0_135:\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r7\n\tadd\tstack-[10], r0, r9\n.BB0_136:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tst.1.inc\tr6, r9, r6\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_128\n\tjump\t@.BB0_328\n.BB0_139:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t33, r0, r1\n\tsload\tr1, r2\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\t128, r3\n\tand\t@CPI0_6[0], r1, r4\n\tst.1\t132, r4\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr2, r0, stack-[13]\n\tadd\tr4, r0, stack-[14]\n\tjump.ne\t@.BB0_171\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_177\n.BB0_142:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t33, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tsload\tr1, r2\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[12]\n\tsload\tr1, r1\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\t128, r3\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.1\t132, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr2, r0, stack-[13]\n\tjump.ne\t@.BB0_190\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_196\n.BB0_145:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t23, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_230\n\tjump\t@.BB0_89\n.BB0_148:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t33, r0, r1\n\tsload\tr1, r2\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[13]\n\tsload\tr1, r1\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\t128, r3\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.1\t132, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr2, r0, stack-[12]\n\tjump.ne\t@.BB0_233\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_239\n.BB0_151:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t24, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_262\n\tjump\t@.BB0_89\n.BB0_154:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t21, r0, r2\n\tsload\tr2, r1\n\tst.1\t128, r1\n\tst.1\t0, r2\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_265\n.BB0_89:\n\tadd\t32, r0, r2\n\tjump\t@.BB0_269\n.BB0_157:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t33, r0, r1\n\tadd\tr1, r0, stack-[11]\n\tsload\tr1, r2\n\tadd\t32, r0, r1\n\tadd\tr1, r0, stack-[13]\n\tsload\tr1, r1\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\t128, r3\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.1\t132, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr2, r0, stack-[12]\n\tjump.ne\t@.BB0_272\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_278\n.BB0_160:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_279\n\tadd\t25, r0, r4\n\tsload\tr4, r5\n\tsub.s!\t@CPI0_43[0], r5, r2\n\tjump.gt\t@.BB0_163\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_57[0], r2, r2\n\tsub.s!\t@CPI0_46[0], r2, r3\n\tjump.le\t@.BB0_314\n.BB0_163:\n\tadd\t@CPI0_70[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_48[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_164:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_165:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_168\n\tadd\tr0, r0, r6\n.BB0_167:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_167\n.BB0_168:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_170\n.BB0_169:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_170:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t96, r2, r1\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_171:\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_174\n\tadd\tr0, r0, r7\n.BB0_173:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_173\n.BB0_174:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_176\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_176:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_294\n.BB0_177:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_279\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[11]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[10]\n\tadd\t4, r4, r1\n\tadd\tstack-[11], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\tr1, r0, stack-[9]\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[11]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_463\n\tadd\tstack-[11], r0, r2\n\tsub.s!\t@CPI0_43[0], r2, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[11], r0, r5\n\tst.1\t64, r5\n\tadd\t@CPI0_44[0], r0, r2\n\tadd\tstack-[10], r0, r4\n\tst.1\tr4, r2\n\tadd\tstack-[14], r0, r2\n\tadd\tstack-[9], r0, r4\n\tst.1\tr4, r2\n\tadd\t68, r5, r2\n\tadd\t@CPI0_45[0], r0, r4\n\tst.1\tr2, r4\n\tadd\t68, r0, r2\n\tst.1\tr5, r2\n\tsub.s!\t@CPI0_46[0], r5, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[11], r0, r5\n\tadd\t128, r5, r8\n\tst.1\t64, r8\n\tadd\t228, r5, r2\n\tadd\t96, r0, r4\n\tadd\tr4, r0, stack-[8]\n\tst.1\tr2, r4\n\tadd\t160, r5, r4\n\tadd\t@CPI0_51[0], r0, r2\n\tadd\tr4, r0, stack-[9]\n\tst.1\tr4, r2\n\tadd\t164, r5, r2\n\tadd\tstack-[13], r0, r4\n\tst.1\tr2, r4\n\tadd\t260, r5, r4\n\tld.1\tr5, r2\n\tst.1\tr4, r2\n\tadd\t196, r5, r4\n\tst.1\tr4, r0\n\tadd\t292, r5, r4\n\tsub!\tr2, r0, r5\n\tadd\tstack-[10], r0, r9\n\tjump.eq\t@.BB0_186\n\tadd\tr0, r0, r5\n.BB0_185:\n\tadd\tr5, r4, r6\n\tadd\tr5, r9, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_185\n.BB0_186:\n\tadd\tr2, r4, r4\n\tst.1\tr4, r0\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, stack-[11]\n\tand\tstack-[11], r2, r2\n\tadd\t132, r2, r4\n\tst.1\tr8, r4\n\tadd\t195, r2, r2\n\tand\tstack-[11], r2, r2\n\tadd\tr8, r0, stack-[13]\n\tadd\tr2, r8, r4\n\tsub!\tr4, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tsub.s!\t@CPI0_43[0], r4, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tadd\tstack-[14], r0, r6\n\tst.1\t64, r6\n\tadd\t31, r0, r2\n\tadd\tr2, r0, stack-[6]\n\tsload\tr2, r2\n\tadd\t34, r0, r4\n\tsload\tr4, r4\n\tadd\t@CPI0_63[0], r0, r5\n\tst.1.inc\tr6, r5, r5\n\tadd\tr5, r0, stack-[10]\n\tand\t@CPI0_6[0], r4, stack-[7]\n\tcontext.gas_left\tr4\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r5\n\tjump.ne\t@.BB0_511\n\tsub.s!\t64, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_517\n.BB0_190:\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_193\n\tadd\tr0, r0, r7\n.BB0_192:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_192\n.BB0_193:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_195\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_195:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_299\n.BB0_196:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_279\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[10]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[9]\n\tadd\t4, r4, r1\n\tadd\tstack-[10], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\tr1, r0, stack-[8]\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[10]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_468\n\tadd\tstack-[10], r0, r2\n\tsub.s!\t@CPI0_43[0], r2, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[10], r0, r5\n\tst.1\t64, r5\n\tadd\t@CPI0_44[0], r0, r2\n\tadd\tstack-[9], r0, r4\n\tst.1\tr4, r2\n\tadd\tstack-[14], r0, r2\n\tadd\tstack-[8], r0, r4\n\tst.1\tr4, r2\n\tadd\t68, r5, r2\n\tadd\t@CPI0_45[0], r0, r4\n\tst.1\tr2, r4\n\tadd\t68, r0, r2\n\tst.1\tr5, r2\n\tsub.s!\t@CPI0_46[0], r5, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[10], r0, r5\n\tadd\t128, r5, r8\n\tst.1\t64, r8\n\tadd\t228, r5, r2\n\tadd\t96, r0, r4\n\tadd\tr4, r0, stack-[7]\n\tst.1\tr2, r4\n\tadd\t160, r5, r4\n\tadd\t@CPI0_51[0], r0, r2\n\tadd\tr4, r0, stack-[8]\n\tst.1\tr4, r2\n\tadd\t164, r5, r2\n\tadd\tstack-[13], r0, r4\n\tst.1\tr2, r4\n\tadd\t260, r5, r4\n\tld.1\tr5, r2\n\tst.1\tr4, r2\n\tadd\t196, r5, r4\n\tst.1\tr4, r0\n\tadd\t292, r5, r4\n\tsub!\tr2, r0, r5\n\tadd\tstack-[9], r0, r9\n\tjump.eq\t@.BB0_205\n\tadd\tr0, r0, r5\n.BB0_204:\n\tadd\tr5, r4, r6\n\tadd\tr5, r9, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_204\n.BB0_205:\n\tadd\tr2, r4, r4\n\tst.1\tr4, r0\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, stack-[13]\n\tand\tstack-[13], r2, r2\n\tadd\t132, r2, r4\n\tst.1\tr8, r4\n\tadd\t195, r2, r2\n\tand\tstack-[13], r2, r2\n\tadd\tr8, r0, stack-[10]\n\tadd\tr2, r8, r4\n\tsub!\tr4, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tsub.s!\t@CPI0_43[0], r4, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tadd\tstack-[14], r0, r6\n\tst.1\t64, r6\n\tadd\t31, r0, r2\n\tadd\tr2, r0, stack-[5]\n\tsload\tr2, r2\n\tadd\t34, r0, r4\n\tsload\tr4, r4\n\tadd\t@CPI0_63[0], r0, r5\n\tst.1.inc\tr6, r5, r5\n\tadd\tr5, r0, stack-[9]\n\tand\t@CPI0_6[0], r4, stack-[6]\n\tcontext.gas_left\tr4\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r5\n\tjump.ne\t@.BB0_536\n\tsub.s!\t64, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_542\n.BB0_209:\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_212\n\tadd\tr0, r0, r7\n.BB0_211:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_211\n.BB0_212:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_214\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_214:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_304\n.BB0_215:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_279\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[11]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[10]\n\tadd\t4, r4, r1\n\tadd\tstack-[11], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\tr1, r0, stack-[9]\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[11]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_473\n\tadd\tstack-[11], r0, r2\n\tsub.s!\t@CPI0_43[0], r2, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[11], r0, r5\n\tst.1\t64, r5\n\tadd\t@CPI0_44[0], r0, r2\n\tadd\tstack-[10], r0, r4\n\tst.1\tr4, r2\n\tadd\tstack-[14], r0, r2\n\tadd\tstack-[9], r0, r4\n\tst.1\tr4, r2\n\tadd\t68, r5, r2\n\tadd\t@CPI0_45[0], r0, r4\n\tst.1\tr2, r4\n\tadd\t68, r0, r2\n\tst.1\tr5, r2\n\tsub.s!\t@CPI0_46[0], r5, r2\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[11], r0, r5\n\tadd\t128, r5, r8\n\tst.1\t64, r8\n\tadd\t228, r5, r2\n\tadd\t96, r0, r4\n\tst.1\tr2, r4\n\tadd\t160, r5, r4\n\tadd\t@CPI0_51[0], r0, r2\n\tadd\tr4, r0, stack-[9]\n\tst.1\tr4, r2\n\tadd\t164, r5, r2\n\tadd\tstack-[13], r0, r4\n\tst.1\tr2, r4\n\tadd\t260, r5, r4\n\tld.1\tr5, r2\n\tst.1\tr4, r2\n\tadd\t196, r5, r4\n\tst.1\tr4, r0\n\tadd\t292, r5, r4\n\tsub!\tr2, r0, r5\n\tadd\tstack-[10], r0, r9\n\tjump.eq\t@.BB0_224\n\tadd\tr0, r0, r5\n.BB0_223:\n\tadd\tr5, r4, r6\n\tadd\tr5, r9, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB0_223\n.BB0_224:\n\tadd\tr2, r4, r4\n\tst.1\tr4, r0\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, stack-[11]\n\tand\tstack-[11], r2, r2\n\tadd\t132, r2, r4\n\tst.1\tr8, r4\n\tadd\t195, r2, r2\n\tand\tstack-[11], r2, r2\n\tadd\tr8, r0, stack-[13]\n\tadd\tr2, r8, r4\n\tsub!\tr4, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tadd\tr4, r0, stack-[14]\n\tsub.s!\t@CPI0_43[0], r4, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tadd\tstack-[14], r0, r6\n\tst.1\t64, r6\n\tadd\t31, r0, r2\n\tadd\tr2, r0, stack-[7]\n\tsload\tr2, r2\n\tadd\t34, r0, r4\n\tsload\tr4, r4\n\tadd\t@CPI0_63[0], r0, r5\n\tst.1.inc\tr6, r5, r5\n\tadd\tr5, r0, stack-[10]\n\tand\t@CPI0_6[0], r4, stack-[8]\n\tcontext.gas_left\tr4\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r5\n\tjump.ne\t@.BB0_568\n\tsub.s!\t64, r3, r2\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_574\n.BB0_230:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_74[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_231:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_231\n\tjump\t@.BB0_268\n.BB0_233:\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_236\n\tadd\tr0, r0, r7\n.BB0_235:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_235\n.BB0_236:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_238\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_238:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_309\n.BB0_239:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_279\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[11]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[9]\n\tadd\t4, r4, r1\n\tadd\tstack-[11], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\tr1, r0, stack-[11]\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[10]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_478\n\tadd\tstack-[10], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[10], r0, r3\n\tst.1\t64, r3\n\tadd\t@CPI0_44[0], r0, r1\n\tadd\tstack-[9], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[11], r0, r2\n\tst.1\tr2, r1\n\tadd\t68, r3, r1\n\tadd\t@CPI0_45[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r0, r1\n\tst.1\tr3, r1\n\tsub.s!\t@CPI0_46[0], r3, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[10], r0, r1\n\tadd\t128, r1, r1\n\tst.1\t64, r1\n\tadd\t35, r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand\t@CPI0_6[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_47[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_48[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_625\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_49[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\t@CPI0_50[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_48[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_642\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r3\n\tadd\t68, r3, r1\n\tadd\t96, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_51[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tadd\tstack-[12], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r3, r1\n\tst.1\tr1, r0\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tadd\t100, r3, r2\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[13]\n\tadd\t132, r3, r2\n\tsub!\tr1, r0, r3\n\tadd\tstack-[9], r0, r6\n\tjump.eq\t@.BB0_258\n\tadd\tr0, r0, r3\n.BB0_257:\n\tadd\tr3, r2, r4\n\tadd\tr3, r6, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_257\n.BB0_258:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr2\n\tadd\tstack-[14], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_260\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[13], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t132, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_720\n.BB0_260:\n\tadd\tstack-[13], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[13], r0, r1\n\tst.1\t64, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_262:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_75[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_263:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_263\n\tjump\t@.BB0_268\n.BB0_265:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_52[0], r0, r2\n\tadd\tr0, r0, r3\n.BB0_266:\n\tadd\tr4, r0, r5\n\tsload\tr2, r4\n\tand\t@CPI0_6[0], r4, r4\n\tst.1.inc\tr5, r4, r4\n\tadd\t1, r2, r2\n\tadd\t1, r3, r3\n\tsub!\tr3, r1, r6\n\tjump.lt\t@.BB0_266\n.BB0_268:\n\tsub.s\t96, r5, r2\n.BB0_269:\n\tadd\t128, r0, r1\n\tadd\tr1, r0, stack-[14]\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r1\n\tadd\tr1, r0, stack-[13]\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @abi_encode_array_address_dyn, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r4\n.BB0_270:\n\tsub\tr1, r4, r1\n.BB0_271:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_272:\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr4, r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_40[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_275\n\tadd\tr0, r0, r7\n.BB0_274:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tadd\t128, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_274\n.BB0_275:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_277\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tshl.s\t3, r5, r5\n\tadd\t128, r6, r6\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_277:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_331\n.BB0_278:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tor\t128, r1, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.ge\t@.BB0_280\n.BB0_279:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_280:\n\tld.1\t128, r1\n\tadd\tr1, r0, stack-[10]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[8]\n\tadd\t4, r4, r1\n\tadd\tstack-[10], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tadd\tr1, r0, stack-[10]\n\tst.1\tr1, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[9]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_483\n\tadd\tstack-[9], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[9], r0, r4\n\tst.1\t64, r4\n\tadd\t@CPI0_44[0], r0, r1\n\tadd\tstack-[8], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[10], r0, r2\n\tst.1\tr2, r1\n\tadd\t68, r4, r1\n\tadd\t@CPI0_45[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t68, r0, r1\n\tst.1\tr4, r1\n\tsub.s!\t@CPI0_46[0], r4, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[9], r0, r1\n\tadd\t128, r1, r2\n\tst.1\t64, r2\n\tadd\t@CPI0_77[0], r0, r1\n\tadd\tr2, r0, stack-[10]\n\tst.1\tr2, r1\n\tcontext.gas_left\tr1\n\tadd\tstack-[14], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_488\n\tsub.s!\t32, r3, r1\n\tadd.ge\t32, r0, r3\n\tjump\t@.BB0_494\n.BB0_287:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_290\n\tadd\tr0, r0, r6\n.BB0_289:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_289\n.BB0_290:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_292:\n\tld.1\t64, r10\n\tadd\t@CPI0_92[0], r0, r1\n\tst.1.inc\tr10, r1, r4\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tadd\tr4, r0, stack-[13]\n\tjump.ne\t@.BB0_341\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_347\n.BB0_294:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_297\n\tadd\tr0, r0, r6\n.BB0_296:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_296\n.BB0_297:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_299:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_302\n\tadd\tr0, r0, r6\n.BB0_301:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_301\n.BB0_302:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_304:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_307\n\tadd\tr0, r0, r6\n.BB0_306:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_306\n.BB0_307:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_309:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_312\n\tadd\tr0, r0, r6\n.BB0_311:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_311\n.BB0_312:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_314:\n\tadd\t128, r2, r1\n\tst.1\t64, r1\n\tst.1\t128, r5\n\tst.1\t0, r4\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_329\n\tadd\t160, r0, r6\n\tadd\t@CPI0_58[0], r0, r7\n\tadd\tr0, r0, r8\n\tadd\tr5, r0, stack-[8]\n.BB0_316:\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_441\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_322\n\tadd\tr3, r0, stack-[9]\n\tadd\tr4, r0, stack-[12]\n\tadd\tr9, r0, stack-[10]\n\tadd\tr8, r0, stack-[13]\n\tadd\tr6, r0, stack-[14]\n\tadd\tr7, r0, stack-[11]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tadd\tstack-[12], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[8], r0, r5\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[13], r0, r8\n\tjump.eq\t@.BB0_323\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r7\n\tadd\tstack-[10], r0, r9\n\tadd\tstack-[9], r0, r11\n.BB0_321:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_321\n\tjump\t@.BB0_324\n.BB0_322:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_324\n.BB0_323:\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r7\n\tadd\tstack-[10], r0, r9\n.BB0_324:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tst.1.inc\tr6, r9, r6\n\tadd\t1, r7, r7\n\tadd\t1, r8, r8\n\tsub!\tr8, r5, r1\n\tjump.lt\t@.BB0_316\n.BB0_328:\n\tld.1\t64, r1\n.BB0_329:\n\tadd\tr1, r0, stack-[14]\n\tadd\t128, r0, r2\n\tnear_call\tr0, @abi_encode_array_string_dyn, @DEFAULT_UNWIND\n.BB0_330:\n\tadd\tstack-[14], r0, r4\n\tjump\t@.BB0_270\n.BB0_331:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_334\n\tadd\tr0, r0, r6\n.BB0_333:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_333\n.BB0_334:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_336:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_339\n\tadd\tr0, r0, r6\n.BB0_338:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_338\n.BB0_339:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_341:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tsub.s!\t@CPI0_0[0], r10, r4\n\tadd.lt\tr10, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_64[0], r1, r1\n\tadd\tr10, r0, stack-[12]\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[12], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_344\n\tadd\tr0, r0, r7\n.BB0_343:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_343\n.BB0_344:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_346\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tr10, r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_346:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_458\n.BB0_347:\n\tadd\t31, r4, r1\n\tand\t224, r1, r2\n\tadd\tr10, r0, r5\n\tadd\tr2, r10, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r2\n\tjump.lt\t@.BB0_279\n\tld.1\tr5, r2\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_279\n\tadd\tstack-[13], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_93[0], r3, r4\n\tjump.ge\t@.BB0_279\n\tadd\t32, r0, r4\n\tsload\tr4, r5\n\tand\t@CPI0_11[0], r5, r5\n\tor\tr5, r3, r3\n\tsstore\tr4, r3\n\tshl.s\t8, r2, r2\n\tand\t@CPI0_94[0], r2, r2\n\tadd\t31, r0, r3\n\tsload\tr3, r4\n\tand\t@CPI0_95[0], r4, r4\n\tor\tr4, r2, r2\n\tsstore\tr3, r2\n\tsub.s!\t@CPI0_96[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\t36, r1, r2\n\tadd\t@CPI0_97[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tadd\tstack-[14], r0, r4\n\tst.1\tr2, r4\n\tadd\t@CPI0_90[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_98[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_593\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_606\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_594\n.BB0_356:\n\tadd\t160, r0, r4\n\tadd\t@CPI0_60[0], r0, r5\n\tadd\t32784, r0, stack-[5]\n\tadd\tr0, r0, r6\n.BB0_357:\n\tsub.s!\t@CPI0_61[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\tr6, r0, stack-[11]\n\tadd\tr4, r0, stack-[13]\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tsload\tr5, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\tr1, r0, stack-[14]\n\tst.1.inc\tr1, r2, r1\n\tadd\tr1, r0, stack-[7]\n\tadd\tr5, r0, stack-[12]\n\tadd\t1, r5, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[10]\n\tadd\tr3, r0, stack-[8]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[9]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\tstack-[5], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tld\tr1, r2\n\tadd\tstack-[8], r0, r9\n\tsub.s!\t8, r9, r1\n\tjump.lt\t@.BB0_376\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n.BB0_361:\n\tadd\t224, r8, r3\n\tsload\tr2, r4\n\tand\t@CPI0_62[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t192, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t160, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t128, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t96, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t64, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t32, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr8, r3\n\tadd\t1, r2, r2\n\tadd\t256, r8, r8\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r9, r3\n\tjump.lt\t@.BB0_361\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_364\n.BB0_363:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr8, r3, r8\n\tor\t1, r1, r1\n.BB0_364:\n\tadd\tstack-[13], r0, r4\n\tadd\tstack-[12], r0, r5\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_366\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_378\n.BB0_367:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_368\n.BB0_379:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_380\n.BB0_369:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_370\n.BB0_381:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_382\n.BB0_371:\n\tsub!\tr1, r9, r1\n\tjump.ge\t@.BB0_373\n.BB0_372:\n\tand\t@CPI0_62[0], r2, r1\n\tst.1.inc\tr8, r1, r8\n.BB0_373:\n\tsub\tr8, r7, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r7, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tadd\tstack-[14], r0, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tadd\tstack-[7], r0, r1\n\tst.1\tr1, r7\n\tst.1.inc\tr4, r3, r4\n\tadd\t2, r5, r5\n\tld.1\t64, r1\n\tadd\t1, r6, r6\n\tsub.s!\tstack-[6], r6, r2\n\tjump.lt\t@.BB0_357\n\tjump\t@.BB0_96\n.BB0_366:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_367\n.BB0_378:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_379\n.BB0_368:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_369\n.BB0_380:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_381\n.BB0_370:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_371\n.BB0_382:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r1\n\tjump.lt\t@.BB0_372\n\tjump\t@.BB0_373\n.BB0_376:\n\tadd\tr0, r0, r1\n\tadd\tstack-[11], r0, r6\n\tadd\tstack-[10], r0, r7\n\tadd\tstack-[9], r0, r8\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_363\n\tjump\t@.BB0_364\n.BB0_383:\n\tadd\t160, r0, r2\n\tadd\t@CPI0_73[0], r0, r7\n\tadd\tr0, r0, r3\n.BB0_384:\n\tadd\tr3, r0, stack-[11]\n\tadd\tr2, r0, stack-[12]\n\tsub.s!\t@CPI0_61[0], r15, r1\n\tjump.gt\t@.BB0_163\n\tadd\t64, r15, r6\n\tst.1\t64, r6\n\tsload\tr7, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\txor\tr1, r3, r3\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_441\n\tst.1\tr6, r4\n\tsub!\tr2, r0, r2\n\tadd\tr15, r0, stack-[14]\n\tadd\tr7, r0, stack-[13]\n\tjump.eq\t@.BB0_391\n\tadd\tr4, r0, stack-[9]\n\tadd\tr6, r0, stack-[10]\n\tst.1\t0, r7\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tadd\tstack-[9], r0, r8\n\tsub!\tr8, r0, r2\n\tjump.eq\t@.BB0_392\n\tadd\tstack-[14], r0, r15\n\tadd\t96, r15, r2\n\tld\tr1, r3\n\tadd\tr0, r0, r1\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[10], r0, r6\n.BB0_390:\n\tadd\tr2, r1, r4\n\tsload\tr3, r5\n\tst.1\tr4, r5\n\tadd\t1, r3, r3\n\tadd\t32, r1, r1\n\tsub!\tr1, r8, r4\n\tjump.lt\t@.BB0_390\n\tjump\t@.BB0_393\n.BB0_391:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r15, r2\n\tst.1\tr2, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_393\n.BB0_392:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r15\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[10], r0, r6\n.BB0_393:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, stack-[10]\n\tand\tstack-[10], r1, r2\n\tadd\tr2, r6, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tst.1.inc\tr15, r6, r1\n\tadd\tr1, r0, stack-[6]\n\tadd\t1, r7, r1\n\tsload\tr1, r3\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[9]\n\tadd\tr3, r0, stack-[7]\n\tst.1.inc\tr2, r3, r2\n\tadd\tr2, r0, stack-[8]\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tld\tr1, r2\n\tadd\tstack-[7], r0, r9\n\tsub.s!\t8, r9, r1\n\tjump.lt\t@.BB0_415\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[8], r0, r8\n.BB0_398:\n\tadd\t224, r8, r3\n\tsload\tr2, r4\n\tand\t@CPI0_62[0], r4, r5\n\tst.1\tr3, r5\n\tshl.s\t32, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t192, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t64, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t160, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t96, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t128, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t128, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t96, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t160, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t64, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t192, r4, r3\n\tand\t@CPI0_62[0], r3, r3\n\tadd\t32, r8, r5\n\tst.1\tr5, r3\n\tshl.s\t224, r4, r3\n\tst.1\tr8, r3\n\tadd\t1, r2, r2\n\tadd\t256, r8, r8\n\tadd\t8, r1, r1\n\tor\t7, r1, r3\n\tsub!\tr3, r9, r3\n\tjump.lt\t@.BB0_398\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_401\n.BB0_400:\n\tshl.s\t224, r2, r3\n\tst.1.inc\tr8, r3, r8\n\tor\t1, r1, r1\n.BB0_401:\n\tadd\tstack-[9], r0, r4\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_403\n\tshl.s\t192, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_417\n.BB0_404:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_405\n.BB0_418:\n\tshl.s\t128, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_419\n.BB0_406:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_407\n.BB0_420:\n\tshl.s\t64, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_408\n\tjump\t@.BB0_409\n.BB0_403:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_404\n.BB0_417:\n\tshl.s\t160, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_418\n.BB0_405:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_406\n.BB0_419:\n\tshl.s\t96, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_420\n.BB0_407:\n\tsub!\tr1, r9, r3\n\tjump.ge\t@.BB0_409\n.BB0_408:\n\tshl.s\t32, r2, r3\n\tand\t@CPI0_62[0], r3, r3\n\tst.1.inc\tr8, r3, r8\n\tadd\t1, r1, r1\n.BB0_409:\n\tadd\tstack-[10], r0, r3\n\tsub!\tr1, r9, r1\n\tjump.ge\t@.BB0_412\n\tand\t@CPI0_62[0], r2, r1\n\tst.1.inc\tr8, r1, r8\n.BB0_412:\n\tsub\tr8, r4, r1\n\tadd\t31, r1, r1\n\tand\tr1, r3, r2\n\tadd\tr2, r4, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tadd\tstack-[6], r0, r1\n\tst.1\tr1, r4\n\tadd\tstack-[12], r0, r2\n\tst.1.inc\tr2, r6, r2\n\tadd\t2, r7, r7\n\tld.1\t64, r15\n\tadd\tstack-[11], r0, r3\n\tadd\t1, r3, r3\n\tsub.s!\tstack-[5], r3, r1\n\tjump.lt\t@.BB0_384\n\tjump\t@.BB0_12\n.BB0_415:\n\tadd\tr0, r0, r1\n\tadd\tstack-[14], r0, r6\n\tadd\tstack-[13], r0, r7\n\tadd\tstack-[8], r0, r8\n\tsload\tr2, r2\n\tsub!\tr1, r9, r3\n\tjump.lt\t@.BB0_400\n\tjump\t@.BB0_401\n.BB0_421:\n\tadd\t160, r0, stack-[4]\n\tadd\t@CPI0_76[0], r0, stack-[5]\n\tadd\tr0, r0, stack-[3]\n\tjump\t@.BB0_423\n.BB0_422:\n\tadd\tstack-[2], r0, r1\n\tadd\tstack-[6], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[14], r0, r1\n\tadd\tstack-[4], r0, r2\n\tst.1.inc\tr2, r1, r2\n\tadd\tr2, r0, stack-[4]\n\tadd\tstack-[5], r0, r1\n\tadd\t2, r1, stack-[5]\n\tld.1\t64, r3\n\tadd\tstack-[3], r0, r2\n\tadd\t1, r2, r2\n\tadd\tr2, r0, stack-[3]\n\tsub.s!\tstack-[1], r2, r1\n\tjump.ge\t@.BB0_103\n.BB0_423:\n\tadd\tr3, r0, stack-[14]\n\tsub.s!\t@CPI0_61[0], r3, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r2\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\tstack-[5], r0, r3\n\tsload\tr3, r1\n\tand\t@CPI0_6[0], r1, r1\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[2]\n\tor\t1, r3, r1\n\tsload\tr1, r5\n\tsub.s!\t@CPI0_43[0], r5, r2\n\tjump.gt\t@.BB0_163\n\tshl.s\t5, r5, r2\n\tadd\t63, r2, r2\n\tand\t@CPI0_57[0], r2, r2\n\tld.1\t64, r3\n\tadd\tr3, r2, r2\n\tadd\tr3, r0, stack-[6]\n\tsub!\tr2, r3, r3\n\tadd\t0, r0, r3\n\tadd.lt\t1, r0, r3\n\tsub.s!\t@CPI0_43[0], r2, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r2\n\tadd\tr5, r0, stack-[7]\n\tadd\tstack-[6], r0, r2\n\tst.1\tr2, r5\n\tst.1\t0, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.eq\t@.BB0_422\n\tld\tr1, r6\n\tadd\tr0, r0, r7\n\tadd\tstack-[6], r0, r8\n.BB0_430:\n\tsload\tr6, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r3\n\tand\t127, r3, r4\n\tadd.ne\tr3, r0, r4\n\tsub.s!\t31, r4, r3\n\tadd\t0, r0, r3\n\tadd.gt\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.ne\t@.BB0_441\n\tld.1\t64, r9\n\tst.1.inc\tr9, r4, r3\n\tsub!\tr2, r0, r2\n\tjump.eq\t@.BB0_436\n\tadd\tr3, r0, stack-[8]\n\tadd\tr4, r0, stack-[9]\n\tadd\tr9, r0, stack-[10]\n\tadd\tr8, r0, stack-[11]\n\tadd\tr7, r0, stack-[12]\n\tadd\tr6, r0, stack-[13]\n\tst.1\t0, r6\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_59[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tadd\tstack-[9], r0, r10\n\tsub!\tr10, r0, r2\n\tadd\tstack-[12], r0, r7\n\tadd\tstack-[11], r0, r8\n\tjump.eq\t@.BB0_437\n\tld\tr1, r2\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n\tadd\tstack-[8], r0, r11\n.BB0_435:\n\tadd\tr11, r1, r3\n\tsload\tr2, r4\n\tst.1\tr3, r4\n\tadd\t1, r2, r2\n\tadd\t32, r1, r1\n\tsub!\tr1, r10, r3\n\tjump.lt\t@.BB0_435\n\tjump\t@.BB0_438\n.BB0_436:\n\tsub.s\t256, r0, r2\n\tand\tr1, r2, r1\n\tst.1\tr3, r1\n\tsub!\tr4, r0, r1\n\tadd\t32, r0, r1\n\tadd.eq\t0, r0, r1\n\tjump\t@.BB0_438\n.BB0_437:\n\tadd\tr0, r0, r1\n\tadd\tstack-[7], r0, r5\n\tadd\tstack-[13], r0, r6\n\tadd\tstack-[10], r0, r9\n.BB0_438:\n\tadd\t63, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r2\n\tadd\tr2, r9, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tadd\t32, r8, r8\n\tst.1\t64, r1\n\tst.1\tr8, r9\n\tadd\t1, r6, r6\n\tadd\t1, r7, r7\n\tsub!\tr7, r5, r1\n\tjump.lt\t@.BB0_430\n\tjump\t@.BB0_422\n.BB0_441:\n\tadd\t@CPI0_70[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_48[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_442:\n\tadd\t160, r0, r4\n\tadd\t64, r0, r5\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_444\n.BB0_443:\n\tadd\t1, r6, r6\n\tsub!\tr6, r1, r7\n\tjump.ge\t@.BB0_13\n.BB0_444:\n\tsub\tr2, r15, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr3, r7, r3\n\tld.1.inc\tr4, r7, r4\n\tld.1.inc\tr7, r9, r8\n\tst.1.inc\tr2, r5, r7\n\tadd\t64, r2, r12\n\tld.1.inc\tr9, r10, r11\n\tst.1\tr12, r10\n\tadd\t96, r2, r9\n\tsub!\tr10, r0, r12\n\tjump.eq\t@.BB0_447\n\tadd\tr0, r0, r12\n.BB0_446:\n\tadd\tr12, r9, r13\n\tadd\tr11, r12, r14\n\tld.1\tr14, r14\n\tst.1\tr13, r14\n\tadd\t32, r12, r12\n\tsub!\tr12, r10, r13\n\tjump.lt\t@.BB0_446\n.BB0_447:\n\tadd\tr10, r9, r11\n\tst.1\tr11, r0\n\tadd\t31, r10, r10\n\tsub.s\t32, r0, r11\n\tand\tr10, r11, r10\n\tadd\tr10, r9, r9\n\tld.1\tr8, r8\n\tsub\tr9, r2, r2\n\tst.1\tr7, r2\n\tld.1\tr8, r7\n\tst.1.inc\tr9, r7, r2\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_443\n\tadd\tr0, r0, r9\n.BB0_449:\n\tadd\t32, r8, r8\n\tld.1\tr8, r10\n\tand\t@CPI0_62[0], r10, r10\n\tst.1.inc\tr2, r10, r2\n\tadd\t1, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_449\n\tjump\t@.BB0_443\n.BB0_450:\n\tadd\t160, r0, r3\n\tadd\t64, r0, r4\n\tadd\tr0, r0, r6\n\tjump\t@.BB0_452\n.BB0_451:\n\tadd\t1, r6, r6\n\tsub.s!\tstack-[13], r6, r1\n\tadd\tr11, r0, r5\n\tjump.ge\t@.BB0_105\n.BB0_452:\n\tsub.s\tstack-[14], r5, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr2, r7, r2\n\tld.1.inc\tr3, r7, r3\n\tld.1.inc\tr7, r7, r8\n\tand\t@CPI0_6[0], r7, r7\n\tst.1.inc\tr5, r7, r9\n\tld.1\tr8, r7\n\tst.1\tr9, r4\n\tadd\t64, r5, r9\n\tld.1\tr7, r8\n\tst.1\tr9, r8\n\tadd\t96, r5, r9\n\tshl.s\t5, r8, r10\n\tadd\tr10, r9, r11\n\tsub!\tr8, r0, r10\n\tjump.eq\t@.BB0_451\n\tadd\tr0, r0, r10\n\tjump\t@.BB0_455\n.BB0_454:\n\tadd\t31, r12, r1\n\tsub.s\t32, r0, r13\n\tand\tr1, r13, r1\n\tadd\tr12, r11, r12\n\tst.1\tr12, r0\n\tadd\tr1, r11, r11\n\tadd\t1, r10, r10\n\tsub!\tr10, r8, r1\n\tjump.ge\t@.BB0_451\n.BB0_455:\n\tsub\tr11, r5, r12\n\tsub.s\t96, r12, r12\n\tst.1.inc\tr9, r12, r9\n\tadd\t32, r7, r7\n\tld.1\tr7, r12\n\tld.1.inc\tr12, r12, r13\n\tst.1.inc\tr11, r12, r11\n\tsub!\tr12, r0, r14\n\tjump.eq\t@.BB0_454\n\tadd\tr0, r0, r14\n.BB0_457:\n\tadd\tr14, r11, r15\n\tadd\tr13, r14, r1\n\tld.1\tr1, r1\n\tst.1\tr15, r1\n\tadd\t32, r14, r14\n\tsub!\tr14, r12, r1\n\tjump.lt\t@.BB0_457\n\tjump\t@.BB0_454\n.BB0_458:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_461\n\tadd\tr0, r0, r6\n.BB0_460:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_460\n.BB0_461:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_463:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_466\n\tadd\tr0, r0, r6\n.BB0_465:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_465\n.BB0_466:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_468:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_471\n\tadd\tr0, r0, r6\n.BB0_470:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_470\n.BB0_471:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_473:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_476\n\tadd\tr0, r0, r6\n.BB0_475:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_475\n.BB0_476:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_478:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_481\n\tadd\tr0, r0, r6\n.BB0_480:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_480\n.BB0_481:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_483:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_486\n\tadd\tr0, r0, r6\n.BB0_485:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_485\n.BB0_486:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_488:\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[10], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.lt\tr4, r0, r2\n\tshl.s\t64, r2, r2\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_64[0], r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tsub.s!\t32, r4, r3\n\tadd\tr4, r0, r3\n\tadd.ge\t32, r0, r3\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_491\n\tadd\tr0, r0, r7\n.BB0_490:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_490\n.BB0_491:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_493\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[10], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_493:\n\tadd\tr4, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_599\n.BB0_494:\n\tadd\t31, r3, r1\n\tand\t96, r1, r1\n\tadd\tstack-[10], r1, r1\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_279\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.gt\t@.BB0_279\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_47[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_48[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_637\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[14]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r3\n\tadd\t68, r3, r1\n\tadd\t96, r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_51[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r2\n\tadd\tstack-[12], r0, r1\n\tadd\tr2, r0, stack-[7]\n\tst.1\tr2, r1\n\tadd\t36, r3, r1\n\tst.1\tr1, r0\n\tadd\tstack-[9], r0, r1\n\tld.1\tr1, r1\n\tadd\t100, r3, r2\n\tst.1\tr2, r1\n\tadd\tr3, r0, stack-[10]\n\tadd\t132, r3, r2\n\tsub!\tr1, r0, r3\n\tadd\tstack-[8], r0, r6\n\tjump.eq\t@.BB0_506\n\tadd\tr0, r0, r3\n.BB0_505:\n\tadd\tr3, r2, r4\n\tadd\tr3, r6, r5\n\tld.1\tr5, r5\n\tst.1\tr4, r5\n\tadd\t32, r3, r3\n\tsub!\tr3, r1, r4\n\tjump.lt\t@.BB0_505\n.BB0_506:\n\tadd\tr1, r2, r2\n\tst.1\tr2, r0\n\tcontext.gas_left\tr2\n\tadd\tstack-[14], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.eq\t@.BB0_508\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r3\n\tand\tr1, r3, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[10], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t132, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[14], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_705\n.BB0_508:\n\tadd\tstack-[10], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[10], r0, r4\n\tst.1\t64, r4\n\tadd\tstack-[11], r0, r1\n\tsload\tr1, r2\n\tadd\tstack-[13], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\tr4, r3\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tstack-[7], r0, r3\n\tst.1\tr3, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_710\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_716\n.BB0_511:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr1, r0, r4\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.lt\tr5, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r4, r3\n\tor\tr3, r1, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_514\n\tadd\tr0, r0, r7\n.BB0_513:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_513\n.BB0_514:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_516\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_516:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_610\n.BB0_517:\n\tadd\t31, r4, r2\n\tand\t224, r2, r2\n\tadd\tstack-[14], r2, r2\n\tsub.s!\t@CPI0_43[0], r2, r4\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r2\n\tsub.s!\t64, r3, r4\n\tjump.lt\t@.BB0_279\n\tsub.s!\t@CPI0_61[0], r2, r4\n\tjump.gt\t@.BB0_163\n\tadd\t64, r2, r4\n\tst.1\t64, r4\n\tadd\tstack-[14], r0, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI0_6[0], r4, r5\n\tjump.gt\t@.BB0_279\n\tst.1.inc\tr2, r4, r5\n\tadd\tstack-[10], r0, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI0_6[0], r4, r6\n\tjump.gt\t@.BB0_279\n\tst.1\tr5, r4\n\tadd\tstack-[12], r0, r4\n\tsload\tr4, r6\n\tld.1\t64, r8\n\tadd\t@CPI0_65[0], r0, r4\n\tst.1\tr8, r4\n\tadd\t4, r8, r4\n\tadd\t128, r0, r7\n\tst.1\tr4, r7\n\tadd\tstack-[13], r0, r4\n\tld.1\tr4, r4\n\tadd\t132, r8, r7\n\tst.1\tr7, r4\n\tadd\tr8, r0, stack-[14]\n\tadd\t164, r8, r7\n\tsub!\tr4, r0, r8\n\tadd\tstack-[9], r0, r11\n\tjump.eq\t@.BB0_525\n\tadd\tr0, r0, r8\n.BB0_524:\n\tadd\tr8, r7, r9\n\tadd\tr8, r11, r10\n\tld.1\tr10, r10\n\tst.1\tr9, r10\n\tadd\t32, r8, r8\n\tsub!\tr8, r4, r9\n\tjump.lt\t@.BB0_524\n.BB0_525:\n\tadd\tr4, r7, r7\n\tst.1\tr7, r0\n\tld.1\tr2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\tstack-[14], r0, r8\n\tadd\t36, r8, r7\n\tst.1\tr7, r2\n\tld.1\tr5, r2\n\tand\t@CPI0_6[0], r6, r5\n\tadd\t100, r8, r6\n\tst.1\tr6, r5\n\tadd\t68, r8, r5\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\tr5, r2\n\tcontext.gas_left\tr2\n\tadd\tstack-[7], r0, r5\n\tsub.s!\t4, r5, r5\n\tjump.eq\t@.BB0_527\n\tadd\t31, r4, r1\n\tand\tstack-[11], r1, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t164, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[7], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_647\n.BB0_527:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[14], r0, r8\n\tjump.eq\t@.BB0_530\n\tadd\tr0, r0, r5\n.BB0_529:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_529\n.BB0_530:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_532\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[14], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_532:\n\tadd\t31, r3, r1\n\tand\t@CPI0_66[0], r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tadd\tstack-[14], r0, r1\n\tadd\tr3, r1, r2\n\tnear_call\tr0, @abi_decode_struct_PackedUserOperation_fromMemory, @DEFAULT_UNWIND\n\tadd\tstack-[6], r0, r2\n\tsload\tr2, r2\n\tld.1\t64, r4\n\tadd\t@CPI0_63[0], r0, r3\n\tadd\tr4, r0, stack-[14]\n\tst.1.inc\tr4, r3, r3\n\tadd\tr3, r0, stack-[13]\n\tadd\tr1, r0, stack-[11]\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_662\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_668\n.BB0_536:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr1, r0, r4\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.lt\tr5, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r4, r3\n\tor\tr3, r1, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_539\n\tadd\tr0, r0, r7\n.BB0_538:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_538\n.BB0_539:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_541\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_541:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_615\n.BB0_542:\n\tadd\t31, r4, r2\n\tand\t224, r2, r2\n\tadd\tstack-[14], r2, r2\n\tsub.s!\t@CPI0_43[0], r2, r4\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r2\n\tsub.s!\t64, r3, r4\n\tjump.lt\t@.BB0_279\n\tsub.s!\t@CPI0_61[0], r2, r4\n\tjump.gt\t@.BB0_163\n\tadd\t64, r2, r4\n\tst.1\t64, r4\n\tadd\tstack-[14], r0, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI0_6[0], r4, r5\n\tjump.gt\t@.BB0_279\n\tst.1.inc\tr2, r4, r4\n\tadd\tstack-[9], r0, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI0_6[0], r5, r6\n\tjump.gt\t@.BB0_279\n\tst.1\tr4, r5\n\tadd\tstack-[12], r0, r5\n\tsload\tr5, r7\n\tld.1\t64, r8\n\tadd\t@CPI0_65[0], r0, r5\n\tst.1\tr8, r5\n\tadd\t4, r8, r5\n\tadd\t128, r0, r6\n\tst.1\tr5, r6\n\tadd\tstack-[10], r0, r5\n\tld.1\tr5, r5\n\tadd\t132, r8, r6\n\tst.1\tr6, r5\n\tadd\tr8, r0, stack-[14]\n\tadd\t164, r8, r6\n\tand\t@CPI0_6[0], r7, stack-[10]\n\tsub!\tr5, r0, r7\n\tadd\tstack-[8], r0, r10\n\tjump.eq\t@.BB0_550\n\tadd\tr0, r0, r7\n.BB0_549:\n\tadd\tr7, r6, r8\n\tadd\tr7, r10, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB0_549\n.BB0_550:\n\tadd\tr5, r6, r6\n\tst.1\tr6, r0\n\tld.1\tr2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\tstack-[14], r0, r7\n\tadd\t36, r7, r6\n\tst.1\tr6, r2\n\tld.1\tr4, r2\n\tadd\t100, r7, r4\n\tadd\tstack-[10], r0, r6\n\tst.1\tr4, r6\n\tadd\t68, r7, r4\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\tr4, r2\n\tcontext.gas_left\tr2\n\tadd\tstack-[6], r0, r4\n\tsub.s!\t4, r4, r4\n\tjump.eq\t@.BB0_552\n\tadd\t31, r5, r1\n\tand\tstack-[13], r1, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t164, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[6], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_652\n.BB0_552:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[14], r0, r8\n\tjump.eq\t@.BB0_555\n\tadd\tr0, r0, r5\n.BB0_554:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_554\n.BB0_555:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_557\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[14], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_557:\n\tadd\t31, r3, r1\n\tand\t@CPI0_66[0], r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tadd\tstack-[14], r0, r1\n\tadd\tr3, r1, r2\n\tnear_call\tr0, @abi_decode_struct_PackedUserOperation_fromMemory, @DEFAULT_UNWIND\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tadd\t@CPI0_5[0], r0, r2\n\tst.2\t4, r2\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\t@CPI0_45[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_67[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[9]\n\tadd\t4, r4, r1\n\tadd\tstack-[10], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[10]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_700\n\tadd\tstack-[10], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[10], r0, r1\n\tst.1\t64, r1\n\tsub.s!\t@CPI0_61[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[10], r0, r2\n\tadd\t64, r2, r1\n\tst.1\t64, r1\n\tadd\t1, r0, r1\n\tst.1\tr2, r1\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_68[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\t288, r1, r2\n\tst.1\t64, r2\n\tadd\t256, r1, r2\n\tadd\tstack-[7], r0, r3\n\tst.1\tr2, r3\n\tadd\t224, r1, r2\n\tst.1\tr2, r3\n\tadd\t96, r1, r2\n\tst.1\tr2, r3\n\tadd\t64, r1, r2\n\tst.1\tr2, r3\n\tadd\t192, r1, r2\n\tst.1\tr2, r0\n\tadd\t160, r1, r2\n\tst.1\tr2, r0\n\tadd\t128, r1, r2\n\tst.1\tr2, r0\n\tadd\t32, r1, r2\n\tst.1\tr2, r0\n\tst.1\tr1, r0\n\tadd\tstack-[9], r0, r2\n\tst.1\tr2, r1\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_567\n\tadd\tstack-[9], r0, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_764\n.BB0_567:\n\tadd\t@CPI0_70[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_48[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_568:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr1, r0, r4\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r3\n\tadd.lt\tr5, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r4, r3\n\tor\tr3, r1, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_571\n\tadd\tr0, r0, r7\n.BB0_570:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_570\n.BB0_571:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_573\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_573:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_620\n.BB0_574:\n\tadd\t31, r4, r2\n\tand\t224, r2, r2\n\tadd\tstack-[14], r2, r2\n\tsub.s!\t@CPI0_43[0], r2, r4\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r2\n\tsub.s!\t64, r3, r4\n\tjump.lt\t@.BB0_279\n\tsub.s!\t@CPI0_61[0], r2, r4\n\tjump.gt\t@.BB0_163\n\tadd\t64, r2, r4\n\tst.1\t64, r4\n\tadd\tstack-[14], r0, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI0_6[0], r4, r5\n\tjump.gt\t@.BB0_279\n\tst.1.inc\tr2, r4, r4\n\tadd\tstack-[10], r0, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI0_6[0], r5, r6\n\tjump.gt\t@.BB0_279\n\tst.1\tr4, r5\n\tadd\tstack-[12], r0, r5\n\tsload\tr5, r6\n\tld.1\t64, r8\n\tadd\t@CPI0_65[0], r0, r5\n\tst.1\tr8, r5\n\tadd\t4, r8, r5\n\tadd\t128, r0, r7\n\tst.1\tr5, r7\n\tadd\tstack-[13], r0, r5\n\tld.1\tr5, r5\n\tadd\t132, r8, r7\n\tst.1\tr7, r5\n\tadd\tr8, r0, stack-[14]\n\tadd\t164, r8, r7\n\tand\t@CPI0_6[0], r6, r6\n\tsub!\tr5, r0, r8\n\tadd\tstack-[9], r0, r11\n\tjump.eq\t@.BB0_582\n\tadd\tr0, r0, r8\n.BB0_581:\n\tadd\tr8, r7, r9\n\tadd\tr8, r11, r10\n\tld.1\tr10, r10\n\tst.1\tr9, r10\n\tadd\t32, r8, r8\n\tsub!\tr8, r5, r9\n\tjump.lt\t@.BB0_581\n.BB0_582:\n\tadd\tr5, r7, r7\n\tst.1\tr7, r0\n\tld.1\tr2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tadd\tstack-[14], r0, r8\n\tadd\t36, r8, r7\n\tst.1\tr7, r2\n\tld.1\tr4, r2\n\tadd\t100, r8, r4\n\tst.1\tr4, r6\n\tadd\t68, r8, r4\n\tand\t@CPI0_6[0], r2, r2\n\tst.1\tr4, r2\n\tcontext.gas_left\tr2\n\tadd\tstack-[8], r0, r4\n\tsub.s!\t4, r4, r4\n\tjump.eq\t@.BB0_584\n\tadd\t31, r5, r1\n\tand\tstack-[11], r1, r1\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tadd\t164, r1, r1\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r4, r1\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_657\n.BB0_584:\n\tand\t31, r3, r2\n\tshr.s!\t5, r3, r4\n\tadd\tstack-[14], r0, r8\n\tjump.eq\t@.BB0_587\n\tadd\tr0, r0, r5\n.BB0_586:\n\tshl.s\t5, r5, r6\n\tadd\tr8, r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_586\n.BB0_587:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_589\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tadd\tstack-[14], r4, r4\n\tshl.s\t3, r2, r2\n\tld.1\tr4, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_589:\n\tadd\t31, r3, r1\n\tand\t@CPI0_66[0], r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tadd\tstack-[14], r0, r1\n\tadd\tr3, r1, r2\n\tnear_call\tr0, @abi_decode_struct_PackedUserOperation_fromMemory, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r2\n\tsload\tr2, r2\n\tld.1\t64, r4\n\tadd\t@CPI0_63[0], r0, r3\n\tadd\tr4, r0, stack-[14]\n\tst.1.inc\tr4, r3, r3\n\tadd\tr3, r0, stack-[13]\n\tadd\tr1, r0, stack-[11]\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_676\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t64, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_682\n.BB0_593:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_594:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_597\n\tadd\tr0, r0, r6\n.BB0_596:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_596\n.BB0_597:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_170\n\tjump\t@.BB0_169\n.BB0_599:\n\tld.1\t64, r2\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r5\n\tjump.eq\t@.BB0_602\n\tadd\tr0, r0, r6\n.BB0_601:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_601\n.BB0_602:\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB0_605\n.BB0_604:\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r3, r3\n\tld.1\tr5, r6\n\tshl\tr6, r3, r6\n\tshr\tr6, r3, r6\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_605:\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r4, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_606:\n\tand\t@CPI0_6[0], r1, r1\n\tadd\t33, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_11[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_96[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\t36, r1, r2\n\tadd\t@CPI0_99[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tadd\tstack-[14], r0, r4\n\tst.1\tr2, r4\n\tadd\t@CPI0_90[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr2, r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr2, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_98[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_630\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_636\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_631\n.BB0_610:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_613\n\tadd\tr0, r0, r6\n.BB0_612:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_612\n.BB0_613:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_615:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_618\n\tadd\tr0, r0, r6\n.BB0_617:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_617\n.BB0_618:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_620:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_623\n\tadd\tr0, r0, r6\n.BB0_622:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_622\n.BB0_623:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_625:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_628\n\tadd\tr0, r0, r6\n.BB0_627:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_627\n.BB0_628:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_630:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_631:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tjump.eq\t@.BB0_634\n\tadd\tr0, r0, r6\n.BB0_633:\n\tshl.s\t5, r6, r7\n\tadd\tr3, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_633\n.BB0_634:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_170\n\tjump\t@.BB0_169\n.BB0_636:\n\tand\t@CPI0_6[0], r1, r1\n\tadd\t34, r0, r2\n\tsload\tr2, r3\n\tand\t@CPI0_11[0], r3, r3\n\tor\tr3, r1, r1\n\tsstore\tr2, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_637:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_640\n\tadd\tr0, r0, r6\n.BB0_639:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_639\n.BB0_640:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_642:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_645\n\tadd\tr0, r0, r6\n.BB0_644:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_644\n.BB0_645:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_647:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_650\n\tadd\tr0, r0, r6\n.BB0_649:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_649\n.BB0_650:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_652:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_655\n\tadd\tr0, r0, r6\n.BB0_654:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_654\n.BB0_655:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_657:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_660\n\tadd\tr0, r0, r6\n.BB0_659:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_659\n.BB0_660:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_662:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_665\n\tadd\tr0, r0, r7\n.BB0_664:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_664\n.BB0_665:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_667\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_667:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_690\n.BB0_668:\n\tadd\t31, r4, r1\n\tand\t224, r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r2\n\tjump.lt\t@.BB0_279\n\tsub.s!\t@CPI0_61[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\tstack-[14], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_279\n\tst.1.inc\tr1, r2, r2\n\tadd\tstack-[13], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.gt\t@.BB0_279\n\tst.1\tr2, r3\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tld.1\t64, r3\n\tadd\t@CPI0_79[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tadd\tstack-[12], r0, r2\n\tst.1\tr1, r2\n\tadd\tr3, r0, stack-[14]\n\tadd\t36, r3, r2\n\tadd\tstack-[11], r0, r1\n\tnear_call\tr0, @abi_encode_struct_PackedUserOperation, @DEFAULT_UNWIND\n\tcontext.gas_left\tr3\n\tadd\tstack-[13], r0, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_730\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_736\n.BB0_676:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_679\n\tadd\tr0, r0, r7\n.BB0_678:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_678\n.BB0_679:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_681\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_681:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_695\n.BB0_682:\n\tadd\t31, r4, r1\n\tand\t224, r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r2\n\tjump.lt\t@.BB0_279\n\tsub.s!\t@CPI0_61[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\tstack-[14], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_279\n\tst.1.inc\tr1, r2, r2\n\tadd\tstack-[13], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.gt\t@.BB0_279\n\tst.1\tr2, r3\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[13]\n\tld.1\t64, r3\n\tadd\t@CPI0_79[0], r0, r1\n\tst.1\tr3, r1\n\tadd\t4, r3, r1\n\tadd\tstack-[12], r0, r2\n\tst.1\tr1, r2\n\tadd\tr3, r0, stack-[14]\n\tadd\t36, r3, r2\n\tadd\tstack-[11], r0, r1\n\tnear_call\tr0, @abi_encode_struct_PackedUserOperation, @DEFAULT_UNWIND\n\tcontext.gas_left\tr3\n\tadd\tstack-[13], r0, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_741\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_747\n.BB0_690:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_693\n\tadd\tr0, r0, r6\n.BB0_692:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_692\n.BB0_693:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_695:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_698\n\tadd\tr0, r0, r6\n.BB0_697:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_697\n.BB0_698:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_700:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_703\n\tadd\tr0, r0, r6\n.BB0_702:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_702\n.BB0_703:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_705:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_708\n\tadd\tr0, r0, r6\n.BB0_707:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_707\n.BB0_708:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_710:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[10], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_48[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[10], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_713\n\tadd\tr0, r0, r7\n.BB0_712:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_712\n.BB0_713:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_715\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[10], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_715:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_725\n.BB0_716:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[10], r1, r1\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_279\n\tadd\tstack-[10], r0, r1\n.BB0_719:\n\tld.1\tr1, r1\n\tnear_call\tr0, @fun_assertEq, @DEFAULT_UNWIND\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_720:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_723\n\tadd\tr0, r0, r6\n.BB0_722:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_722\n.BB0_723:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_725:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_728\n\tadd\tr0, r0, r6\n.BB0_727:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_727\n.BB0_728:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_730:\n\tadd\tstack-[14], r0, r6\n\tsub\tr1, r6, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r6, r5\n\tadd\tr4, r0, r5\n\tadd.lt\tr6, r0, r5\n\tshl.s\t64, r5, r5\n\tsub.s!\t@CPI0_0[0], r1, r6\n\tadd.ge\tr4, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r5, r1\n\tsub.s!\t@CPI0_0[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t192, r3, r3\n\tor\tr1, r3, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_733\n\tadd\tr0, r0, r7\n.BB0_732:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_732\n.BB0_733:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_735\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_735:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_754\n.BB0_736:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[14], r1, r2\n\tsub!\tr2, r1, r1\n\tadd\t0, r0, r1\n\tadd.lt\t1, r0, r1\n\tadd\tr2, r0, stack-[13]\n\tsub.s!\t@CPI0_43[0], r2, r2\n\tjump.gt\t@.BB0_163\n\tand!\t1, r1, r1\n\tjump.ne\t@.BB0_163\n\tadd\tstack-[13], r0, r1\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_279\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[10]\n\tadd\tstack-[6], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_63[0], r0, r1\n\tadd\tstack-[13], r0, r4\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[14]\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_770\n\tsub.s!\t64, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_776\n.BB0_741:\n\tadd\tstack-[14], r0, r6\n\tsub\tr1, r6, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r6, r5\n\tadd\tr4, r0, r5\n\tadd.lt\tr6, r0, r5\n\tshl.s\t64, r5, r5\n\tsub.s!\t@CPI0_0[0], r1, r6\n\tadd.ge\tr4, r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r5, r1\n\tsub.s!\t@CPI0_0[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t192, r3, r3\n\tor\tr1, r3, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_744\n\tadd\tr0, r0, r7\n.BB0_743:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_743\n.BB0_744:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_746\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_746:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_759\n.BB0_747:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r3\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_279\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tadd\t@CPI0_81[0], r0, r2\n\tst.1\t0, r2\n\tst.1\t28, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_82[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r2\n\tld\tr1, r1\n\tadd\tstack-[11], r0, r3\n\tadd\t256, r3, r3\n\tld.1\tr3, r5\n\tld.1.inc\tr5, r3, r4\n\tsub.s!\t65, r3, r6\n\tjump.ne\t@.BB0_787\n\tadd\t64, r5, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_84[0], r3, r6\n\tjump.le\t@.BB0_794\n\tadd\t@CPI0_88[0], r0, r1\n\tjump\t@.BB0_788\n.BB0_754:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_757\n\tadd\tr0, r0, r6\n.BB0_756:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_756\n.BB0_757:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_759:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_762\n\tadd\tr0, r0, r6\n.BB0_761:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_761\n.BB0_762:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_764:\n\tadd\t35, r0, r1\n\tadd\tr1, r0, stack-[8]\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand\t@CPI0_6[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_47[0], r0, r1\n\tst.1.inc\tr4, r1, r1\n\tadd\tr1, r0, stack-[6]\n\tadd\t4, r4, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[7]\n\tshl.s\t192, r2, r1\n\tor\tstack-[7], r1, r1\n\tor\t@CPI0_48[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_802\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r4\n\tst.1\t64, r4\n\tadd\tstack-[5], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_63[0], r0, r1\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tshr.s\t8, r2, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_829\n\tsub.s!\t64, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tjump\t@.BB0_835\n.BB0_770:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[13], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tstack-[13], r0, r10\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_773\n\tadd\tr0, r0, r7\n.BB0_772:\n\tshl.s\t5, r7, r8\n\tadd\tr10, r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_772\n.BB0_773:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_775\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[13], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_775:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_789\n.BB0_776:\n\tadd\t31, r4, r1\n\tand\t224, r1, r1\n\tadd\tstack-[13], r1, r1\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r2\n\tjump.lt\t@.BB0_279\n\tsub.s!\t@CPI0_61[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\tstack-[13], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_279\n\tst.1.inc\tr1, r2, r2\n\tadd\tstack-[14], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.gt\t@.BB0_279\n\tst.1\tr2, r3\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand\t@CPI0_6[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_47[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tr1, r0, stack-[13]\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, stack-[9]\n\tshl.s\t192, r2, r1\n\tor\tstack-[9], r1, r1\n\tor\t@CPI0_48[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_858\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r3\n\tst.1\t64, r3\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tadd\tr1, r0, stack-[12]\n\tadd\t@CPI0_80[0], r0, r1\n\tst.1\tr3, r1\n\tadd\tstack-[8], r0, r1\n\tadd\tstack-[13], r0, r2\n\tst.1\tr2, r1\n\tadd\t100, r3, r2\n\tadd\tstack-[11], r0, r1\n\tnear_call\tr0, @abi_encode_struct_PackedUserOperation, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r4\n\tadd\t68, r4, r2\n\tadd\t@CPI0_45[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t36, r4, r2\n\tadd\tstack-[10], r0, r3\n\tst.1\tr2, r3\n\tcontext.gas_left\tr3\n\tadd\tstack-[12], r0, r2\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.ne\t@.BB0_863\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_869\n.BB0_787:\n\tadd\t@CPI0_83[0], r0, r1\n.BB0_788:\n\tst.1\tr2, r1\n\tadd\t4, r2, r1\n\tst.1\tr1, r3\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_48[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_789:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_792\n\tadd\tr0, r0, r6\n.BB0_791:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_791\n.BB0_792:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_794:\n\tadd\t96, r5, r5\n\tld.1\tr5, r5\n\tld.1\tr4, r4\n\tadd\t96, r2, r6\n\tst.1\tr6, r3\n\tadd\t64, r2, r3\n\tst.1\tr3, r4\n\tshr.s\t248, r5, r3\n\tadd\t32, r2, r4\n\tst.1\tr4, r3\n\tst.1\tr2, r1\n\tst.1\t0, r0\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr3\n\tsub.s!\t@CPI0_0[0], r3, r4\n\tadd.ge\tr1, r0, r3\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t192, r3, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_85[0], r1, r1\n\tadd\t1, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tsub.s!\t32, r4, r3\n\tadd\tr4, r0, r3\n\tadd.ge\t32, r0, r3\n\tand\t31, r3, r6\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_797\n\tadd\tr0, r0, r7\n.BB0_796:\n\tshl.s\t5, r7, r8\n\tptr.add\tr1, r8, r9\n\tld\tr9, r9\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB0_796\n.BB0_797:\n\tsub!\tr6, r0, r7\n\tjump.eq\t@.BB0_799\n\tshl.s\t3, r6, r6\n\tshl.s\t5, r5, r5\n\tld.1\tr5, r7\n\tshl\tr7, r6, r7\n\tshr\tr7, r6, r7\n\tptr.add\tr1, r5, r8\n\tld\tr8, r8\n\tsub\t256, r6, r6\n\tshr\tr8, r6, r8\n\tshl\tr8, r6, r6\n\tor\tr6, r7, r6\n\tst.1\tr5, r6\n.BB0_799:\n\tadd\tr4, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tld.1\t64, r5\n\tadd\tr5, r0, stack-[14]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_807\n\tld.1\t0, r1\n\tand!\t@CPI0_6[0], r1, stack-[13]\n\tjump.ne\t@.BB0_813\n\tadd\t@CPI0_87[0], r0, r1\n\tadd\tstack-[14], r0, r3\n\tst.1\tr3, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r1\n\tor\t@CPI0_64[0], r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_802:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_805\n\tadd\tr0, r0, r6\n.BB0_804:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_804\n.BB0_805:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_807:\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r3\n\tjump.eq\t@.BB0_810\n\tadd\tr0, r0, r5\n.BB0_809:\n\tshl.s\t5, r5, r6\n\tadd\tstack-[14], r6, r7\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tst.1\tr7, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r3, r6\n\tjump.lt\t@.BB0_809\n.BB0_810:\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB0_812\n\tshl.s\t5, r3, r3\n\tptr.add\tr1, r3, r1\n\tadd\tstack-[14], r3, r3\n\tshl.s\t3, r2, r2\n\tld.1\tr3, r5\n\tshl\tr5, r2, r5\n\tshr\tr5, r2, r5\n\tld\tr1, r1\n\tsub\t256, r2, r2\n\tshr\tr1, r2, r1\n\tshl\tr1, r2, r1\n\tor\tr1, r5, r1\n\tst.1\tr3, r1\n.BB0_812:\n\tadd\t@CPI0_0[0], r0, r1\n\tadd\tstack-[14], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\tr1, r0, r3\n\tshl.s\t64, r3, r1\n\tshl.s\t96, r4, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_813:\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r2\n\tadd\t@CPI0_77[0], r0, r1\n\tadd\tstack-[14], r0, r4\n\tst.1\tr4, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r4\n\tjump.eq\t@.BB0_820\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd.lt\tr5, r0, r3\n\tshl.s\t64, r3, r3\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r4\n\tsub.s!\t32, r4, r3\n\tadd\tr4, r0, r3\n\tadd.ge\t32, r0, r3\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_817\n\tadd\tr0, r0, r7\n.BB0_816:\n\tshl.s\t5, r7, r8\n\tadd\tstack-[14], r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_816\n.BB0_817:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_819\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_819:\n\tadd\tr4, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_854\n.BB0_820:\n\tadd\t31, r3, r1\n\tand\t96, r1, r2\n\tadd\tstack-[14], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_43[0], r1, r4\n\tjump.gt\t@.BB0_163\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_279\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tadd\tr1, r0, stack-[14]\n\tsub.s!\t@CPI0_6[0], r1, r1\n\tjump.gt\t@.BB0_279\n\tadd\t@CPI0_7[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI0_5[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\tstack-[14], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_86[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[13], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\tr4, r0, stack-[14]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_42[0], r1, r1\n\tadd\t@CPI0_5[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_872\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r1\n\tst.1\t64, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_829:\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tstack-[7], r1, r1\n\tor\t@CPI0_64[0], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t64, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t64, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_832\n\tadd\tr0, r0, r7\n.BB0_831:\n\tshl.s\t5, r7, r8\n\tadd\tstack-[14], r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_831\n.BB0_832:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_834\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_834:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_849\n.BB0_835:\n\tadd\t31, r4, r1\n\tand\t224, r1, r1\n\tadd\tstack-[14], r1, r1\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t64, r3, r2\n\tjump.lt\t@.BB0_279\n\tsub.s!\t@CPI0_61[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tadd\tstack-[14], r0, r2\n\tld.1\tr2, r2\n\tsub.s!\t@CPI0_6[0], r2, r3\n\tjump.gt\t@.BB0_279\n\tst.1.inc\tr1, r2, r2\n\tadd\tstack-[6], r0, r3\n\tld.1\tr3, r3\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.gt\t@.BB0_279\n\tst.1\tr2, r3\n\tadd\tstack-[8], r0, r2\n\tsload\tr2, r2\n\tadd\tr2, r0, stack-[14]\n\tld.1\tr1, r1\n\tadd\t@CPI0_7[0], r0, r2\n\tst.2\t0, r2\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tr1, r0, stack-[8]\n\tst.2\t4, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_8[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tstack-[14], r0, r3\n\tand\t@CPI0_6[0], r3, r3\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_848\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_279\n\tld.1\t64, r4\n\tadd\t@CPI0_69[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r2\n\tadd\t64, r0, r1\n\tadd\tr2, r0, stack-[7]\n\tst.1\tr2, r1\n\tadd\tstack-[10], r0, r1\n\tld.1\tr1, r1\n\tadd\t68, r4, r2\n\tst.1\tr2, r1\n\tadd\tr4, r0, stack-[14]\n\tadd\t100, r4, r2\n\tshl.s\t5, r1, r4\n\tadd\tr4, r2, r6\n\tsub!\tr1, r0, r4\n\tjump.ne\t@.BB0_882\n.BB0_843:\n\tadd\tstack-[14], r0, r1\n\tadd\t36, r1, r1\n\tst.1\tr1, r3\n\tcontext.gas_left\tr1\n\tadd\tstack-[8], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.eq\t@.BB0_845\n\tadd\tstack-[14], r0, r5\n\tsub\tr6, r5, r2\n\tadd\t@CPI0_0[0], r0, r3\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tshl.s\t64, r4, r4\n\tsub.s!\t@CPI0_0[0], r2, r5\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r4, r2\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr2, r1, r1\n\tadd\tstack-[8], r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, stack[@returndatasize]\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_896\n.BB0_845:\n\tadd\tstack-[14], r0, r1\n\tsub.s!\t@CPI0_43[0], r1, r1\n\tjump.gt\t@.BB0_163\n\tadd\tstack-[14], r0, r4\n\tst.1\t64, r4\n\tadd\tstack-[11], r0, r1\n\tsload\tr1, r2\n\tadd\tstack-[12], r0, r1\n\tsload\tr1, r1\n\tadd\t@CPI0_39[0], r0, r3\n\tst.1\tr4, r3\n\tand\t@CPI0_6[0], r1, r1\n\tadd\tstack-[7], r0, r3\n\tst.1\tr3, r1\n\tcontext.gas_left\tr1\n\tand\t@CPI0_6[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_901\n\tadd\tstack[@returndatasize], r0, r4\n\tsub.s!\t32, r4, r1\n\tadd.ge\t32, r0, r4\n\tjump\t@.BB0_907\n.BB0_848:\n\trevert\n.BB0_849:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_852\n\tadd\tr0, r0, r6\n.BB0_851:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_851\n.BB0_852:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_854:\n\tld.1\t64, r2\n\tand\t31, r4, r3\n\tshr.s!\t5, r4, r5\n\tjump.eq\t@.BB0_857\n\tadd\tr0, r0, r6\n.BB0_856:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_856\n.BB0_857:\n\tsub!\tr3, r0, r6\n\tjump.ne\t@.BB0_604\n\tjump\t@.BB0_605\n.BB0_858:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_861\n\tadd\tr0, r0, r6\n.BB0_860:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_860\n.BB0_861:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_863:\n\tsub.s\tstack-[14], r1, r1\n\tadd\t@CPI0_0[0], r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr4, r0, r1\n\tsub.s!\t@CPI0_0[0], r3, r5\n\tadd.ge\tr4, r0, r3\n\tshl.s\t192, r3, r3\n\tshl.s\t96, r1, r1\n\tor\tr3, r1, r1\n\tor\tstack-[9], r1, r1\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_866\n\tadd\tr0, r0, r7\n.BB0_865:\n\tshl.s\t5, r7, r8\n\tadd\tstack-[14], r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_865\n.BB0_866:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_868\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_868:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_877\n.BB0_869:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[14], r1, r1\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r1\n\tjump.lt\t@.BB0_279\n\tadd\tstack-[14], r0, r1\n\tld.1\tr1, r1\n\tnear_call\tr0, @fun_assertEq_21466, @DEFAULT_UNWIND\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_872:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_875\n\tadd\tr0, r0, r6\n.BB0_874:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_874\n.BB0_875:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_877:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_880\n\tadd\tr0, r0, r6\n.BB0_879:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_879\n.BB0_880:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_882:\n\tadd\t288, r0, r4\n\tadd\tr0, r0, r5\n\tjump\t@.BB0_884\n.BB0_883:\n\tadd\t31, r7, r8\n\tand\tstack-[13], r8, r8\n\tadd\tr7, r6, r7\n\tst.1\tr7, r0\n\tadd\tr8, r6, r6\n\tadd\t1, r5, r5\n\tsub!\tr5, r1, r7\n\tjump.ge\t@.BB0_843\n.BB0_884:\n\tsub.s\tstack-[14], r6, r7\n\tsub.s\t100, r7, r7\n\tst.1.inc\tr2, r7, r2\n\tadd\tstack-[9], r0, r8\n\tld.1.inc\tr8, r7, r8\n\tadd\tr8, r0, stack-[9]\n\tld.1.inc\tr7, r8, r9\n\tand\t@CPI0_6[0], r8, r8\n\tst.1.inc\tr6, r8, r8\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t64, r7, r8\n\tld.1\tr8, r8\n\tadd\t64, r6, r9\n\tst.1\tr9, r4\n\tadd\t288, r6, r9\n\tld.1.inc\tr8, r8, r10\n\tst.1\tr9, r8\n\tadd\t320, r6, r9\n\tsub!\tr8, r0, r11\n\tjump.eq\t@.BB0_887\n\tadd\tr0, r0, r11\n.BB0_886:\n\tadd\tr11, r9, r12\n\tadd\tr10, r11, r13\n\tld.1\tr13, r13\n\tst.1\tr12, r13\n\tadd\t32, r11, r11\n\tsub!\tr11, r8, r12\n\tjump.lt\t@.BB0_886\n.BB0_887:\n\tadd\tr8, r9, r10\n\tst.1\tr10, r0\n\tadd\t31, r8, r8\n\tand\tstack-[13], r8, r8\n\tadd\tr8, r9, r8\n\tadd\t96, r7, r9\n\tld.1\tr9, r9\n\tsub\tr8, r6, r10\n\tadd\t96, r6, r11\n\tst.1\tr11, r10\n\tld.1.inc\tr9, r9, r10\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr9, r0, r11\n\tjump.eq\t@.BB0_890\n\tadd\tr0, r0, r11\n.BB0_889:\n\tadd\tr11, r8, r12\n\tadd\tr10, r11, r13\n\tld.1\tr13, r13\n\tst.1\tr12, r13\n\tadd\t32, r11, r11\n\tsub!\tr11, r9, r12\n\tjump.lt\t@.BB0_889\n.BB0_890:\n\tadd\tr9, r8, r10\n\tst.1\tr10, r0\n\tadd\t128, r7, r10\n\tld.1\tr10, r10\n\tadd\t128, r6, r11\n\tst.1\tr11, r10\n\tadd\t160, r7, r10\n\tld.1\tr10, r10\n\tadd\t160, r6, r11\n\tst.1\tr11, r10\n\tadd\t192, r7, r10\n\tld.1\tr10, r10\n\tadd\t192, r6, r11\n\tst.1\tr11, r10\n\tadd\t31, r9, r9\n\tand\tstack-[13], r9, r9\n\tadd\tr9, r8, r8\n\tsub\tr8, r6, r9\n\tadd\t224, r6, r10\n\tadd\t224, r7, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r9\n\tld.1.inc\tr11, r9, r10\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr9, r0, r11\n\tjump.eq\t@.BB0_893\n\tadd\tr0, r0, r11\n.BB0_892:\n\tadd\tr11, r8, r12\n\tadd\tr10, r11, r13\n\tld.1\tr13, r13\n\tst.1\tr12, r13\n\tadd\t32, r11, r11\n\tsub!\tr11, r9, r12\n\tjump.lt\t@.BB0_892\n.BB0_893:\n\tadd\tr9, r8, r10\n\tst.1\tr10, r0\n\tadd\t31, r9, r9\n\tand\tstack-[13], r9, r9\n\tadd\tr9, r8, r9\n\tadd\t256, r7, r7\n\tld.1\tr7, r7\n\tsub\tr9, r6, r8\n\tadd\t256, r6, r6\n\tst.1\tr6, r8\n\tld.1.inc\tr7, r7, r8\n\tst.1.inc\tr9, r7, r6\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB0_883\n\tadd\tr0, r0, r9\n.BB0_895:\n\tadd\tr9, r6, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB0_895\n\tjump\t@.BB0_883\n.BB0_896:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_899\n\tadd\tr0, r0, r6\n.BB0_898:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_898\n.BB0_899:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.BB0_901:\n\tadd\t@CPI0_0[0], r0, r3\n\tadd\tstack-[14], r0, r5\n\tsub.s!\t@CPI0_0[0], r5, r4\n\tadd\tr3, r0, r4\n\tadd.lt\tr5, r0, r4\n\tsub.s!\t@CPI0_0[0], r1, r5\n\tadd.ge\tr3, r0, r1\n\tshl.s\t192, r1, r1\n\tshl.s\t64, r4, r3\n\tor\tr3, r1, r1\n\tor\t@CPI0_48[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\tr3, r0, r4\n\tadd.ge\t32, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_904\n\tadd\tr0, r0, r7\n.BB0_903:\n\tshl.s\t5, r7, r8\n\tadd\tstack-[14], r8, r9\n\tptr.add\tr1, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_903\n.BB0_904:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_906\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[14], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_906:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_910\n.BB0_907:\n\tadd\t31, r4, r1\n\tand\t96, r1, r1\n\tadd\tstack-[14], r1, r1\n\tsub.s!\t@CPI0_43[0], r1, r2\n\tjump.gt\t@.BB0_163\n\tst.1\t64, r1\n\tsub.s!\t32, r4, r1\n\tjump.lt\t@.BB0_279\n\tadd\tstack-[14], r0, r1\n\tjump\t@.BB0_719\n.BB0_910:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_913\n\tadd\tr0, r0, r6\n.BB0_912:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB0_912\n.BB0_913:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_44\n\tjump\t@.BB0_43\n.func_end0:\n\nabi_encode_array_address_dyn:\n.func_begin1:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r4\n\tld.1\tr2, r3\n\tst.1\tr4, r3\n\tadd\t64, r1, r1\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB1_3\n\tadd\tr0, r0, r4\n.BB1_2:\n\tadd\t32, r2, r2\n\tld.1\tr2, r5\n\tand\t@CPI1_0[0], r5, r5\n\tst.1.inc\tr1, r5, r1\n\tadd\t1, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB1_2\n.BB1_3:\n\tret\n.func_end1:\n\nabi_encode_array_string_dyn:\n.func_begin2:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tld.1\tr2, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r5\n\tshl.s\t5, r4, r3\n\tadd\tr5, r3, r3\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB2_6\n\tadd\tr0, r0, r6\n\tjump\t@.BB2_2\n.BB2_5:\n\tadd\t31, r7, r8\n\tsub.s\t32, r0, r9\n\tand\tr8, r9, r8\n\tadd\tr7, r3, r7\n\tst.1\tr7, r0\n\tadd\tr8, r3, r3\n\tadd\t1, r6, r6\n\tsub!\tr6, r4, r7\n\tjump.ge\t@.BB2_6\n.BB2_2:\n\tsub\tr3, r1, r7\n\tsub.s\t64, r7, r7\n\tst.1.inc\tr5, r7, r5\n\tadd\t32, r2, r2\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r7, r8\n\tst.1.inc\tr3, r7, r3\n\tsub!\tr7, r0, r9\n\tjump.eq\t@.BB2_5\n\tadd\tr0, r0, r9\n.BB2_4:\n\tadd\tr9, r3, r10\n\tadd\tr8, r9, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r7, r10\n\tjump.lt\t@.BB2_4\n\tjump\t@.BB2_5\n.BB2_6:\n\tadd\tr3, r0, r1\n\tret\n.func_end2:\n\nabi_encode_array_struct_FuzzSelector_dyn:\n.func_begin3:\n\tadd\t32, r0, r3\n\tst.1.inc\tr1, r3, r3\n\tld.1\tr2, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r5\n\tshl.s\t5, r4, r3\n\tadd\tr5, r3, r3\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB3_6\n\tadd\t64, r0, r6\n\tadd\tr0, r0, r7\n\tjump\t@.BB3_2\n.BB3_5:\n\tadd\t1, r7, r7\n\tsub!\tr7, r4, r8\n\tjump.ge\t@.BB3_6\n.BB3_2:\n\tsub\tr3, r1, r8\n\tsub.s\t64, r8, r8\n\tst.1.inc\tr5, r8, r5\n\tadd\t32, r2, r2\n\tld.1\tr2, r8\n\tld.1.inc\tr8, r8, r9\n\tand\t@CPI3_0[0], r8, r8\n\tst.1.inc\tr3, r8, r10\n\tld.1\tr9, r8\n\tst.1\tr10, r6\n\tadd\t64, r3, r10\n\tld.1\tr8, r9\n\tst.1\tr10, r9\n\tadd\t96, r3, r3\n\tsub!\tr9, r0, r10\n\tjump.eq\t@.BB3_5\n\tadd\tr0, r0, r10\n.BB3_4:\n\tadd\t32, r8, r8\n\tld.1\tr8, r11\n\tand\t@CPI3_1[0], r11, r11\n\tst.1.inc\tr3, r11, r3\n\tadd\t1, r10, r10\n\tsub!\tr10, r9, r11\n\tjump.lt\t@.BB3_4\n\tjump\t@.BB3_5\n.BB3_6:\n\tadd\tr3, r0, r1\n\tret\n.func_end3:\n\nfinalize_allocation:\n.func_begin4:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI4_0[0], r1, r3\n\tjump.gt\t@.BB4_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB4_2\n\tst.1\t64, r1\n\tret\n.BB4_2:\n\tadd\t@CPI4_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI4_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\nabi_decode_struct_PackedUserOperation_fromMemory:\n.func_begin5:\n\tsub\tr2, r1, r3\n\tadd\t@CPI5_0[0], r0, r4\n\tsub.s!\t31, r3, r5\n\tadd\tr0, r0, r5\n\tadd.gt\tr4, r0, r5\n\tand\t@CPI5_0[0], r3, r3\n\tsub!\tr3, r0, r6\n\tadd.ge\tr0, r0, r4\n\tsub.s!\t@CPI5_0[0], r3, r3\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r3\n\tjump.eq\t@.BB5_1\n\tld.1\tr1, r3\n\tsub.s!\t@CPI5_1[0], r3, r4\n\tjump.gt\t@.BB5_1\n\tadd\tr3, r1, r3\n\tsub\tr2, r3, r1\n\tadd\t@CPI5_0[0], r0, r4\n\tsub.s!\t288, r1, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI5_0[0], r1, r1\n\tsub!\tr1, r0, r6\n\tadd.le\tr0, r0, r4\n\tsub.s!\t@CPI5_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB5_1\n\tld.1\t64, r1\n\tsub.s!\t@CPI5_2[0], r1, r4\n\tjump.ge\t@.BB5_5\n\tadd\t288, r1, r4\n\tst.1\t64, r4\n\tld.1.inc\tr3, r5, r4\n\tsub.s!\t@CPI5_3[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tst.1.inc\tr1, r5, r5\n\tld.1\tr4, r4\n\tst.1\tr5, r4\n\tadd\t64, r3, r4\n\tld.1\tr4, r4\n\tsub.s!\t@CPI5_1[0], r4, r5\n\tjump.gt\t@.BB5_1\n\tadd\tr4, r3, r4\n\tadd\t31, r4, r5\n\tadd\t@CPI5_0[0], r0, r6\n\tsub!\tr5, r2, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI5_0[0], r5, r5\n\tand\t@CPI5_0[0], r2, r8\n\tsub!\tr5, r8, r9\n\tadd.ge\tr0, r0, r6\n\txor\tr5, r8, r5\n\tsub.s!\t@CPI5_0[0], r5, r5\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r5\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr4, r5, r6\n\tsub.s!\t@CPI5_1[0], r5, r4\n\tjump.gt\t@.BB5_5\n\tadd\t31, r5, r7\n\tsub.s\t32, r0, r4\n\tand\tr7, r4, r7\n\tadd\t63, r7, r7\n\tand\tr7, r4, r8\n\tld.1\t64, r7\n\tadd\tr7, r8, r8\n\tsub!\tr8, r7, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI5_1[0], r8, r10\n\tjump.gt\t@.BB5_5\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r8\n\tst.1.inc\tr7, r5, r8\n\tadd\tr5, r6, r9\n\tsub!\tr9, r2, r9\n\tjump.gt\t@.BB5_1\n\tsub!\tr5, r0, r9\n\tjump.eq\t@.BB5_16\n\tadd\tr0, r0, r9\n.BB5_15:\n\tadd\tr9, r8, r10\n\tadd\tr9, r6, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r5, r10\n\tjump.lt\t@.BB5_15\n.BB5_16:\n\tadd\tr8, r5, r5\n\tst.1\tr5, r0\n\tadd\t64, r1, r5\n\tst.1\tr5, r7\n\tadd\t96, r3, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI5_1[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tadd\tr5, r3, r5\n\tadd\t31, r5, r6\n\tadd\t@CPI5_0[0], r0, r7\n\tsub!\tr6, r2, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI5_0[0], r6, r6\n\tand\t@CPI5_0[0], r2, r9\n\tsub!\tr6, r9, r10\n\tadd.ge\tr0, r0, r7\n\txor\tr6, r9, r6\n\tsub.s!\t@CPI5_0[0], r6, r6\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r6\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr5, r5, r6\n\tsub.s!\t@CPI5_1[0], r5, r7\n\tjump.gt\t@.BB5_5\n\tadd\t31, r5, r7\n\tand\tr7, r4, r7\n\tadd\t63, r7, r7\n\tand\tr7, r4, r8\n\tld.1\t64, r7\n\tadd\tr7, r8, r8\n\tsub!\tr8, r7, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI5_1[0], r8, r10\n\tjump.gt\t@.BB5_5\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r8\n\tst.1.inc\tr7, r5, r8\n\tadd\tr5, r6, r9\n\tsub!\tr9, r2, r9\n\tjump.gt\t@.BB5_1\n\tsub!\tr5, r0, r9\n\tjump.eq\t@.BB5_25\n\tadd\tr0, r0, r9\n.BB5_24:\n\tadd\tr9, r8, r10\n\tadd\tr9, r6, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r5, r10\n\tjump.lt\t@.BB5_24\n.BB5_25:\n\tadd\tr8, r5, r5\n\tst.1\tr5, r0\n\tadd\t96, r1, r5\n\tst.1\tr5, r7\n\tadd\t128, r3, r5\n\tld.1\tr5, r5\n\tadd\t128, r1, r6\n\tst.1\tr6, r5\n\tadd\t160, r3, r5\n\tld.1\tr5, r5\n\tadd\t160, r1, r6\n\tst.1\tr6, r5\n\tadd\t192, r1, r5\n\tadd\t192, r3, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t224, r3, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI5_1[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tadd\tr5, r3, r5\n\tadd\t31, r5, r6\n\tadd\t@CPI5_0[0], r0, r7\n\tsub!\tr6, r2, r8\n\tadd\tr0, r0, r8\n\tadd.ge\tr7, r0, r8\n\tand\t@CPI5_0[0], r6, r6\n\tand\t@CPI5_0[0], r2, r9\n\tsub!\tr6, r9, r10\n\tadd.ge\tr0, r0, r7\n\txor\tr6, r9, r6\n\tsub.s!\t@CPI5_0[0], r6, r6\n\tadd.ne\tr8, r0, r7\n\tsub!\tr7, r0, r6\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr5, r5, r6\n\tsub.s!\t@CPI5_1[0], r5, r7\n\tjump.gt\t@.BB5_5\n\tadd\t31, r5, r7\n\tand\tr7, r4, r7\n\tadd\t63, r7, r7\n\tand\tr7, r4, r8\n\tld.1\t64, r7\n\tadd\tr7, r8, r8\n\tsub!\tr8, r7, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI5_1[0], r8, r10\n\tjump.gt\t@.BB5_5\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r8\n\tst.1.inc\tr7, r5, r8\n\tadd\tr5, r6, r9\n\tsub!\tr9, r2, r9\n\tjump.gt\t@.BB5_1\n\tsub!\tr5, r0, r9\n\tjump.eq\t@.BB5_34\n\tadd\tr0, r0, r9\n.BB5_33:\n\tadd\tr9, r8, r10\n\tadd\tr9, r6, r11\n\tld.1\tr11, r11\n\tst.1\tr10, r11\n\tadd\t32, r9, r9\n\tsub!\tr9, r5, r10\n\tjump.lt\t@.BB5_33\n.BB5_34:\n\tadd\tr8, r5, r5\n\tst.1\tr5, r0\n\tadd\t224, r1, r5\n\tst.1\tr5, r7\n\tadd\t256, r3, r5\n\tld.1\tr5, r5\n\tsub.s!\t@CPI5_1[0], r5, r6\n\tjump.gt\t@.BB5_1\n\tadd\tr5, r3, r3\n\tadd\t31, r3, r5\n\tadd\t@CPI5_0[0], r0, r6\n\tsub!\tr5, r2, r7\n\tadd\tr0, r0, r7\n\tadd.ge\tr6, r0, r7\n\tand\t@CPI5_0[0], r5, r5\n\tand\t@CPI5_0[0], r2, r8\n\tsub!\tr5, r8, r9\n\tadd.ge\tr0, r0, r6\n\txor\tr5, r8, r5\n\tsub.s!\t@CPI5_0[0], r5, r5\n\tadd.ne\tr7, r0, r6\n\tsub!\tr6, r0, r5\n\tjump.ne\t@.BB5_1\n\tld.1.inc\tr3, r3, r5\n\tsub.s!\t@CPI5_1[0], r3, r6\n\tjump.gt\t@.BB5_5\n\tadd\t31, r3, r6\n\tand\tr6, r4, r6\n\tadd\t63, r6, r6\n\tand\tr6, r4, r6\n\tld.1\t64, r4\n\tadd\tr4, r6, r6\n\tsub!\tr6, r4, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI5_1[0], r6, r8\n\tjump.gt\t@.BB5_5\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB5_5\n\tst.1\t64, r6\n\tst.1.inc\tr4, r3, r6\n\tadd\tr3, r5, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB5_1\n\tsub!\tr3, r0, r2\n\tjump.eq\t@.BB5_43\n\tadd\tr0, r0, r2\n.BB5_42:\n\tadd\tr2, r6, r7\n\tadd\tr2, r5, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r2, r2\n\tsub!\tr2, r3, r7\n\tjump.lt\t@.BB5_42\n.BB5_43:\n\tadd\tr6, r3, r2\n\tst.1\tr2, r0\n\tadd\t256, r1, r2\n\tst.1\tr2, r4\n\tret\n.BB5_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB5_5:\n\tadd\t@CPI5_4[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI5_5[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end5:\n\nabi_encode_struct_PackedUserOperation:\n.func_begin6:\n\tld.1.inc\tr1, r3, r4\n\tand\t@CPI6_0[0], r3, r3\n\tst.1.inc\tr2, r3, r3\n\tld.1\tr4, r4\n\tst.1\tr3, r4\n\tadd\t64, r1, r3\n\tld.1\tr3, r3\n\tadd\t64, r2, r4\n\tadd\t288, r0, r5\n\tst.1\tr4, r5\n\tadd\t288, r2, r4\n\tld.1.inc\tr3, r3, r5\n\tst.1\tr4, r3\n\tadd\t320, r2, r4\n\tsub!\tr3, r0, r6\n\tjump.eq\t@.BB6_3\n\tadd\tr0, r0, r6\n.BB6_2:\n\tadd\tr6, r4, r7\n\tadd\tr5, r6, r8\n\tld.1\tr8, r8\n\tst.1\tr7, r8\n\tadd\t32, r6, r6\n\tsub!\tr6, r3, r7\n\tjump.lt\t@.BB6_2\n.BB6_3:\n\tadd\tr3, r4, r5\n\tst.1\tr5, r0\n\tadd\t31, r3, r5\n\tsub.s\t32, r0, r3\n\tand\tr5, r3, r5\n\tadd\tr5, r4, r4\n\tadd\t96, r1, r5\n\tld.1\tr5, r5\n\tsub\tr4, r2, r6\n\tadd\t96, r2, r7\n\tst.1\tr7, r6\n\tld.1.inc\tr5, r5, r6\n\tst.1.inc\tr4, r5, r4\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB6_6\n\tadd\tr0, r0, r7\n.BB6_5:\n\tadd\tr7, r4, r8\n\tadd\tr6, r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB6_5\n.BB6_6:\n\tadd\tr5, r4, r6\n\tst.1\tr6, r0\n\tadd\t128, r1, r6\n\tld.1\tr6, r6\n\tadd\t128, r2, r7\n\tst.1\tr7, r6\n\tadd\t160, r1, r6\n\tld.1\tr6, r6\n\tadd\t160, r2, r7\n\tst.1\tr7, r6\n\tadd\t192, r1, r6\n\tld.1\tr6, r6\n\tadd\t192, r2, r7\n\tst.1\tr7, r6\n\tadd\t31, r5, r5\n\tand\tr5, r3, r5\n\tadd\tr5, r4, r4\n\tsub\tr4, r2, r5\n\tadd\t224, r2, r6\n\tadd\t224, r1, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r5\n\tld.1.inc\tr7, r5, r6\n\tst.1.inc\tr4, r5, r4\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB6_9\n\tadd\tr0, r0, r7\n.BB6_8:\n\tadd\tr7, r4, r8\n\tadd\tr6, r7, r9\n\tld.1\tr9, r9\n\tst.1\tr8, r9\n\tadd\t32, r7, r7\n\tsub!\tr7, r5, r8\n\tjump.lt\t@.BB6_8\n.BB6_9:\n\tadd\tr5, r4, r6\n\tst.1\tr6, r0\n\tadd\t31, r5, r5\n\tand\tr5, r3, r5\n\tadd\tr5, r4, r5\n\tadd\t256, r1, r1\n\tld.1\tr1, r1\n\tsub\tr5, r2, r4\n\tadd\t256, r2, r2\n\tst.1\tr2, r4\n\tld.1.inc\tr1, r2, r4\n\tst.1.inc\tr5, r2, r1\n\tsub!\tr2, r0, r5\n\tjump.eq\t@.BB6_12\n\tadd\tr0, r0, r5\n.BB6_11:\n\tadd\tr5, r1, r6\n\tadd\tr4, r5, r7\n\tld.1\tr7, r7\n\tst.1\tr6, r7\n\tadd\t32, r5, r5\n\tsub!\tr5, r2, r6\n\tjump.lt\t@.BB6_11\n.BB6_12:\n\tadd\tr2, r1, r4\n\tst.1\tr4, r0\n\tadd\t31, r2, r2\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tret\n.func_end6:\n\nfun_assertEq_21466:\n.func_begin7:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI7_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI7_1[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI7_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_2[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI7_3[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_1\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB7_3\n\tld.1\t64, r4\n\tadd\t@CPI7_4[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[1], r0, r2\n\tst.1\tr1, r2\n\tadd\t36, r4, r1\n\tst.1\tr1, r0\n\tadd\t@CPI7_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI7_2[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI7_2[0], r4, r3\n\tadd\tr4, r0, stack-[1]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI7_5[0], r1, r1\n\tadd\t@CPI7_1[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI7_2[0], r3, stack[@returndatasize]\n\tand\t@CPI7_2[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB7_5\n\tadd\tstack-[1], r0, r2\n\tsub.s!\t@CPI7_6[0], r2, r1\n\tjump.ge\t@.BB7_11\n\tst.1\t64, r2\n\tret\n.BB7_1:\n\trevert\n.BB7_3:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_5:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB7_13\n\tadd\tr0, r0, r6\n.BB7_7:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB7_7\n.BB7_13:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB7_9\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB7_9:\n\tadd\t@CPI7_2[0], r0, r1\n\tsub.s!\t@CPI7_2[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB7_11:\n\tadd\t@CPI7_7[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI7_8[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end7:\n\nfun_assertEq:\n.func_begin8:\n\tnop\tstack+=[1]\n\tadd\tr1, r0, stack-[1]\n\tadd\t@CPI8_0[0], r0, r1\n\tst.2\t0, r1\n\tadd\t@CPI8_1[0], r0, r1\n\tst.2\t4, r1\n\tadd\t@CPI8_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI8_2[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI8_3[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB8_1\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB8_3\n\tld.1\t64, r4\n\tadd\t36, r4, r1\n\tadd\t@CPI8_4[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI8_5[0], r0, r1\n\tst.1\tr4, r1\n\tadd\t4, r4, r1\n\tadd\tstack-[1], r0, r2\n\tst.1\tr1, r2\n\tadd\t@CPI8_2[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI8_2[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tsub.s!\t@CPI8_2[0], r4, r3\n\tadd\tr4, r0, stack-[1]\n\tadd.lt\tr4, r0, r1\n\tshl.s\t64, r1, r1\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI8_6[0], r1, r1\n\tadd\t@CPI8_1[0], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI8_2[0], r3, stack[@returndatasize]\n\tand\t@CPI8_2[0], r3, r3\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB8_5\n\tadd\tstack-[1], r0, r2\n\tsub.s!\t@CPI8_7[0], r2, r1\n\tjump.ge\t@.BB8_11\n\tst.1\t64, r2\n\tret\n.BB8_1:\n\trevert\n.BB8_3:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB8_5:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB8_13\n\tadd\tr0, r0, r6\n.BB8_7:\n\tshl.s\t5, r6, r7\n\tadd\tr2, r7, r8\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\tr8, r7\n\tadd\t1, r6, r6\n\tsub!\tr6, r5, r7\n\tjump.lt\t@.BB8_7\n.BB8_13:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB8_9\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB8_9:\n\tadd\t@CPI8_2[0], r0, r1\n\tsub.s!\t@CPI8_2[0], r2, r4\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tshl.s\t96, r3, r2\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB8_11:\n\tadd\t@CPI8_8[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI8_9[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end8:\n\n__cxa_throw:\n.func_begin9:\n\trevert\n.func_end9:\n\n__farcall:\n.func_begin10:\n.tmp0:\n\tfar_call\tr1, r2, @.BB10_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB10_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end10:\n\n__staticcall:\n.func_begin11:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB11_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB11_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end11:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell 0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI7_2:\nCPI8_2:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 51735810803603326920093875405627034980936023444920712683823047157028839489536\nCPI0_2:\n\t.cell 904625697166532776746648320380374280103671755992598535832976423508200390656\nCPI0_3:\n\t.cell -166923669067369873766191994592930785159943346089370123761369690313261580288\nCPI0_4:\n\t.cell 2852213855235882636237227425792\nCPI0_5:\nCPI7_1:\nCPI8_1:\n\t.cell 645326474426547203313410069153905908525362434349\nCPI0_6:\nCPI1_0:\nCPI3_0:\nCPI5_3:\nCPI6_0:\n\t.cell 1461501637330902918203684832716283019655932542975\nCPI0_7:\nCPI7_0:\nCPI8_0:\n\t.cell 10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_8:\nCPI7_3:\nCPI8_3:\n\t.cell 904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_9:\n\t.cell -26079055428631999755169999820041264995593315863804083392934812248473178472448\nCPI0_10:\nCPI7_6:\nCPI8_7:\n\t.cell 18446744073709551616\nCPI0_11:\n\t.cell -1461501637330902918203684832716283019655932542976\nCPI0_12:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_13:\n\t.cell 2233625728\nCPI0_14:\n\t.cell 3041954472\nCPI0_15:\n\t.cell 3792478064\nCPI0_16:\n\t.cell 3792478065\nCPI0_17:\n\t.cell 4055103995\nCPI0_18:\n\t.cell 4202047188\nCPI0_19:\n\t.cell 3041954473\nCPI0_20:\n\t.cell 3124842406\nCPI0_21:\n\t.cell 2448165409\nCPI0_22:\n\t.cell 2448165410\nCPI0_23:\n\t.cell 2957397980\nCPI0_24:\n\t.cell 2233625729\nCPI0_25:\n\t.cell 2439649222\nCPI0_26:\n\t.cell 534123561\nCPI0_27:\n\t.cell 1046363170\nCPI0_28:\n\t.cell 1046363171\nCPI0_29:\n\t.cell 1064470260\nCPI0_30:\n\t.cell 1725540768\nCPI0_31:\n\t.cell 534123562\nCPI0_32:\n\t.cell 719206528\nCPI0_33:\n\t.cell 335028619\nCPI0_34:\n\t.cell 335028620\nCPI0_35:\n\t.cell 517440284\nCPI0_36:\n\t.cell 177362148\nCPI0_37:\n\t.cell 327102042\nCPI0_38:\n\t.cell 2535301202817642044428229017600\nCPI0_39:\n\t.cell 50942633119752846454219349998365661925608737367104304655302372697894809501696\nCPI0_40:\n\t.cell 2852213852874699394802404818944\nCPI0_41:\nCPI7_4:\nCPI8_5:\n\t.cell -46967347869762817211770011756586609677844163125355452868590611683642280247296\nCPI0_42:\nCPI7_5:\nCPI8_6:\n\t.cell 5387515050969974956360988622848\nCPI0_43:\nCPI4_0:\nCPI5_1:\n\t.cell 18446744073709551615\nCPI0_44:\n\t.cell 29289127993025145568725129057828671567744754166070328588094505464281371246592\nCPI0_45:\nCPI8_4:\n\t.cell 1000000000000000000\nCPI0_46:\n\t.cell 18446744073709551487\nCPI0_47:\n\t.cell -24243573542908756656742960469620706294859471809197549687606805108482832859136\nCPI0_48:\nCPI4_2:\nCPI5_5:\nCPI7_8:\nCPI8_9:\n\t.cell 2852213850513516153367582212096\nCPI0_49:\n\t.cell -27536857605250809579915372324135987738810261726803944444161409881874687328256\nCPI0_50:\n\t.cell 36585680516800130076674952755767652720215973367664673231270495149701979963392\nCPI0_51:\n\t.cell -33419636430028734643022972782987963516055066601414890002813699607517053583360\nCPI0_52:\n\t.cell 38878206584692966203415385907871375197469080758325516314230789535345649042549\nCPI0_53:\n\t.cell 46361386726410499263322427381369506175992020241588171917386103515624534704128\nCPI0_54:\n\t.cell 46308022326495007027972728677917914892729792999299745830475596687180801507328\nCPI0_55:\n\t.cell 5387515053331158197795811229696\nCPI0_56:\n\t.cell 2535301200456458802993406410752\nCPI0_57:\n\t.cell 57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_58:\n\t.cell -48719757687822547800745197551118351534541568878739321821808546113428889233771\nCPI0_59:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_60:\n\t.cell 6454973039698199198119942482240540643982028891330163610098731264865829167633\nCPI0_61:\n\t.cell 18446744073709551551\nCPI0_62:\nCPI3_1:\n\t.cell -26959946667150639794667015087019630673637144422540572481103610249216\nCPI0_63:\n\t.cell -27151071013223617441696809311706469891330170172232269417374360038580301070336\nCPI0_64:\n\t.cell 316912650057057350374175801344\nCPI0_65:\n\t.cell -40549838776721852905616316643078944964950032066256020805286137638621622042624\nCPI0_66:\n\t.cell 8589934560\nCPI0_67:\n\t.cell -25085042922932715679007901429792258562186342537147911894151979128382061281280\nCPI0_68:\n\t.cell 18446744073709551327\nCPI0_69:\n\t.cell 53539900407852911456456701308484928931406331239208729481905787339876560011264\nCPI0_70:\nCPI4_1:\nCPI5_4:\nCPI7_7:\nCPI8_8:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_71:\n\t.cell 49422300655976383518971161772042036479724517635858811238160587340303074464591\nCPI0_72:\n\t.cell 2481041784956016742021570618494952475758789857281704946240779902470294861374\nCPI0_73:\n\t.cell 26616959624788145501257665028759500958019551560565664426117466910078421933505\nCPI0_74:\n\t.cell -26169279673760072341673943167871893214131042372482409454972450661548556448747\nCPI0_75:\n\t.cell -35624623585156310935986566609950774337791491079595188565361216048441042957010\nCPI0_76:\n\t.cell 36516136433507714556481507284757523525550975291680945358964353894568634540880\nCPI0_77:\n\t.cell -51723044313523656053393963764110524395896352204932251959347227769995480006656\nCPI0_78:\n\t.cell -18002263324862296164297574372220909754226456243825434961346737007256845270391\nCPI0_79:\n\t.cell 15742374736755560200867032344613233170649429379879687236804144291568011968512\nCPI0_80:\n\t.cell 11537839058114535555356276652086655718983938579725392199733168789926996606976\nCPI0_81:\n\t.cell 11430537079145650693387304458692941425836787954612963690241153482819318579200\nCPI0_82:\n\t.cell 904625697166532776746648320380374280103671759954006657414122630674458345472\nCPI0_83:\n\t.cell -1401820844882498205785418849946084699849473257180799186470767787552591052800\nCPI0_84:\n\t.cell 57896044618658097711785492504343953926418782139537452191302581570759080747168\nCPI0_85:\n\t.cell 10141204801825835211973625643008\nCPI0_86:\n\t.cell 36784665143163702161339441327371172859310420721361339561610400621048880955392\nCPI0_87:\n\t.cell -4399567410664312436217910391711023685490938802098584046133129080549566054400\nCPI0_88:\n\t.cell -18297812966642927639546323119482596956946477707846785379148242173554237374464\nCPI0_89:\n\t.cell 452317310052294312483529839778365808057723633747297353442400039370517611711\nCPI0_90:\n\t.cell -45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_91:\n\t.cell 904625697166532776746648320380374280103671765658434360802338178844445376512\nCPI0_92:\n\t.cell 56754858411141558304599661950743269417851770002052927676745353822001623465984\nCPI0_93:\n\t.cell 1461501637330902918203684832716283019655932542976\nCPI0_94:\n\t.cell 374144419156711147060143317175368453031918731001600\nCPI0_95:\n\t.cell -374144419156711147060143317175368453031918731001601\nCPI0_96:\n\t.cell 18446744073709551483\nCPI0_97:\n\t.cell 452320427257589735736092501655702212210535795424078143435447840818844483830\nCPI0_98:\n\t.cell 904625697166532776746648320380374280103671765658434358441154937409622769664\nCPI0_99:\n\t.cell 452328889789603366012377924652978625760231949447188723633731030756863967754\nCPI5_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI5_2:\n\t.cell 18446744073709551328\n","methodIdentifiers":{"IS_TEST()":"fa7626d4","excludeArtifacts()":"b5508aa9","excludeContracts()":"e20c9f71","excludeSelectors()":"b0464fdc","excludeSenders()":"1ed7831c","failed()":"ba414fa6","setUp()":"0a9254e4","targetArtifactSelectors()":"66d9a9a0","targetArtifacts()":"85226c81","targetContracts()":"3f7286f4","targetInterfaces()":"2ade3880","targetSelectors()":"916a17c6","targetSenders()":"3e5e3c23","testEntryPointCanExecuteCommands()":"91ec0a22","testNonOwnerCantExecuteCommands()":"f1b3f9fb","testOwnerCanExecuteCommands()":"1fd6142a","testRecoverSignedOp()":"137f2e5a","testValidationOfUserOps()":"13f8218c"},"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.3a2587f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"log_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"log_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"log_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"name\":\"log_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\"}],\"name\":\"log_named_address\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\"}],\"name\":\"log_named_array\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\"}],\"name\":\"log_named_bytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\"}],\"name\":\"log_named_bytes32\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"log_named_decimal_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\"}],\"name\":\"log_named_int\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\"}],\"name\":\"log_named_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"log_named_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"log_string\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"log_uint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"logs\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"excludedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"excludedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"excludeSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"excludedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifactSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"artifact\",\"type\":\"string\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzArtifactSelector[]\",\"name\":\"targetedArtifactSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetArtifacts\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"targetedArtifacts_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedContracts_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetInterfaces\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"artifacts\",\"type\":\"string[]\"}],\"internalType\":\"struct StdInvariant.FuzzInterface[]\",\"name\":\"targetedInterfaces_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSelectors\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct StdInvariant.FuzzSelector[]\",\"name\":\"targetedSelectors_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetSenders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targetedSenders_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testEntryPointCanExecuteCommands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testNonOwnerCantExecuteCommands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testOwnerCanExecuteCommands\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRecoverSignedOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testValidationOfUserOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/ethereum/MinimalAccountTest.t.sol\":\"MinimalAccountTest\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":foundry-devops/=lib/foundry-devops/\",\":foundry-era-contracts/=lib/foundry-era-contracts/\",\":murky/=lib/foundry-era-contracts/lib/murky/\",\":openzeppelin-contracts-upgradeable/=lib/foundry-era-contracts/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":solpp/=lib/foundry-era-contracts/src/solpp/solpp-generated-contracts/\"]},\"sources\":{\"lib/account-abstraction/contracts/core/EntryPoint.sol\":{\"keccak256\":\"0x0eb1245b5541ff0fbc0f2a23c746e2b4eb9c46e801a4847f15d7d96d1cecc576\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b002e499336c8f6ec05230762cccd3b48d67a2ec547e2789cfb70132af0b430f\",\"dweb:/ipfs/QmfRGPNgBrfxmLt9PQUEjocVmC47Mx14Vie1tziTARRZfq\"]},\"lib/account-abstraction/contracts/core/Helpers.sol\":{\"keccak256\":\"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e\",\"dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc\"]},\"lib/account-abstraction/contracts/core/NonceManager.sol\":{\"keccak256\":\"0x1f951786ce6f171e7ed0242fee73ee4a205c7523404ee6cffca48b8c64ea5fe9\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://a602bf2274d478dae7a532cca31f8179131808c324cc26ece5c7e87c5a1015a6\",\"dweb:/ipfs/QmaaSyw5GGbAWzUhAPCtsb38P3MmaVr1ngp61PYHCU2a5a\"]},\"lib/account-abstraction/contracts/core/SenderCreator.sol\":{\"keccak256\":\"0xeb95afb6e4cf921c1ed105ecb9f549ca46bee57f68acd1d2f4f84607ac0db5c5\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d2ac91562f1fcabe4809a1b4256895efebcf46f89e08336a6c09ee2d29733238\",\"dweb:/ipfs/QmPsQnPcCzioPwVtUhxkbnwKPC1bnhHSbAwK9GXVpjN3mH\"]},\"lib/account-abstraction/contracts/core/StakeManager.sol\":{\"keccak256\":\"0x673eb19600058d8642605ca409c9e1d4cab13735564b856270b92c330ffb1b8d\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://06599c57c7075ee8eb5f1710fccca3eb322876b968ec271e1fb34af41510ab2c\",\"dweb:/ipfs/QmVsDEjmZYtzgXa4AYKxbQEYQVh6NBq8GmFJCariBUqK4G\"]},\"lib/account-abstraction/contracts/core/UserOperationLib.sol\":{\"keccak256\":\"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc\",\"dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS\"]},\"lib/account-abstraction/contracts/interfaces/IAccount.sol\":{\"keccak256\":\"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020\",\"dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP\"]},\"lib/account-abstraction/contracts/interfaces/IAccountExecute.sol\":{\"keccak256\":\"0xd3dc32dde1add1fb6377f939ceff6be31c2e21343522311f7b88db666be9ee6c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://5b8f065171bd32e23b306868189c730f849ce6147f753c59e396e7afcf384577\",\"dweb:/ipfs/QmZpDRNEZ9YNgGgyLQo5yM4bB1FNbtnfDABsChbgSQKXUh\"]},\"lib/account-abstraction/contracts/interfaces/IAggregator.sol\":{\"keccak256\":\"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155\",\"dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5\"]},\"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"keccak256\":\"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9\",\"dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe\"]},\"lib/account-abstraction/contracts/interfaces/INonceManager.sol\":{\"keccak256\":\"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3\",\"dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk\"]},\"lib/account-abstraction/contracts/interfaces/IPaymaster.sol\":{\"keccak256\":\"0x49d8dbf8a85b006bcd89bbc40e4e9e113997cc016007de85263bdae70572d07f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://bc0d83804c1b795d5c216b3518cd176c48f90db28550f267cbd89746d6b476c8\",\"dweb:/ipfs/QmNdCm4c6hnt7f6Q8q21QjtCNZWWRUaMVEYnQHEv68VnKt\"]},\"lib/account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"keccak256\":\"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04\",\"license\":\"GPL-3.0-only\",\"urls\":[\"bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00\",\"dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj\"]},\"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol\":{\"keccak256\":\"0x22a852ab11cd80f4bf1c0628ad713278aaa232b406c23b32b8ec26fab4eea44f\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://acd04532887d2dce46794bcb028f90e3289999f560e6896cf72b9e7d332084de\",\"dweb:/ipfs/QmSSkEt5eAJSA7A2uKzrUP6b3WFBd88rMJ9xK2Y24hvc3t\"]},\"lib/account-abstraction/contracts/utils/Exec.sol\":{\"keccak256\":\"0x86b1b1cd11158dddb9d381040c57fdc643c74b5e4eed3e7e036f32452672ad74\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://ad88663b6c76df73cf09a272cf333d038df7bb4c51281284b572bf9b46e1cd77\",\"dweb:/ipfs/QmVKxYF8avyPBtqejVhFCM2CuHsfpsCh7TsPqkBLtrgwJQ\"]},\"lib/forge-std/src/Base.sol\":{\"keccak256\":\"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224\",\"dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK\"]},\"lib/forge-std/src/Script.sol\":{\"keccak256\":\"0x2315be74cc2826f9da401bea3da46a10ad6a6efdf73176d79160b453286d0ed2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af0d4dc826911d6cb4d6272ed5cbdb6950e1476141cca328e178b808d848789c\",\"dweb:/ipfs/QmV2ytjUEkV84VtdMs1nZqQTBoVE987cHboQMpiha5yo3e\"]},\"lib/forge-std/src/StdAssertions.sol\":{\"keccak256\":\"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe\",\"dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b\"]},\"lib/forge-std/src/StdChains.sol\":{\"keccak256\":\"0x1e2c73d51d6b0d1101f3a4cf0e6def9818a891d6aa8d306f2b127943a69dca2d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ab436d74b405f890e2634c6077df15cc196b4032ec1bdabaaf021ef209e68db\",\"dweb:/ipfs/Qmbb1Qgtdn6S4aqrnpg3y9TDX7erFFcRir9GN62Y7QazaY\"]},\"lib/forge-std/src/StdCheats.sol\":{\"keccak256\":\"0xb72f3519e0bf7d31df5d68557525f4fc55d861c3fb3b0f7793144ef7c94cbeb7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f3456d0f78e6f61203fa7871ba2df0d35925f10db3baee14be623ce2a35b84e2\",\"dweb:/ipfs/QmWE6QQSBvJifHMraisBTrf1x4WCwrDoTPLX8UKajTiApc\"]},\"lib/forge-std/src/StdError.sol\":{\"keccak256\":\"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6\",\"dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj\"]},\"lib/forge-std/src/StdInvariant.sol\":{\"keccak256\":\"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391\",\"dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5\"]},\"lib/forge-std/src/StdJson.sol\":{\"keccak256\":\"0x62bed173cb126f6d5006706cf249bac8a2d51bfa18f773f314784ff18adc622d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5acc33dddbf2492e37dc32e89cd56ce917272d303a6874805f3a5768a6bfbf54\",\"dweb:/ipfs/QmTsgFhcpUf16gAVazUXU3WspgX8nHke2hzVCvoqS25WEp\"]},\"lib/forge-std/src/StdMath.sol\":{\"keccak256\":\"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92\",\"dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC\"]},\"lib/forge-std/src/StdStorage.sol\":{\"keccak256\":\"0x651d84d948832f0ef45686417aa68ffb871378fa788a4123dbf37844903c66f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff20f5ac9de3dc3ba86b1bf1f2723174e82ce3499ad67cb0ccfa7d28baeee678\",\"dweb:/ipfs/QmRZkUFKz7AmF7yk6o317sk822HHhGVPXZQgX8G4LfYfft\"]},\"lib/forge-std/src/StdStyle.sol\":{\"keccak256\":\"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8\",\"dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK\"]},\"lib/forge-std/src/StdToml.sol\":{\"keccak256\":\"0xc8a57915ace96f5b6a85b57e57690fc038cad9034a3dc368c11828a3707c61ab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fa880a1a6e5d94005dcf4811b4c0df8d9c06407017ae111bd351483e2b76a72d\",\"dweb:/ipfs/QmcxkEE58gE1vDcZofTr8QpvdjXjgR72yYg7o4vTPSLCsy\"]},\"lib/forge-std/src/StdUtils.sol\":{\"keccak256\":\"0x4a5853bb9688c4e1c65626036cddd8ea2af84ef1046b704ddc3782d84a892410\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://09c1024e6aac9657312fcfcf5c3dee62c22edf9f74a1065e6924c4ec710ecafa\",\"dweb:/ipfs/QmRNURoTUkd6DiZnf8yY8o3stJpVQBifopdSpQgP9RhvRr\"]},\"lib/forge-std/src/Test.sol\":{\"keccak256\":\"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e\",\"dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK\"]},\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xfd9e719ff0673fdd8ff83bbe72ee8cae0273d61937d27fde5d9159d9849233f4\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://b14aaef0d76f2e5257e4e3ab33895d5260d4c7707ff4d37fea1f31d25c8684a8\",\"dweb:/ipfs/QmRd6BMh4FNDPW8Niy4TU2XrtKqAc6GRTfw8xjSwpQ42Gy\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/forge-std/src/console2.sol\":{\"keccak256\":\"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d\",\"dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ\"]},\"lib/forge-std/src/interfaces/IERC165.sol\":{\"keccak256\":\"0x414b2861b1acbf816ccb7346d3f16cf6c1e002e9e5e40d2f1f26fa5ddc2ea600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://698352fb240868ea8f1d1fe389993035eeab930f10d06934f80ccfb2b6ccbfbc\",\"dweb:/ipfs/QmT6WLHAgXxFhh12kWym895oTzXid1326iZiwT3pyfggoT\"]},\"lib/forge-std/src/interfaces/IERC20.sol\":{\"keccak256\":\"0x4cab887298790f908c27de107e4e2907ca5413aee482ef776f8d2f353c5ef947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bb715e0c4a2bdbe432bb624501506041f06e878e0b72675aebba30ad2c2b72e7\",\"dweb:/ipfs/QmWhhLSvkxS2NrukJJHqFY8gDVE5r9rD4PfHvR24pwdKv9\"]},\"lib/forge-std/src/interfaces/IERC721.sol\":{\"keccak256\":\"0xf069262a264fdb69f8f37a10d2df7374649e9ba73f8414c9c8a3b51184625f15\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://924a41ca82a68ffbd503a5faf2f76d13e9938f10501a71094716f12bb64b4b7f\",\"dweb:/ipfs/QmdWnqfKc5ZGhmxNPTde4zrFchnv9Yk9MpCMb2rdhXE5gm\"]},\"lib/forge-std/src/interfaces/IMulticall3.sol\":{\"keccak256\":\"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0\",\"dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2\"]},\"lib/forge-std/src/mocks/MockERC20.sol\":{\"keccak256\":\"0xadbdfc6639edec00ba94bb1133a0fd8de31ccafe45c2ef5df9b3ca61b60b559b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bc766f01bccf669abac8cc7b2096cc1352a66471ca3772ae61b1801dedc4ed4f\",\"dweb:/ipfs/QmNigaPj1LYkP7Z5xr4ijkUxr2K66fDGeoifG3WoM9ruyw\"]},\"lib/forge-std/src/mocks/MockERC721.sol\":{\"keccak256\":\"0xbfbb755bb379f58b97699f7cda0e9a2b9113daaa072e41b280a5ce6a3bff44c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ae0c31d29db14d6a0e9b62d33d550feb307f48a6f45068901a013321f337f87\",\"dweb:/ipfs/QmX25DVXW6XZDvRm6SNBGCWrZQ6oNhdq5CmgtVocvsUdwv\"]},\"lib/forge-std/src/safeconsole.sol\":{\"keccak256\":\"0xbaf41fdc6c54297e7cd8250e48b0f20eaac918e342a1028cef3f9a52ac086381\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a500ad81dea226f9910e6b50f99a9ff930105e393a692cbfb2185e4cdb4424ae\",\"dweb:/ipfs/QmVbUQpXNMmMWRiy4FvBNczzq46BMGfUoBikvSHNiCxVTq\"]},\"lib/foundry-devops/src/DevOpsTools.sol\":{\"keccak256\":\"0x6e310a8b06b2cb689b5e3c0deec45ef1ffc35d8accf79e4da2656cc5a3d10a36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c6337496be59bbd75e9fed8afc3822dda05162b6bb019820190956317860583\",\"dweb:/ipfs/Qmdr8twbe1Wr7DWGkZkrpKNVmSkwh9L5PSf7HKq7utYDWh\"]},\"lib/foundry-devops/src/StringUtils.sol\":{\"keccak256\":\"0xc21a2278d2872b8867aa123ee6c236f51a38a789e8aa80659655d7ccedef9341\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c88541569ee44ee344e1adf17ec2d2dfd528dfc6495cd6767fcc536bca8b0d0e\",\"dweb:/ipfs/QmaRZNzPB62ruBepsG6zbUabyKRM1pdkGAGG5iL7mTEjri\"]},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\":{\"keccak256\":\"0x3ae81a443846c6d9bd387d6c6a5d7271a25095c83bb93817eefdaa22e13ca9e0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f98462a56f254dc0046038e92527e3b7ee5bf0e03f60e3459fbd400c14be01a7\",\"dweb:/ipfs/QmevANfRaMrqy8Jh33LxEs5vP2xBPQspxtij8bsonw3GHM\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7448ab095d6940130bcf76ba47a2eab14148c83119523b93dd89f6d84edd6c02\",\"dweb:/ipfs/QmawrZ4voKQjH3oomXT3Kuheb3Mnmo2VvVpxg8Ne5UJUrd\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ecdsa.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8\",\"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df\",\"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"script/DeployMinimal.s.sol\":{\"keccak256\":\"0x7a59bcfe22b06a2390d348cd01983e31f8ccbd15dc36ee21cc377d53dffa09fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b9b8f80816286f6584febf03da90678dd610de9a2b0c42fa84c2680af3c1776\",\"dweb:/ipfs/QmRpA9GJkVtpE19RXf3Kxog5rL2LZvsnPz8yQCfMBDK786\"]},\"script/HelperConfig.s.sol\":{\"keccak256\":\"0x8172c7f6e9b47bad77d62773af254c4e980360b8cdbf3f917de7a5265a7805aa\",\"urls\":[\"bzz-raw://62b69f649437d3dbac02666078577d154c9969000d99ab3f307df63b0acdfc94\",\"dweb:/ipfs/QmeXF6kKZD5iK6vRyfDC7PQHniVBnKCLZfiuMQ9Bdb6u7c\"]},\"script/SendPackedUserOp.s.sol\":{\"keccak256\":\"0x2fd04e772bb7b9a239a1ad3bdb4058ce94ab0246def08d1d3c9cce9339c80718\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d048057b76bd4d77117f76493cbe172adbf5308b16ca6a5603bad0de06daca62\",\"dweb:/ipfs/QmXPEsSpUgFBUGw6b636KNmNMo5HJf5x3jKDoAs1NjKngF\"]},\"src/ethereum/MinimalAccount.sol\":{\"keccak256\":\"0x6ffe6d098fa053754d4f8449e078ed998c29f9f7533334e43e2df8028fa7d7f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1fa46d131a024e23d1abff0d124e401d53808298216bef666f5c7e6bc34d4dc4\",\"dweb:/ipfs/QmXPGP57rJQEpXMANuTUsxuc1AzVMumvyFqa3b6VdZ157P\"]},\"test/ethereum/MinimalAccountTest.t.sol\":{\"keccak256\":\"0x4c2b85eec890231fd829e86274412bc29a9e6453838341bec6cb332c666fbdbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3627f6d86c8e9195386a26d0326f35b706b266059afe9be80b46da2dfff3602c\",\"dweb:/ipfs/QmfCZJiP2CHTRbG7kfHr6V4dyzGvsdaXBHsbKEPgsEfzmF\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":"1.0.1","zk_version":"1.4.1"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 15:\"lib/forge-std/src/Base.sol\", 17:\"lib/forge-std/src/StdAssertions.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 21:\"lib/forge-std/src/StdInvariant.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 28:\"lib/forge-std/src/Test.sol\", 86:\"test/ethereum/MinimalAccountTest.t.sol\"\nobject \"MinimalAccountTest_52794\" {\n    code {\n        {\n            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let _2 := not(255)\n            sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2), /** @src 18:3166:3170  \"true\" */ 0x01))\n            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n            sstore(/** @src 28:1038:1042  \"true\" */ 0x1f, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 28:1038:1042  \"true\" */ 0x1f), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2), /** @src 18:3166:3170  \"true\" */ 0x01))\n            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n            let _3 := 64\n            let newFreePtr := add(_1, _3)\n            let _4 := sub(shl(64, 1), 1)\n            if or(gt(newFreePtr, _4), lt(newFreePtr, _1))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(_3, newFreePtr)\n            let _5 := 10\n            mstore(_1, 10)\n            let _6 := 0x20\n            mstore(add(_1, _6), \"randomUser\")\n            /// @src 19:20303:20325  \"abi.encodePacked(name)\"\n            let expr_mpos := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n            let i := 0\n            for { } lt(i, _5) { i := add(i, _6) }\n            {\n                mstore(add(add(/** @src 19:20303:20325  \"abi.encodePacked(name)\" */ expr_mpos, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ i), _6), mload(add(add(_1, i), _6)))\n            }\n            mstore(add(/** @src 19:20303:20325  \"abi.encodePacked(name)\" */ expr_mpos, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 42), 0)\n            /// @src 19:20303:20325  \"abi.encodePacked(name)\"\n            mstore(expr_mpos, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 10)\n            let newFreePtr_1 := add(expr_mpos, _3)\n            if or(gt(newFreePtr_1, _4), lt(newFreePtr_1, expr_mpos))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            mstore(_3, newFreePtr_1)\n            /// @src 19:20293:20326  \"keccak256(abi.encodePacked(name))\"\n            let _7 := keccak256(/** @src 19:20303:20325  \"abi.encodePacked(name)\" */ add(expr_mpos, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _6), mload(/** @src 19:20293:20326  \"keccak256(abi.encodePacked(name))\" */ expr_mpos))\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            mstore(newFreePtr_1, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(224, 0xffa18649))\n            mstore(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ add(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ expr_mpos, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 68), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _7)\n            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n            let _8 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            let _9 := staticcall(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _8, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ newFreePtr_1, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ newFreePtr_1, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _6)\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            if iszero(_9)\n            {\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let pos := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                returndatacopy(pos, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            let expr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0\n            /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n            if _9\n            {\n                let _10 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _6\n                /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n                if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _6, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ returndatasize()) { _10 := returndatasize() }\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let newFreePtr_2 := add(add(expr_mpos, and(add(_10, /** @src 28:1038:1042  \"true\" */ 0x1f), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ not(31))), _3)\n                if or(gt(newFreePtr_2, _4), lt(newFreePtr_2, newFreePtr_1))\n                {\n                    mstore(expr, shl(224, 0x4e487b71))\n                    mstore(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 4, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0x41)\n                    revert(expr, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36)\n                }\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                mstore(_3, newFreePtr_2)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                if slt(sub(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ add(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ expr_mpos, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ _10), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ expr_mpos), _6)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(expr, expr)\n                }\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let value := mload(newFreePtr_1)\n                if iszero(eq(value, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ value, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, 1), 1))))\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                {\n                    revert(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ expr, expr)\n                }\n                /// @src 19:20344:20363  \"vm.addr(privateKey)\"\n                expr := value\n            }\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _8))\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            {\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                revert(0, 0)\n            }\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            let _11 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            mstore(_11, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ shl(227, 0x18caf8e3))\n            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n            let _12 := and(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ expr, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, 1), 1))\n            /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            mstore(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ add(_11, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 4), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _12)\n            /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            mstore(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3)\n            /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n            let length := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ _1)\n            mstore(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 68), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ length)\n            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n            let i_1 := 0\n            for { } lt(i_1, length) { i_1 := add(i_1, _6) }\n            {\n                mstore(add(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ i_1), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 100), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(add(add(_1, i_1), _6)))\n            }\n            mstore(add(add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ length), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 100), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0)\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            let _13 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _8, 0, /** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, add(sub(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ add(/** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(add(/** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ length, /** @src 28:1038:1042  \"true\" */ 0x1f), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ not(31))), /** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11), /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 100), /** @src 19:20373:20393  \"vm.label(addr, name)\" */ _11, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0)\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            if iszero(_13)\n            {\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                let pos_1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_3)\n                /// @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\"\n                returndatacopy(pos_1, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ returndatasize())\n                revert(pos_1, returndatasize())\n            }\n            /// @src 19:20373:20393  \"vm.label(addr, name)\"\n            if _13\n            {\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                if gt(_11, _4)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(/** @src 19:20344:20363  \"vm.addr(privateKey)\" */ 4, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0x41)\n                    revert(0, /** @src 19:291:350  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36)\n                }\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                mstore(_3, _11)\n            }\n            sstore(/** @src 86:994:1016  \"makeAddr(\\\"randomUser\\\")\" */ 0x23, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 86:994:1016  \"makeAddr(\\\"randomUser\\\")\" */ 0x23), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ not(sub(shl(160, 1), 1))), _12))\n            let _14 := mload(_3)\n            let _15 := datasize(\"MinimalAccountTest_52794_deployed\")\n            codecopy(_14, dataoffset(\"MinimalAccountTest_52794_deployed\"), _15)\n            return(_14, _15)\n        }\n    }\n    /// @use-src 15:\"lib/forge-std/src/Base.sol\", 17:\"lib/forge-std/src/StdAssertions.sol\", 21:\"lib/forge-std/src/StdInvariant.sol\", 28:\"lib/forge-std/src/Test.sol\", 75:\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\", 76:\"lib/openzeppelin-contracts/contracts/utils/cryptography/ecdsa.sol\", 86:\"test/ethereum/MinimalAccountTest.t.sol\"\n    object \"MinimalAccountTest_52794_deployed\" {\n        code {\n            {\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    let _5 := 224\n                    switch shr(224, calldataload(_4))\n                    case 0x0a9254e4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        /// @src 86:1090:1109  \"new DeployMinimal()\"\n                        let _6 := datasize(\"DeployMinimal_51227\")\n                        let _7 := add(_1, _6)\n                        let _8 := 0xffffffffffffffff\n                        if or(gt(_7, _8), lt(_7, _1))\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        /// @src 86:1090:1109  \"new DeployMinimal()\"\n                        datacopy(_1, dataoffset(\"DeployMinimal_51227\"), _6)\n                        let expr_address := create(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:1090:1109  \"new DeployMinimal()\" */ _1, sub(_7, _1))\n                        if iszero(expr_address)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos := mload(_2)\n                            returndatacopy(pos, _4, returndatasize())\n                            revert(pos, returndatasize())\n                        }\n                        let _9 := sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                        let _10 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                        mstore(_10, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x7d7a1c8b))\n                        /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                        let _11 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:1153:1187  \"deployMinimal.deployMinimalAccount\" */ expr_address, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _9), _4, /** @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\" */ _10, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\" */ _10, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                        if iszero(_11)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_1 := mload(_2)\n                            returndatacopy(pos_1, _4, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                        let expr_component_address := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4\n                        let expr_component_address_1 := _4\n                        /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                        if _11\n                        {\n                            let _12 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\" */ returndatasize()) { _12 := returndatasize() }\n                            finalize_allocation(_10, _12)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\" */ add(_10, _12), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _10), _2) { revert(_4, _4) }\n                            let value := mload(_10)\n                            if iszero(eq(value, and(value, _9))) { revert(_4, _4) }\n                            let value_1 := mload(add(_10, 32))\n                            if iszero(eq(value_1, and(value_1, _9))) { revert(_4, _4) }\n                            /// @src 86:1153:1189  \"deployMinimal.deployMinimalAccount()\"\n                            expr_component_address := value\n                            expr_component_address_1 := value_1\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _13 := shl(160, 0xffffffffffffffffffffffff)\n                        sstore(/** @src 86:1120:1189  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x20, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 86:1120:1189  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x20), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _13), and(expr_component_address_1, _9)))\n                        let _14 := sload(/** @src 86:1120:1189  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x1f)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        sstore(/** @src 86:1120:1189  \"(helperConfig, minimalAccount) = deployMinimal.deployMinimalAccount()\" */ 0x1f, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ or(and(_14, not(sub(shl(168, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 256))), and(shl(8, expr_component_address), sub(shl(168, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 256))))\n                        /// @src 86:1207:1222  \"new ERC20Mock()\"\n                        let _15 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1207:1222  \"new ERC20Mock()\"\n                        let _16 := datasize(\"ERC20Mock_47635\")\n                        let _17 := add(_15, _16)\n                        if or(gt(_17, /** @src 86:1090:1109  \"new DeployMinimal()\" */ _8), /** @src 86:1207:1222  \"new ERC20Mock()\" */ lt(_17, _15))\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        /// @src 86:1207:1222  \"new ERC20Mock()\"\n                        datacopy(_15, dataoffset(\"ERC20Mock_47635\"), _16)\n                        let expr_address_1 := create(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:1207:1222  \"new ERC20Mock()\" */ _15, sub(_17, _15))\n                        if iszero(expr_address_1)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_2 := mload(_2)\n                            returndatacopy(pos_2, _4, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        sstore(/** @src 86:1200:1222  \"usdc = new ERC20Mock()\" */ 0x21, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 86:1200:1222  \"usdc = new ERC20Mock()\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _13), and(expr_address_1, _9)))\n                        /// @src 86:1252:1274  \"new SendPackedUserOp()\"\n                        let _18 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1252:1274  \"new SendPackedUserOp()\"\n                        let _19 := datasize(\"SendPackedUserOp_51692\")\n                        let _20 := add(_18, _19)\n                        if or(gt(_20, /** @src 86:1090:1109  \"new DeployMinimal()\" */ _8), /** @src 86:1252:1274  \"new SendPackedUserOp()\" */ lt(_20, _18))\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 0x24)\n                        }\n                        /// @src 86:1252:1274  \"new SendPackedUserOp()\"\n                        datacopy(_18, dataoffset(\"SendPackedUserOp_51692\"), _19)\n                        let expr_address_2 := create(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:1252:1274  \"new SendPackedUserOp()\" */ _18, sub(_20, _18))\n                        if iszero(expr_address_2)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_3 := mload(_2)\n                            returndatacopy(pos_3, _4, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        sstore(/** @src 86:1233:1274  \"sendPackedUserOp = new SendPackedUserOp()\" */ 0x22, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ or(and(sload(/** @src 86:1233:1274  \"sendPackedUserOp = new SendPackedUserOp()\" */ 0x22), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _13), and(expr_address_2, _9)))\n                        return(_4, _4)\n                    }\n                    case 0x137f2e5a {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _21 := sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned := and(sload(/** @src 86:2614:2618  \"usdc\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21)\n                        /// @src 86:2637:2651  \"minimalAccount\"\n                        let _22 := 0x20\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_1 := and(sload(/** @src 86:2637:2651  \"minimalAccount\" */ _22), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21)\n                        /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _23 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_23, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\" */ add(_23, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_1)\n                        /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _24 := staticcall(gas(), cleaned, _23, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36, /** @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\" */ _23, /** @src 86:2637:2651  \"minimalAccount\" */ _22)\n                        /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_24)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_4 := mload(_2)\n                            returndatacopy(pos_4, _4, returndatasize())\n                            revert(pos_4, returndatasize())\n                        }\n                        /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                        if _24\n                        {\n                            let _25 := /** @src 86:2637:2651  \"minimalAccount\" */ _22\n                            /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 86:2637:2651  \"minimalAccount\" */ _22, /** @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _25 := returndatasize() }\n                            finalize_allocation(_23, _25)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\" */ add(_23, _25), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _23), /** @src 86:2637:2651  \"minimalAccount\" */ _22)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(_4, _4) }\n                            /// @src 86:2614:2653  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_23)\n                        }\n                        /// @src 86:2605:2657  \"assertEq(usdc.balanceOf(address(minimalAccount)), 0)\"\n                        fun_assertEq_21466(expr)\n                        /// @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(add(expr_mpos, /** @src 86:2637:2651  \"minimalAccount\" */ _22), /** @src 86:2786:2809  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), cleaned_1)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos, /** @src 86:962:966  \"1e18\" */ 68), 0x0de0b6b3a7640000)\n                        /// @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos, /** @src 86:962:966  \"1e18\" */ 68)\n                        /// @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_31488(expr_mpos)\n                        /// @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let expr_mpos_1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        mstore(add(expr_mpos_1, /** @src 86:2637:2651  \"minimalAccount\" */ _22), /** @src 86:2908:2939  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_1, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), cleaned)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_1, /** @src 86:962:966  \"1e18\" */ 68), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_1, /** @src 86:962:966  \"1e18\" */ 100), 96)\n                        /// @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let _26 := sub(/** @src 86:962:966  \"1e18\" */ abi_encode_string(expr_mpos, add(/** @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_1, /** @src 86:962:966  \"1e18\" */ 132)), /** @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_1)\n                        mstore(expr_mpos_1, add(_26, /** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                        /// @src 86:2885:2967  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        finalize_allocation(expr_mpos_1, _26)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_2 := and(/** @src 86:962:966  \"1e18\" */ sload(/** @src 86:3022:3038  \"sendPackedUserOp\" */ 0x22), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21)\n                        /// @src 86:962:966  \"1e18\"\n                        let _27 := sload(/** @src 86:3098:3110  \"helperConfig\" */ 0x1f)\n                        /// @src 86:3098:3122  \"helperConfig.getConfig()\"\n                        let _28 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        let _29 := shl(226, 0x30fe4275)\n                        /// @src 86:3098:3122  \"helperConfig.getConfig()\"\n                        mstore(_28, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _29)\n                        /// @src 86:3098:3122  \"helperConfig.getConfig()\"\n                        let _30 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ shr(8, _27), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21), _4, /** @src 86:3098:3122  \"helperConfig.getConfig()\" */ _28, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:3098:3122  \"helperConfig.getConfig()\" */ _28, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:3098:3122  \"helperConfig.getConfig()\"\n                        if iszero(_30)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_5 := mload(_2)\n                            returndatacopy(pos_5, _4, returndatasize())\n                            revert(pos_5, returndatasize())\n                        }\n                        /// @src 86:3098:3122  \"helperConfig.getConfig()\"\n                        let expr_mpos_2 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 86:3098:3122  \"helperConfig.getConfig()\"\n                        if _30\n                        {\n                            let _31 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:3098:3122  \"helperConfig.getConfig()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:3098:3122  \"helperConfig.getConfig()\" */ returndatasize()) { _31 := returndatasize() }\n                            finalize_allocation(_28, _31)\n                            expr_mpos_2 := abi_decode_struct_NetworkConfig_fromMemory(_28, add(_28, _31))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_3 := and(sload(/** @src 86:2637:2651  \"minimalAccount\" */ _22), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21)\n                        /// @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let _32 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        mstore(_32, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x532ccd63))\n                        /// @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let _33 := staticcall(gas(), cleaned_2, _32, sub(abi_encode_bytes_struct_NetworkConfig_address(add(_32, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\" */ expr_mpos_1, expr_mpos_2, cleaned_3), _32), _32, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        if iszero(_33)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_6 := mload(_2)\n                            returndatacopy(pos_6, _4, returndatasize())\n                            revert(pos_6, returndatasize())\n                        }\n                        /// @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let expr_mpos_3 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        if _33\n                        {\n                            let _34 := returndatasize()\n                            returndatacopy(_32, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:3022:3148  \"sendPackedUserOp.generateSignedUserOperation(...\" */ _34)\n                            finalize_allocation(_32, _34)\n                            expr_mpos_3 := abi_decode_struct_PackedUserOperation_fromMemory(_32, add(_32, _34))\n                        }\n                        /// @src 86:962:966  \"1e18\"\n                        let value_2 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ shr(8, sload(/** @src 86:3098:3110  \"helperConfig\" */ 0x1f)), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21)\n                        /// @src 86:3201:3225  \"helperConfig.getConfig()\"\n                        let _35 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:3201:3225  \"helperConfig.getConfig()\"\n                        mstore(_35, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _29)\n                        /// @src 86:3201:3225  \"helperConfig.getConfig()\"\n                        let _36 := call(gas(), value_2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:3201:3225  \"helperConfig.getConfig()\" */ _35, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:3201:3225  \"helperConfig.getConfig()\" */ _35, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:3201:3225  \"helperConfig.getConfig()\"\n                        if iszero(_36)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_7 := mload(_2)\n                            returndatacopy(pos_7, _4, returndatasize())\n                            revert(pos_7, returndatasize())\n                        }\n                        /// @src 86:3201:3225  \"helperConfig.getConfig()\"\n                        let expr_mpos_4 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 86:3201:3225  \"helperConfig.getConfig()\"\n                        if _36\n                        {\n                            let _37 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:3201:3225  \"helperConfig.getConfig()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:3201:3225  \"helperConfig.getConfig()\" */ returndatasize()) { _37 := returndatasize() }\n                            finalize_allocation(_35, _37)\n                            expr_mpos_4 := abi_decode_struct_NetworkConfig_fromMemory(_35, add(_35, _37))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_4 := and(/** @src 86:962:966  \"1e18\" */ mload(/** @src 86:3201:3236  \"helperConfig.getConfig().entryPoint\" */ expr_mpos_4), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21)\n                        /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        let _38 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        mstore(_38, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x08b37793))\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(/** @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ add(_38, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 86:2637:2651  \"minimalAccount\" */ _22)\n                        /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        let _39 := staticcall(gas(), cleaned_4, _38, sub(/** @src 86:962:966  \"1e18\" */ abi_encode_struct_PackedUserOperation(expr_mpos_3, add(/** @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ _38, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36)), /** @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ _38), _38, /** @src 86:2637:2651  \"minimalAccount\" */ _22)\n                        /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        if iszero(_39)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_8 := mload(_2)\n                            returndatacopy(pos_8, _4, returndatasize())\n                            revert(pos_8, returndatasize())\n                        }\n                        /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        let expr_1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        if _39\n                        {\n                            let _40 := /** @src 86:2637:2651  \"minimalAccount\" */ _22\n                            /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                            if gt(/** @src 86:2637:2651  \"minimalAccount\" */ _22, /** @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ returndatasize()) { _40 := returndatasize() }\n                            finalize_allocation(_38, _40)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ add(_38, _40), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _38), /** @src 86:2637:2651  \"minimalAccount\" */ _22)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(_4, _4) }\n                            /// @src 86:3189:3265  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                            expr_1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_38)\n                        }\n                        /// @src 75:1367:1676  \"assembly {...\"\n                        mstore(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 75:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                        mstore(0x1c, expr_1)\n                        let var_digest := keccak256(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 75:1367:1676  \"assembly {...\" */ 0x3c)\n                        /// @src 76:3859:3886  \"tryRecover(hash, signature)\"\n                        let expr_component, expr_component_1, expr_component_2 := fun_tryRecover_49683(var_digest, /** @src 86:3375:3397  \"packedUserOp.signature\" */ mload(add(expr_mpos_3, 256)))\n                        /// @src 76:3915:3923  \"errorArg\"\n                        fun_throwError(expr_component_1, expr_component_2)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_5 := and(sload(/** @src 86:2637:2651  \"minimalAccount\" */ _22), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _21)\n                        /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                        let _41 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                        mstore(_41, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x8da5cb5b))\n                        /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                        let _42 := staticcall(gas(), cleaned_5, _41, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:3453:3475  \"minimalAccount.owner()\" */ _41, /** @src 86:2637:2651  \"minimalAccount\" */ _22)\n                        /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                        if iszero(_42)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_9 := mload(_2)\n                            returndatacopy(pos_9, _4, returndatasize())\n                            revert(pos_9, returndatasize())\n                        }\n                        /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                        let expr_2 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4\n                        /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                        if _42\n                        {\n                            let _43 := /** @src 86:2637:2651  \"minimalAccount\" */ _22\n                            /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                            if gt(/** @src 86:2637:2651  \"minimalAccount\" */ _22, /** @src 86:3453:3475  \"minimalAccount.owner()\" */ returndatasize()) { _43 := returndatasize() }\n                            finalize_allocation(_41, _43)\n                            /// @src 86:962:966  \"1e18\"\n                            if slt(sub(/** @src 86:3453:3475  \"minimalAccount.owner()\" */ add(_41, _43), /** @src 86:962:966  \"1e18\" */ _41), /** @src 86:2637:2651  \"minimalAccount\" */ _22)\n                            /// @src 86:962:966  \"1e18\"\n                            {\n                                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                                revert(_4, _4)\n                            }\n                            /// @src 86:3453:3475  \"minimalAccount.owner()\"\n                            expr_2 := /** @src 86:962:966  \"1e18\" */ abi_decode_address_fromMemory(_41)\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _44 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _44))\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        let _45 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        mstore(_45, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x28a9b0fb))\n                        mstore(/** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ add(_45, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), and(expr_component, _21))\n                        mstore(add(/** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ _45, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), and(expr_2, _21))\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        let _46 := staticcall(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _44, /** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ _45, /** @src 86:962:966  \"1e18\" */ 68, /** @src 17:3533:3557  \"vm.assertEq(left, right)\" */ _45, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        if iszero(_46)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_10 := mload(_2)\n                            returndatacopy(pos_10, _4, returndatasize())\n                            revert(pos_10, returndatasize())\n                        }\n                        /// @src 17:3533:3557  \"vm.assertEq(left, right)\"\n                        if _46\n                        {\n                            finalize_allocation_21467(_45)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            _4 := _4\n                        }\n                        return(_4, _4)\n                    }\n                    case 0x13f8218c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _47 := sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_6 := and(sload(/** @src 86:3678:3682  \"usdc\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:3701:3715  \"minimalAccount\"\n                        let _48 := 0x20\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_7 := and(sload(/** @src 86:3701:3715  \"minimalAccount\" */ _48), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _49 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_49, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\" */ add(_49, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_7)\n                        let _50 := 36\n                        /// @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _51 := staticcall(gas(), cleaned_6, _49, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _50, /** @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\" */ _49, /** @src 86:3701:3715  \"minimalAccount\" */ _48)\n                        /// @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_51)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_11 := mload(_2)\n                            returndatacopy(pos_11, _4, returndatasize())\n                            revert(pos_11, returndatasize())\n                        }\n                        /// @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr_3 := _4\n                        if _51\n                        {\n                            let _52 := /** @src 86:3701:3715  \"minimalAccount\" */ _48\n                            /// @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 86:3701:3715  \"minimalAccount\" */ _48, /** @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _52 := returndatasize() }\n                            finalize_allocation(_49, _52)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\" */ add(_49, _52), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _49), /** @src 86:3701:3715  \"minimalAccount\" */ _48)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:3678:3717  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr_3 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_49)\n                        }\n                        /// @src 86:3669:3721  \"assertEq(usdc.balanceOf(address(minimalAccount)), 0)\"\n                        fun_assertEq_21466(expr_3)\n                        /// @src 86:3827:3907  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_5 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:3827:3907  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(add(expr_mpos_5, /** @src 86:3701:3715  \"minimalAccount\" */ _48), /** @src 86:2786:2809  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:3827:3907  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos_5, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _50), cleaned_7)\n                        /// @src 86:962:966  \"1e18\"\n                        let _53 := 0x0de0b6b3a7640000\n                        mstore(add(/** @src 86:3827:3907  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos_5, /** @src 86:962:966  \"1e18\" */ 68), _53)\n                        /// @src 86:3827:3907  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_5, /** @src 86:962:966  \"1e18\" */ 68)\n                        /// @src 86:3827:3907  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_31488(expr_mpos_5)\n                        /// @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let expr_mpos_6 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        mstore(add(expr_mpos_6, /** @src 86:3701:3715  \"minimalAccount\" */ _48), /** @src 86:2908:2939  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_6, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _50), cleaned_6)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6, /** @src 86:962:966  \"1e18\" */ 68), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6, /** @src 86:962:966  \"1e18\" */ 100), 96)\n                        /// @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let _54 := sub(/** @src 86:962:966  \"1e18\" */ abi_encode_string(expr_mpos_5, add(/** @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6, /** @src 86:962:966  \"1e18\" */ 132)), /** @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_6)\n                        mstore(expr_mpos_6, add(_54, /** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                        /// @src 86:3949:4031  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        finalize_allocation(expr_mpos_6, _54)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_8 := and(/** @src 86:962:966  \"1e18\" */ sload(/** @src 86:4086:4102  \"sendPackedUserOp\" */ 0x22), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:962:966  \"1e18\"\n                        let _55 := sload(/** @src 86:4162:4174  \"helperConfig\" */ 0x1f)\n                        /// @src 86:4162:4186  \"helperConfig.getConfig()\"\n                        let _56 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        let _57 := shl(226, 0x30fe4275)\n                        /// @src 86:4162:4186  \"helperConfig.getConfig()\"\n                        mstore(_56, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _57)\n                        /// @src 86:4162:4186  \"helperConfig.getConfig()\"\n                        let _58 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ shr(8, _55), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47), _4, /** @src 86:4162:4186  \"helperConfig.getConfig()\" */ _56, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:4162:4186  \"helperConfig.getConfig()\" */ _56, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:4162:4186  \"helperConfig.getConfig()\"\n                        if iszero(_58)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_12 := mload(_2)\n                            returndatacopy(pos_12, _4, returndatasize())\n                            revert(pos_12, returndatasize())\n                        }\n                        /// @src 86:4162:4186  \"helperConfig.getConfig()\"\n                        let expr_mpos_7 := _4\n                        if _58\n                        {\n                            let _59 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:4162:4186  \"helperConfig.getConfig()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:4162:4186  \"helperConfig.getConfig()\" */ returndatasize()) { _59 := returndatasize() }\n                            finalize_allocation(_56, _59)\n                            expr_mpos_7 := abi_decode_struct_NetworkConfig_fromMemory(_56, add(_56, _59))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_9 := and(sload(/** @src 86:3701:3715  \"minimalAccount\" */ _48), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:4086:4212  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let _60 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4086:4212  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        mstore(_60, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x532ccd63))\n                        /// @src 86:4086:4212  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let _61 := staticcall(gas(), cleaned_8, _60, sub(abi_encode_bytes_struct_NetworkConfig_address(add(_60, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 86:4086:4212  \"sendPackedUserOp.generateSignedUserOperation(...\" */ expr_mpos_6, expr_mpos_7, cleaned_9), _60), _60, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:4086:4212  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        if iszero(_61)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_13 := mload(_2)\n                            returndatacopy(pos_13, _4, returndatasize())\n                            revert(pos_13, returndatasize())\n                        }\n                        /// @src 86:4086:4212  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let expr_mpos_8 := _4\n                        if _61\n                        {\n                            let _62 := returndatasize()\n                            returndatacopy(_60, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:4086:4212  \"sendPackedUserOp.generateSignedUserOperation(...\" */ _62)\n                            finalize_allocation(_60, _62)\n                            expr_mpos_8 := abi_decode_struct_PackedUserOperation_fromMemory(_60, add(_60, _62))\n                        }\n                        /// @src 86:962:966  \"1e18\"\n                        let value_3 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ shr(8, sload(/** @src 86:4162:4174  \"helperConfig\" */ 0x1f)), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:4265:4289  \"helperConfig.getConfig()\"\n                        let _63 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4265:4289  \"helperConfig.getConfig()\"\n                        mstore(_63, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _57)\n                        /// @src 86:4265:4289  \"helperConfig.getConfig()\"\n                        let _64 := call(gas(), value_3, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:4265:4289  \"helperConfig.getConfig()\" */ _63, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:4265:4289  \"helperConfig.getConfig()\" */ _63, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:4265:4289  \"helperConfig.getConfig()\"\n                        if iszero(_64)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_14 := mload(_2)\n                            returndatacopy(pos_14, _4, returndatasize())\n                            revert(pos_14, returndatasize())\n                        }\n                        /// @src 86:4265:4289  \"helperConfig.getConfig()\"\n                        let expr_mpos_9 := _4\n                        if _64\n                        {\n                            let _65 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:4265:4289  \"helperConfig.getConfig()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:4265:4289  \"helperConfig.getConfig()\" */ returndatasize()) { _65 := returndatasize() }\n                            finalize_allocation(_63, _65)\n                            expr_mpos_9 := abi_decode_struct_NetworkConfig_fromMemory(_63, add(_63, _65))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_10 := and(/** @src 86:962:966  \"1e18\" */ mload(/** @src 86:4265:4300  \"helperConfig.getConfig().entryPoint\" */ expr_mpos_9), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        let _66 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        mstore(_66, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x08b37793))\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(/** @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ add(_66, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 86:3701:3715  \"minimalAccount\" */ _48)\n                        /// @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        let _67 := staticcall(gas(), cleaned_10, _66, sub(/** @src 86:962:966  \"1e18\" */ abi_encode_struct_PackedUserOperation(expr_mpos_8, add(/** @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ _66, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _50)), /** @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ _66), _66, /** @src 86:3701:3715  \"minimalAccount\" */ _48)\n                        /// @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        if iszero(_67)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_15 := mload(_2)\n                            returndatacopy(pos_15, _4, returndatasize())\n                            revert(pos_15, returndatasize())\n                        }\n                        /// @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                        let expr_4 := _4\n                        if _67\n                        {\n                            let _68 := /** @src 86:3701:3715  \"minimalAccount\" */ _48\n                            /// @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                            if gt(/** @src 86:3701:3715  \"minimalAccount\" */ _48, /** @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ returndatasize()) { _68 := returndatasize() }\n                            finalize_allocation(_66, _68)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\" */ add(_66, _68), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _66), /** @src 86:3701:3715  \"minimalAccount\" */ _48)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:4253:4329  \"IEntryPoint(helperConfig.getConfig().entryPoint).getUserOpHash(packedUserOp)\"\n                            expr_4 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_66)\n                        }\n                        /// @src 86:962:966  \"1e18\"\n                        let value_4 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ shr(8, sload(/** @src 86:4162:4174  \"helperConfig\" */ 0x1f)), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:4420:4444  \"helperConfig.getConfig()\"\n                        let _69 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4420:4444  \"helperConfig.getConfig()\"\n                        mstore(_69, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _57)\n                        /// @src 86:4420:4444  \"helperConfig.getConfig()\"\n                        let _70 := call(gas(), value_4, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:4420:4444  \"helperConfig.getConfig()\" */ _69, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:4420:4444  \"helperConfig.getConfig()\" */ _69, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:4420:4444  \"helperConfig.getConfig()\"\n                        if iszero(_70)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_16 := mload(_2)\n                            returndatacopy(pos_16, _4, returndatasize())\n                            revert(pos_16, returndatasize())\n                        }\n                        /// @src 86:4420:4444  \"helperConfig.getConfig()\"\n                        let expr_mpos_10 := _4\n                        if _70\n                        {\n                            let _71 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:4420:4444  \"helperConfig.getConfig()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:4420:4444  \"helperConfig.getConfig()\" */ returndatasize()) { _71 := returndatasize() }\n                            finalize_allocation(_69, _71)\n                            expr_mpos_10 := abi_decode_struct_NetworkConfig_fromMemory(_69, add(_69, _71))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_11 := and(/** @src 86:962:966  \"1e18\" */ mload(/** @src 86:4420:4455  \"helperConfig.getConfig().entryPoint\" */ expr_mpos_10), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        let _72 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\"\n                        if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _72))\n                        /// @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\"\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\"\n                        let _73 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\"\n                        mstore(_73, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xca669fa7))\n                        mstore(/** @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\" */ add(_73, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_11)\n                        /// @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\"\n                        let _74 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _72, _4, /** @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\" */ _73, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _50, /** @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\" */ _73, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\"\n                        if iszero(_74)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_17 := mload(_2)\n                            returndatacopy(pos_17, _4, returndatasize())\n                            revert(pos_17, returndatasize())\n                        }\n                        /// @src 86:4403:4457  \"vm.prank(address(helperConfig.getConfig().entryPoint))\"\n                        if _74\n                        {\n                            finalize_allocation_21467(_73)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_12 := and(sload(/** @src 86:3701:3715  \"minimalAccount\" */ _48), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _47)\n                        /// @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\"\n                        let _75 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\"\n                        mstore(_75, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x06608bdf))\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        mstore(/** @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\" */ add(_75, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 86:962:966  \"1e18\" */ 96)\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let tail := abi_encode_struct_PackedUserOperation(expr_mpos_8, add(/** @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\" */ _75, /** @src 86:962:966  \"1e18\" */ 100))\n                        mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\" */ _75, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _50), /** @src 86:962:966  \"1e18\" */ expr_4)\n                        mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\" */ _75, /** @src 86:962:966  \"1e18\" */ 68), _53)\n                        /// @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\"\n                        let _76 := call(gas(), cleaned_12, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\" */ _75, sub(tail, _75), _75, /** @src 86:3701:3715  \"minimalAccount\" */ _48)\n                        /// @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\"\n                        if iszero(_76)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_18 := mload(_2)\n                            returndatacopy(pos_18, _4, returndatasize())\n                            revert(pos_18, returndatasize())\n                        }\n                        /// @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\"\n                        let expr_5 := _4\n                        if _76\n                        {\n                            let _77 := /** @src 86:3701:3715  \"minimalAccount\" */ _48\n                            /// @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\"\n                            if gt(/** @src 86:3701:3715  \"minimalAccount\" */ _48, /** @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\" */ returndatasize()) { _77 := returndatasize() }\n                            finalize_allocation(_75, _77)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\" */ add(_75, _77), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _75), /** @src 86:3701:3715  \"minimalAccount\" */ _48)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:4493:4576  \"minimalAccount.validateUserOp(packedUserOp, userOperationHash, missingAccountFunds)\"\n                            expr_5 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_75)\n                        }\n                        /// @src 86:4587:4614  \"assertEq(validationData, 0)\"\n                        fun_assertEq_21466(expr_5)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        return(_4, _4)\n                    }\n                    case 0x1ed7831c {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_19 := mload(_2)\n                        let pos_20 := pos_19\n                        let length := sload(/** @src 21:3018:3034  \"_excludedSenders\" */ 0x16)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_19, length)\n                        let _78 := 0x20\n                        pos_19 := add(pos_19, 0x20)\n                        mstore(_4, /** @src 21:3018:3034  \"_excludedSenders\" */ 0x16)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr := 97789825912453899259273410636466998099043528421815129078110847000656284369545\n                        let i := _4\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            mstore(pos_19, and(sload(srcPtr), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            pos_19 := add(pos_19, _78)\n                            srcPtr := add(srcPtr, 1)\n                        }\n                        finalize_allocation(pos_20, sub(pos_19, pos_20))\n                        let memPos := mload(_2)\n                        return(memPos, sub(abi_encode_array_address_dyn(memPos, pos_20), memPos))\n                    }\n                    case 0x1fd6142a {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _79 := sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_13 := and(sload(/** @src 86:1550:1554  \"usdc\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _79)\n                        /// @src 86:1573:1587  \"minimalAccount\"\n                        let _80 := 0x20\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_14 := and(sload(/** @src 86:1573:1587  \"minimalAccount\" */ _80), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _79)\n                        /// @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _81 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        let _82 := shl(224, 0x70a08231)\n                        /// @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_81, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _82)\n                        mstore(/** @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\" */ add(_81, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_14)\n                        /// @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _83 := staticcall(gas(), cleaned_13, _81, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36, /** @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\" */ _81, /** @src 86:1573:1587  \"minimalAccount\" */ _80)\n                        /// @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_83)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_21 := mload(_2)\n                            returndatacopy(pos_21, _4, returndatasize())\n                            revert(pos_21, returndatasize())\n                        }\n                        /// @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr_6 := _4\n                        if _83\n                        {\n                            let _84 := /** @src 86:1573:1587  \"minimalAccount\" */ _80\n                            /// @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 86:1573:1587  \"minimalAccount\" */ _80, /** @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _84 := returndatasize() }\n                            finalize_allocation(_81, _84)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\" */ add(_81, _84), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _81), /** @src 86:1573:1587  \"minimalAccount\" */ _80)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:1550:1589  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr_6 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_81)\n                        }\n                        /// @src 86:1541:1593  \"assertEq(usdc.balanceOf(address(minimalAccount)), 0)\"\n                        fun_assertEq_21466(expr_6)\n                        /// @src 86:1699:1778  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_11 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1699:1778  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        mstore(add(expr_mpos_11, /** @src 86:1573:1587  \"minimalAccount\" */ _80), /** @src 86:2786:2809  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:1699:1778  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\" */ add(expr_mpos_11, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), cleaned_14)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:1699:1778  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\" */ expr_mpos_11, /** @src 86:962:966  \"1e18\" */ 68), 0x0de0b6b3a7640000)\n                        /// @src 86:1699:1778  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_11, /** @src 86:962:966  \"1e18\" */ 68)\n                        /// @src 86:1699:1778  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_31488(expr_mpos_11)\n                        /// @src 86:1816:1838  \"minimalAccount.owner()\"\n                        let _85 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1816:1838  \"minimalAccount.owner()\"\n                        mstore(_85, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x8da5cb5b))\n                        /// @src 86:1816:1838  \"minimalAccount.owner()\"\n                        let _86 := staticcall(gas(), cleaned_14, _85, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:1816:1838  \"minimalAccount.owner()\" */ _85, /** @src 86:1573:1587  \"minimalAccount\" */ _80)\n                        /// @src 86:1816:1838  \"minimalAccount.owner()\"\n                        if iszero(_86)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_22 := mload(_2)\n                            returndatacopy(pos_22, _4, returndatasize())\n                            revert(pos_22, returndatasize())\n                        }\n                        /// @src 86:1816:1838  \"minimalAccount.owner()\"\n                        let expr_7 := _4\n                        if _86\n                        {\n                            let _87 := /** @src 86:1573:1587  \"minimalAccount\" */ _80\n                            /// @src 86:1816:1838  \"minimalAccount.owner()\"\n                            if gt(/** @src 86:1573:1587  \"minimalAccount\" */ _80, /** @src 86:1816:1838  \"minimalAccount.owner()\" */ returndatasize()) { _87 := returndatasize() }\n                            finalize_allocation(_85, _87)\n                            /// @src 86:962:966  \"1e18\"\n                            if slt(sub(/** @src 86:1816:1838  \"minimalAccount.owner()\" */ add(_85, _87), /** @src 86:962:966  \"1e18\" */ _85), /** @src 86:1573:1587  \"minimalAccount\" */ _80)\n                            /// @src 86:962:966  \"1e18\"\n                            {\n                                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                                revert(_4, _4)\n                            }\n                            /// @src 86:1816:1838  \"minimalAccount.owner()\"\n                            expr_7 := /** @src 86:962:966  \"1e18\" */ abi_decode_address_fromMemory(_85)\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _88 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\"\n                        if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _88))\n                        /// @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\"\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\"\n                        let _89 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\"\n                        mstore(_89, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xca669fa7))\n                        mstore(/** @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\" */ add(_89, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), and(expr_7, _79))\n                        /// @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\"\n                        let _90 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _88, _4, /** @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\" */ _89, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36, /** @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\" */ _89, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\"\n                        if iszero(_90)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_23 := mload(_2)\n                            returndatacopy(pos_23, _4, returndatasize())\n                            revert(pos_23, returndatasize())\n                        }\n                        /// @src 86:1807:1839  \"vm.prank(minimalAccount.owner())\"\n                        if _90\n                        {\n                            finalize_allocation_21467(_89)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_15 := and(sload(/** @src 86:1573:1587  \"minimalAccount\" */ _80), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _79)\n                        /// @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\"\n                        if iszero(extcodesize(cleaned_15))\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\"\n                        let _91 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\"\n                        mstore(_91, /** @src 86:2908:2939  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\" */ add(_91, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_13)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\" */ _91, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), _4)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\" */ _91, /** @src 86:962:966  \"1e18\" */ 68), 96)\n                        /// @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\"\n                        let _92 := call(gas(), cleaned_15, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\" */ _91, sub(/** @src 86:962:966  \"1e18\" */ abi_encode_string(expr_mpos_11, add(/** @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\" */ _91, /** @src 86:962:966  \"1e18\" */ 100)), /** @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\" */ _91), _91, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\"\n                        if iszero(_92)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_24 := mload(_2)\n                            returndatacopy(pos_24, _4, returndatasize())\n                            revert(pos_24, returndatasize())\n                        }\n                        /// @src 86:1850:1897  \"minimalAccount.execute(dest,value,functionData)\"\n                        if _92\n                        {\n                            finalize_allocation_21467(_91)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_16 := and(sload(/** @src 86:1550:1554  \"usdc\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _79)\n                        let cleaned_17 := and(sload(/** @src 86:1573:1587  \"minimalAccount\" */ _80), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _79)\n                        /// @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _93 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_93, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _82)\n                        mstore(/** @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\" */ add(_93, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_17)\n                        /// @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _94 := staticcall(gas(), cleaned_16, _93, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36, /** @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\" */ _93, /** @src 86:1573:1587  \"minimalAccount\" */ _80)\n                        /// @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_94)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_25 := mload(_2)\n                            returndatacopy(pos_25, _4, returndatasize())\n                            revert(pos_25, returndatasize())\n                        }\n                        /// @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr_8 := _4\n                        if _94\n                        {\n                            let _95 := /** @src 86:1573:1587  \"minimalAccount\" */ _80\n                            /// @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 86:1573:1587  \"minimalAccount\" */ _80, /** @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _95 := returndatasize() }\n                            finalize_allocation(_93, _95)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\" */ add(_93, _95), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _93), /** @src 86:1573:1587  \"minimalAccount\" */ _80)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:1938:1977  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr_8 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_93)\n                        }\n                        /// @src 86:1978:1984  \"AMOUNT\"\n                        fun_assertEq(expr_8)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        return(_4, _4)\n                    }\n                    case 0x2ade3880 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_1 := sload(/** @src 21:3948:3967  \"_targetedInterfaces\" */ 0x1e)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _96 := array_allocation_size_array_struct_FuzzInterface_dyn(length_1)\n                        /// @src 86:962:966  \"1e18\"\n                        let memPtr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:962:966  \"1e18\"\n                        finalize_allocation(memPtr, _96)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(memPtr, length_1)\n                        let mpos := memPtr\n                        let _97 := 0x20\n                        mpos := add(memPtr, _97)\n                        let mpos_1 := mpos\n                        mstore(_4, /** @src 21:3948:3967  \"_targetedInterfaces\" */ 0x1e)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let spos := 36516136433507714556481507284757523525550975291680945358964353894568634540880\n                        let i_1 := _4\n                        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n                        {\n                            /// @src 86:962:966  \"1e18\"\n                            let memPtr_1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                            /// @src 86:962:966  \"1e18\"\n                            finalize_allocation_21475(memPtr_1)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(memPtr_1, and(sload(spos), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let _98 := 1\n                            let _99 := add(spos, _98)\n                            let length_2 := sload(_99)\n                            let _100 := array_allocation_size_array_struct_FuzzInterface_dyn(length_2)\n                            /// @src 86:962:966  \"1e18\"\n                            let memPtr_2 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                            /// @src 86:962:966  \"1e18\"\n                            finalize_allocation(memPtr_2, _100)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(memPtr_2, length_2)\n                            let mpos_2 := memPtr_2\n                            mpos_2 := add(memPtr_2, _97)\n                            mstore(0, _99)\n                            let spos_1 := keccak256(0, _97)\n                            let i_2 := 0\n                            for { } lt(i_2, length_2) { i_2 := add(i_2, _98) }\n                            {\n                                mstore(mpos_2, copy_array_from_storage_to_memory_string(spos_1))\n                                mpos_2 := add(mpos_2, _97)\n                                spos_1 := add(spos_1, _98)\n                            }\n                            mstore(add(memPtr_1, _97), memPtr_2)\n                            mstore(mpos, memPtr_1)\n                            mpos := add(mpos, _97)\n                            spos := add(spos, 2)\n                        }\n                        let memPos_1 := mload(_2)\n                        let tail_1 := add(memPos_1, _97)\n                        mstore(memPos_1, _97)\n                        let pos_26 := tail_1\n                        let length_3 := mload(memPtr)\n                        mstore(tail_1, length_3)\n                        pos_26 := add(memPos_1, _2)\n                        let _101 := 5\n                        let tail_2 := add(add(memPos_1, shl(5, length_3)), _2)\n                        let srcPtr_1 := mpos_1\n                        let i_3 := _4\n                        for { } lt(i_3, length_3) { i_3 := add(i_3, 1) }\n                        {\n                            mstore(pos_26, add(sub(tail_2, memPos_1), not(63)))\n                            let _102 := mload(srcPtr_1)\n                            let tail_3 := add(tail_2, _2)\n                            mstore(tail_2, and(mload(_102), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let memberValue0 := mload(add(_102, _97))\n                            mstore(add(tail_2, _97), _2)\n                            let pos_27 := tail_3\n                            let length_4 := mload(memberValue0)\n                            mstore(tail_3, length_4)\n                            let _103 := 96\n                            pos_27 := add(tail_2, _103)\n                            let tail_4 := add(add(tail_2, shl(_101, length_4)), _103)\n                            let srcPtr_2 := add(memberValue0, _97)\n                            let i_4 := _4\n                            for { } lt(i_4, length_4) { i_4 := add(i_4, 1) }\n                            {\n                                mstore(pos_27, add(sub(tail_4, tail_2), not(95)))\n                                tail_4 := abi_encode_string(mload(srcPtr_2), tail_4)\n                                srcPtr_2 := add(srcPtr_2, _97)\n                                pos_27 := add(pos_27, _97)\n                            }\n                            tail_2 := tail_4\n                            srcPtr_1 := add(srcPtr_1, _97)\n                            pos_26 := add(pos_26, _97)\n                        }\n                        return(memPos_1, sub(tail_2, memPos_1))\n                    }\n                    case 0x3e5e3c23 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_28 := mload(_2)\n                        let pos_29 := pos_28\n                        let length_5 := sload(/** @src 21:3794:3810  \"_targetedSenders\" */ 0x18)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_28, length_5)\n                        let _104 := 0x20\n                        pos_28 := add(pos_28, 0x20)\n                        mstore(_4, /** @src 21:3794:3810  \"_targetedSenders\" */ 0x18)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_3 := 80167465652159884487584418398737133515478493586045375474096367959472086682926\n                        let i_5 := _4\n                        for { } lt(i_5, length_5) { i_5 := add(i_5, 1) }\n                        {\n                            mstore(pos_28, and(sload(srcPtr_3), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            pos_28 := add(pos_28, _104)\n                            srcPtr_3 := add(srcPtr_3, 1)\n                        }\n                        finalize_allocation(pos_29, sub(pos_28, pos_29))\n                        let memPos_2 := mload(_2)\n                        return(memPos_2, sub(abi_encode_array_address_dyn(memPos_2, pos_29), memPos_2))\n                    }\n                    case 0x3f7286f4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_30 := mload(_2)\n                        let pos_31 := pos_30\n                        let length_6 := sload(/** @src 21:3501:3519  \"_targetedContracts\" */ 0x17)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_30, length_6)\n                        let _105 := 0x20\n                        pos_30 := add(pos_30, 0x20)\n                        mstore(_4, /** @src 21:3501:3519  \"_targetedContracts\" */ 0x17)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_4 := 89622809563556123081897041840816014639138942293158154584485133346364573191189\n                        let i_6 := _4\n                        for { } lt(i_6, length_6) { i_6 := add(i_6, 1) }\n                        {\n                            mstore(pos_30, and(sload(srcPtr_4), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            pos_30 := add(pos_30, _105)\n                            srcPtr_4 := add(srcPtr_4, 1)\n                        }\n                        finalize_allocation(pos_31, sub(pos_30, pos_31))\n                        let memPos_3 := mload(_2)\n                        return(memPos_3, sub(abi_encode_array_address_dyn(memPos_3, pos_31), memPos_3))\n                    }\n                    case 0x66d9a9a0 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_7 := sload(/** @src 21:3346:3372  \"_targetedArtifactSelectors\" */ 0x1b)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _106 := array_allocation_size_array_struct_FuzzInterface_dyn(length_7)\n                        /// @src 86:962:966  \"1e18\"\n                        let memPtr_3 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:962:966  \"1e18\"\n                        finalize_allocation(memPtr_3, _106)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(memPtr_3, length_7)\n                        let mpos_3 := memPtr_3\n                        let _107 := 0x20\n                        mpos_3 := add(memPtr_3, _107)\n                        let mpos_4 := mpos_3\n                        mstore(_4, /** @src 21:3346:3372  \"_targetedArtifactSelectors\" */ 0x1b)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let spos_2 := 26616959624788145501257665028759500958019551560565664426117466910078421933505\n                        let i_7 := _4\n                        for { } lt(i_7, length_7) { i_7 := add(i_7, 1) }\n                        {\n                            /// @src 86:962:966  \"1e18\"\n                            let memPtr_4 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                            /// @src 86:962:966  \"1e18\"\n                            finalize_allocation_21475(memPtr_4)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(memPtr_4, copy_array_from_storage_to_memory_string(spos_2))\n                            mstore(add(memPtr_4, _107), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos_2, 1)))\n                            mstore(mpos_3, memPtr_4)\n                            mpos_3 := add(mpos_3, _107)\n                            spos_2 := add(spos_2, 2)\n                        }\n                        let memPos_4 := mload(_2)\n                        let tail_5 := add(memPos_4, _107)\n                        mstore(memPos_4, _107)\n                        let pos_32 := tail_5\n                        let length_8 := mload(memPtr_3)\n                        mstore(tail_5, length_8)\n                        pos_32 := add(memPos_4, _2)\n                        let tail_6 := add(add(memPos_4, shl(5, length_8)), _2)\n                        let srcPtr_5 := mpos_4\n                        let i_8 := _4\n                        for { } lt(i_8, length_8) { i_8 := add(i_8, 1) }\n                        {\n                            mstore(pos_32, add(sub(tail_6, memPos_4), not(63)))\n                            let _108 := mload(srcPtr_5)\n                            let memberValue0_1 := mload(_108)\n                            mstore(tail_6, _2)\n                            let tail_7 := abi_encode_string(memberValue0_1, add(tail_6, _2))\n                            let memberValue0_2 := mload(add(_108, _107))\n                            mstore(add(tail_6, _107), sub(tail_7, tail_6))\n                            tail_6 := abi_encode_array_bytes4_dyn(memberValue0_2, tail_7)\n                            srcPtr_5 := add(srcPtr_5, _107)\n                            pos_32 := add(pos_32, _107)\n                        }\n                        return(memPos_4, sub(tail_6, memPos_4))\n                    }\n                    case 0x85226c81 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_9 := sload(/** @src 21:3162:3180  \"_targetedArtifacts\" */ 0x1a)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _109 := array_allocation_size_array_struct_FuzzInterface_dyn(length_9)\n                        /// @src 86:962:966  \"1e18\"\n                        let memPtr_5 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:962:966  \"1e18\"\n                        finalize_allocation(memPtr_5, _109)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(memPtr_5, length_9)\n                        let mpos_5 := memPtr_5\n                        let _110 := 0x20\n                        mpos_5 := add(memPtr_5, 0x20)\n                        mstore(0, /** @src 21:3162:3180  \"_targetedArtifacts\" */ 0x1a)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let spos_3 := 2481041784956016742021570618494952475758789857281704946240779902470294861374\n                        let i_9 := 0\n                        for { } lt(i_9, length_9) { i_9 := add(i_9, 1) }\n                        {\n                            mstore(mpos_5, copy_array_from_storage_to_memory_string(spos_3))\n                            mpos_5 := add(mpos_5, _110)\n                            spos_3 := add(spos_3, 1)\n                        }\n                        let memPos_5 := mload(_2)\n                        return(memPos_5, sub(abi_encode_array_string_dyn(memPos_5, memPtr_5), memPos_5))\n                    }\n                    case 0x916a17c6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_10 := sload(/** @src 21:3653:3671  \"_targetedSelectors\" */ 0x1d)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _111 := array_allocation_size_array_struct_FuzzInterface_dyn(length_10)\n                        /// @src 86:962:966  \"1e18\"\n                        let memPtr_6 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:962:966  \"1e18\"\n                        finalize_allocation(memPtr_6, _111)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(memPtr_6, length_10)\n                        let mpos_6 := memPtr_6\n                        let _112 := 0x20\n                        mpos_6 := add(memPtr_6, 0x20)\n                        mstore(_4, /** @src 21:3653:3671  \"_targetedSelectors\" */ 0x1d)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let spos_4 := 49422300655976383518971161772042036479724517635858811238160587340303074464591\n                        let i_10 := _4\n                        for { } lt(i_10, length_10) { i_10 := add(i_10, 1) }\n                        {\n                            /// @src 86:962:966  \"1e18\"\n                            let memPtr_7 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                            /// @src 86:962:966  \"1e18\"\n                            finalize_allocation_21475(memPtr_7)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(memPtr_7, and(sload(spos_4), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(memPtr_7, _112), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos_4, 1)))\n                            mstore(mpos_6, memPtr_7)\n                            mpos_6 := add(mpos_6, _112)\n                            spos_4 := add(spos_4, 2)\n                        }\n                        let memPos_6 := mload(_2)\n                        return(memPos_6, sub(abi_encode_array_struct_FuzzSelector_dyn(memPos_6, memPtr_6), memPos_6))\n                    }\n                    case 0x91ec0a22 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _113 := sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_18 := and(sload(/** @src 86:4723:4727  \"usdc\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:4746:4760  \"minimalAccount\"\n                        let _114 := 0x20\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_19 := and(sload(/** @src 86:4746:4760  \"minimalAccount\" */ _114), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _115 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        let _116 := shl(224, 0x70a08231)\n                        /// @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_115, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _116)\n                        mstore(/** @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\" */ add(_115, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_19)\n                        let _117 := 36\n                        /// @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _118 := staticcall(gas(), cleaned_18, _115, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _117, /** @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\" */ _115, /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                        /// @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_118)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_33 := mload(_2)\n                            returndatacopy(pos_33, _4, returndatasize())\n                            revert(pos_33, returndatasize())\n                        }\n                        /// @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr_9 := _4\n                        if _118\n                        {\n                            let _119 := /** @src 86:4746:4760  \"minimalAccount\" */ _114\n                            /// @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 86:4746:4760  \"minimalAccount\" */ _114, /** @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _119 := returndatasize() }\n                            finalize_allocation(_115, _119)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\" */ add(_115, _119), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _115), /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:4723:4762  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr_9 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_115)\n                        }\n                        /// @src 86:4714:4766  \"assertEq(usdc.balanceOf(address(minimalAccount)), 0)\"\n                        fun_assertEq_21466(expr_9)\n                        /// @src 86:4872:4952  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_12 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4872:4952  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(add(expr_mpos_12, /** @src 86:4746:4760  \"minimalAccount\" */ _114), /** @src 86:2786:2809  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:4872:4952  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ add(expr_mpos_12, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _117), cleaned_19)\n                        /// @src 86:962:966  \"1e18\"\n                        let _120 := 0x0de0b6b3a7640000\n                        mstore(add(/** @src 86:4872:4952  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ expr_mpos_12, /** @src 86:962:966  \"1e18\" */ 68), _120)\n                        /// @src 86:4872:4952  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_12, /** @src 86:962:966  \"1e18\" */ 68)\n                        /// @src 86:4872:4952  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_31488(expr_mpos_12)\n                        /// @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let expr_mpos_13 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        mstore(add(expr_mpos_13, /** @src 86:4746:4760  \"minimalAccount\" */ _114), /** @src 86:2908:2939  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_13, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _117), cleaned_18)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_13, /** @src 86:962:966  \"1e18\" */ 68), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:962:966  \"1e18\"\n                        let _121 := 96\n                        mstore(add(/** @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_13, /** @src 86:962:966  \"1e18\" */ 100), _121)\n                        /// @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        let _122 := sub(/** @src 86:962:966  \"1e18\" */ abi_encode_string(expr_mpos_12, add(/** @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_13, /** @src 86:962:966  \"1e18\" */ 132)), /** @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_13)\n                        mstore(expr_mpos_13, add(_122, /** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                        /// @src 86:4994:5076  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                        finalize_allocation(expr_mpos_13, _122)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_20 := and(/** @src 86:962:966  \"1e18\" */ sload(/** @src 86:5131:5147  \"sendPackedUserOp\" */ 0x22), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:962:966  \"1e18\"\n                        let _123 := sload(/** @src 86:5207:5219  \"helperConfig\" */ 0x1f)\n                        /// @src 86:5207:5231  \"helperConfig.getConfig()\"\n                        let _124 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        let _125 := shl(226, 0x30fe4275)\n                        /// @src 86:5207:5231  \"helperConfig.getConfig()\"\n                        mstore(_124, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _125)\n                        /// @src 86:5207:5231  \"helperConfig.getConfig()\"\n                        let _126 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ shr(8, _123), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113), _4, /** @src 86:5207:5231  \"helperConfig.getConfig()\" */ _124, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:5207:5231  \"helperConfig.getConfig()\" */ _124, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:5207:5231  \"helperConfig.getConfig()\"\n                        if iszero(_126)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_34 := mload(_2)\n                            returndatacopy(pos_34, _4, returndatasize())\n                            revert(pos_34, returndatasize())\n                        }\n                        /// @src 86:5207:5231  \"helperConfig.getConfig()\"\n                        let expr_mpos_14 := _4\n                        if _126\n                        {\n                            let _127 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:5207:5231  \"helperConfig.getConfig()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:5207:5231  \"helperConfig.getConfig()\" */ returndatasize()) { _127 := returndatasize() }\n                            finalize_allocation(_124, _127)\n                            expr_mpos_14 := abi_decode_struct_NetworkConfig_fromMemory(_124, add(_124, _127))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_21 := and(sload(/** @src 86:4746:4760  \"minimalAccount\" */ _114), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:5131:5257  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let _128 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:5131:5257  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        mstore(_128, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(225, 0x532ccd63))\n                        /// @src 86:5131:5257  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let _129 := staticcall(gas(), cleaned_20, _128, sub(abi_encode_bytes_struct_NetworkConfig_address(add(_128, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 86:5131:5257  \"sendPackedUserOp.generateSignedUserOperation(...\" */ expr_mpos_13, expr_mpos_14, cleaned_21), _128), _128, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:5131:5257  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        if iszero(_129)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_35 := mload(_2)\n                            returndatacopy(pos_35, _4, returndatasize())\n                            revert(pos_35, returndatasize())\n                        }\n                        /// @src 86:5131:5257  \"sendPackedUserOp.generateSignedUserOperation(...\"\n                        let expr_mpos_15 := _4\n                        if _129\n                        {\n                            let _130 := returndatasize()\n                            returndatacopy(_128, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:5131:5257  \"sendPackedUserOp.generateSignedUserOperation(...\" */ _130)\n                            finalize_allocation(_128, _130)\n                            expr_mpos_15 := abi_decode_struct_PackedUserOperation_fromMemory(_128, add(_128, _130))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _131 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\"\n                        if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _131))\n                        /// @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\"\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\"\n                        let _132 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\"\n                        mstore(_132, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xc88a5e6d))\n                        mstore(/** @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\" */ add(_132, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_21)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\" */ _132, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _117), /** @src 86:962:966  \"1e18\" */ _120)\n                        /// @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\"\n                        let _133 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _131, _4, /** @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\" */ _132, /** @src 86:962:966  \"1e18\" */ 68, /** @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\" */ _132, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\"\n                        if iszero(_133)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_36 := mload(_2)\n                            returndatacopy(pos_36, _4, returndatasize())\n                            revert(pos_36, returndatasize())\n                        }\n                        /// @src 86:5272:5310  \"vm.deal(address(minimalAccount), 1e18)\"\n                        if _133\n                        {\n                            finalize_allocation_21467(_132)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        /// @src 86:962:966  \"1e18\"\n                        let memPtr_8 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:962:966  \"1e18\"\n                        finalize_allocation_21475(memPtr_8)\n                        /// @src 86:5384:5385  \"1\"\n                        let _134 := 0x01\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(memPtr_8, /** @src 86:5384:5385  \"1\" */ 0x01)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let i_11 := _4\n                        for { }\n                        lt(i_11, /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        {\n                            i_11 := add(i_11, /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        {\n                            /// @src 86:962:966  \"1e18\"\n                            let memPtr_9 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                            /// @src 86:962:966  \"1e18\"\n                            finalize_allocation_21483(memPtr_9)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(memPtr_9, _4)\n                            mstore(add(memPtr_9, /** @src 86:4746:4760  \"minimalAccount\" */ _114), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                            mstore(add(memPtr_9, _2), /** @src 86:962:966  \"1e18\" */ _121)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(memPtr_9, /** @src 86:962:966  \"1e18\" */ _121), _121)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(memPtr_9, 128), _4)\n                            mstore(add(memPtr_9, 160), _4)\n                            mstore(add(memPtr_9, 192), _4)\n                            mstore(add(memPtr_9, _5), /** @src 86:962:966  \"1e18\" */ _121)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(memPtr_9, 256), /** @src 86:962:966  \"1e18\" */ _121)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(add(memPtr_8, i_11), /** @src 86:4746:4760  \"minimalAccount\" */ _114), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ memPtr_9)\n                        }\n                        /// @src 86:5397:5418  \"ops[0] = packedUserOp\"\n                        mstore(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr_8), expr_mpos_15)\n                        pop(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr_8))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_22 := and(sload(/** @src 86:5456:5466  \"randomUser\" */ 0x23), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:5447:5467  \"vm.prank(randomUser)\"\n                        if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _131))\n                        /// @src 86:5447:5467  \"vm.prank(randomUser)\"\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:5447:5467  \"vm.prank(randomUser)\"\n                        let _135 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:5447:5467  \"vm.prank(randomUser)\"\n                        mstore(_135, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xca669fa7))\n                        mstore(/** @src 86:5447:5467  \"vm.prank(randomUser)\" */ add(_135, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_22)\n                        /// @src 86:5447:5467  \"vm.prank(randomUser)\"\n                        let _136 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _131, _4, /** @src 86:5447:5467  \"vm.prank(randomUser)\" */ _135, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _117, /** @src 86:5447:5467  \"vm.prank(randomUser)\" */ _135, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:5447:5467  \"vm.prank(randomUser)\"\n                        if iszero(_136)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_37 := mload(_2)\n                            returndatacopy(pos_37, _4, returndatasize())\n                            revert(pos_37, returndatasize())\n                        }\n                        /// @src 86:5447:5467  \"vm.prank(randomUser)\"\n                        if _136\n                        {\n                            finalize_allocation_21467(_135)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        /// @src 86:962:966  \"1e18\"\n                        let value_5 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ shr(8, sload(/** @src 86:5207:5219  \"helperConfig\" */ 0x1f)), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:5576:5600  \"helperConfig.getConfig()\"\n                        let _137 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:5576:5600  \"helperConfig.getConfig()\"\n                        mstore(_137, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _125)\n                        /// @src 86:5576:5600  \"helperConfig.getConfig()\"\n                        let _138 := call(gas(), value_5, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:5576:5600  \"helperConfig.getConfig()\" */ _137, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3, /** @src 86:5576:5600  \"helperConfig.getConfig()\" */ _137, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                        /// @src 86:5576:5600  \"helperConfig.getConfig()\"\n                        if iszero(_138)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_38 := mload(_2)\n                            returndatacopy(pos_38, _4, returndatasize())\n                            revert(pos_38, returndatasize())\n                        }\n                        /// @src 86:5576:5600  \"helperConfig.getConfig()\"\n                        let expr_mpos_16 := _4\n                        if _138\n                        {\n                            let _139 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2\n                            /// @src 86:5576:5600  \"helperConfig.getConfig()\"\n                            if gt(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 86:5576:5600  \"helperConfig.getConfig()\" */ returndatasize()) { _139 := returndatasize() }\n                            finalize_allocation(_137, _139)\n                            expr_mpos_16 := abi_decode_struct_NetworkConfig_fromMemory(_137, add(_137, _139))\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_23 := and(/** @src 86:962:966  \"1e18\" */ mload(/** @src 86:5576:5611  \"helperConfig.getConfig().entryPoint\" */ expr_mpos_16), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        let cleaned_24 := and(sload(/** @src 86:5456:5466  \"randomUser\" */ 0x23), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\"\n                        if iszero(extcodesize(cleaned_23))\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\"\n                        let _140 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\"\n                        mstore(_140, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x765e827f))\n                        let tail_8 := add(/** @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\" */ _140, /** @src 86:962:966  \"1e18\" */ 68)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\" */ add(_140, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), _2)\n                        let pos_39 := tail_8\n                        let length_11 := mload(memPtr_8)\n                        mstore(tail_8, length_11)\n                        pos_39 := add(/** @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\" */ _140, /** @src 86:962:966  \"1e18\" */ 100)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let tail_9 := add(add(/** @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\" */ _140, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(5, length_11)), /** @src 86:962:966  \"1e18\" */ 100)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_6 := add(memPtr_8, /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let i_12 := _4\n                        for { }\n                        lt(i_12, length_11)\n                        {\n                            i_12 := add(i_12, /** @src 86:5384:5385  \"1\" */ _134)\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        {\n                            mstore(pos_39, add(sub(tail_9, /** @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\" */ _140), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ not(99)))\n                            tail_9 := abi_encode_struct_PackedUserOperation(mload(srcPtr_6), tail_9)\n                            srcPtr_6 := add(srcPtr_6, /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            pos_39 := add(pos_39, /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                        }\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(add(/** @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\" */ _140, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _117), cleaned_24)\n                        /// @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\"\n                        let _141 := call(gas(), cleaned_23, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\" */ _140, sub(tail_9, _140), _140, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\"\n                        if iszero(_141)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_40 := mload(_2)\n                            returndatacopy(pos_40, _4, returndatasize())\n                            revert(pos_40, returndatasize())\n                        }\n                        /// @src 86:5564:5648  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(randomUser))\"\n                        if _141\n                        {\n                            finalize_allocation_21467(_140)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_25 := and(sload(/** @src 86:4723:4727  \"usdc\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        let cleaned_26 := and(sload(/** @src 86:4746:4760  \"minimalAccount\" */ _114), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _113)\n                        /// @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _142 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_142, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _116)\n                        mstore(/** @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\" */ add(_142, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_26)\n                        /// @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _143 := staticcall(gas(), cleaned_25, _142, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _117, /** @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\" */ _142, /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                        /// @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_143)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_41 := mload(_2)\n                            returndatacopy(pos_41, _4, returndatasize())\n                            revert(pos_41, returndatasize())\n                        }\n                        /// @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr_10 := _4\n                        if _143\n                        {\n                            let _144 := /** @src 86:4746:4760  \"minimalAccount\" */ _114\n                            /// @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 86:4746:4760  \"minimalAccount\" */ _114, /** @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _144 := returndatasize() }\n                            finalize_allocation(_142, _144)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\" */ add(_142, _144), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _142), /** @src 86:4746:4760  \"minimalAccount\" */ _114)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:5689:5728  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr_10 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_142)\n                        }\n                        /// @src 86:5729:5735  \"AMOUNT\"\n                        fun_assertEq(expr_10)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        return(_4, _4)\n                    }\n                    case 0xb0464fdc {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_12 := sload(/** @src 21:2876:2894  \"_excludedSelectors\" */ 0x1c)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _145 := array_allocation_size_array_struct_FuzzInterface_dyn(length_12)\n                        /// @src 86:962:966  \"1e18\"\n                        let memPtr_10 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:962:966  \"1e18\"\n                        finalize_allocation(memPtr_10, _145)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(memPtr_10, length_12)\n                        let mpos_7 := memPtr_10\n                        let _146 := 0x20\n                        mpos_7 := add(memPtr_10, 0x20)\n                        mstore(_4, /** @src 21:2876:2894  \"_excludedSelectors\" */ 0x1c)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let spos_5 := 6454973039698199198119942482240540643982028891330163610098731264865829167633\n                        let i_13 := _4\n                        for { } lt(i_13, length_12) { i_13 := add(i_13, 1) }\n                        {\n                            /// @src 86:962:966  \"1e18\"\n                            let memPtr_11 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                            /// @src 86:962:966  \"1e18\"\n                            finalize_allocation_21475(memPtr_11)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(memPtr_11, and(sload(spos_5), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            mstore(add(memPtr_11, _146), copy_array_from_storage_to_memory_array_bytes4_dyn(add(spos_5, 1)))\n                            mstore(mpos_7, memPtr_11)\n                            mpos_7 := add(mpos_7, _146)\n                            spos_5 := add(spos_5, 2)\n                        }\n                        let memPos_7 := mload(_2)\n                        return(memPos_7, sub(abi_encode_array_struct_FuzzSelector_dyn(memPos_7, memPtr_10), memPos_7))\n                    }\n                    case 0xb5508aa9 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let length_13 := sload(/** @src 21:2575:2593  \"_excludedArtifacts\" */ 0x19)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let _147 := array_allocation_size_array_struct_FuzzInterface_dyn(length_13)\n                        /// @src 86:962:966  \"1e18\"\n                        let memPtr_12 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:962:966  \"1e18\"\n                        finalize_allocation(memPtr_12, _147)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(memPtr_12, length_13)\n                        let mpos_8 := memPtr_12\n                        let _148 := 0x20\n                        mpos_8 := add(memPtr_12, 0x20)\n                        mstore(0, /** @src 21:2575:2593  \"_excludedArtifacts\" */ 0x19)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let spos_6 := 67072331549493647622825787457569556318728415786901242217649037894484240406165\n                        let i_14 := 0\n                        for { } lt(i_14, length_13) { i_14 := add(i_14, 1) }\n                        {\n                            mstore(mpos_8, copy_array_from_storage_to_memory_string(spos_6))\n                            mpos_8 := add(mpos_8, _148)\n                            spos_6 := add(spos_6, 1)\n                        }\n                        let memPos_8 := mload(_2)\n                        return(memPos_8, sub(abi_encode_array_string_dyn(memPos_8, memPtr_12), memPos_8))\n                    }\n                    case 0xba414fa6 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let ret := fun_failed()\n                        let memPos_9 := mload(_2)\n                        mstore(memPos_9, iszero(iszero(ret)))\n                        return(memPos_9, 32)\n                    }\n                    case 0xe20c9f71 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let pos_42 := mload(_2)\n                        let pos_43 := pos_42\n                        let length_14 := sload(/** @src 21:2723:2741  \"_excludedContracts\" */ 0x15)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(pos_42, length_14)\n                        let _149 := 0x20\n                        pos_42 := add(pos_42, 0x20)\n                        mstore(_4, /** @src 21:2723:2741  \"_excludedContracts\" */ 0x15)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let srcPtr_7 := 38878206584692966203415385907871375197469080758325516314230789535345649042549\n                        let i_15 := _4\n                        for { } lt(i_15, length_14) { i_15 := add(i_15, 1) }\n                        {\n                            mstore(pos_42, and(sload(srcPtr_7), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            pos_42 := add(pos_42, _149)\n                            srcPtr_7 := add(srcPtr_7, 1)\n                        }\n                        finalize_allocation(pos_43, sub(pos_42, pos_43))\n                        let memPos_10 := mload(_2)\n                        return(memPos_10, sub(abi_encode_array_address_dyn(memPos_10, pos_43), memPos_10))\n                    }\n                    case 0xf1b3f9fb {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let _150 := sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_27 := and(sload(/** @src 86:2091:2095  \"usdc\" */ 0x21), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _150)\n                        /// @src 86:2114:2128  \"minimalAccount\"\n                        let _151 := 0x20\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_28 := and(sload(/** @src 86:2114:2128  \"minimalAccount\" */ _151), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _150)\n                        /// @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _152 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\"\n                        mstore(_152, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\" */ add(_152, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_28)\n                        /// @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\"\n                        let _153 := staticcall(gas(), cleaned_27, _152, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36, /** @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\" */ _152, /** @src 86:2114:2128  \"minimalAccount\" */ _151)\n                        /// @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\"\n                        if iszero(_153)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_44 := mload(_2)\n                            returndatacopy(pos_44, _4, returndatasize())\n                            revert(pos_44, returndatasize())\n                        }\n                        /// @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\"\n                        let expr_11 := _4\n                        if _153\n                        {\n                            let _154 := /** @src 86:2114:2128  \"minimalAccount\" */ _151\n                            /// @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\"\n                            if gt(/** @src 86:2114:2128  \"minimalAccount\" */ _151, /** @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\" */ returndatasize()) { _154 := returndatasize() }\n                            finalize_allocation(_152, _154)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if slt(sub(/** @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\" */ add(_152, _154), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _152), /** @src 86:2114:2128  \"minimalAccount\" */ _151)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            { revert(0, 0) }\n                            /// @src 86:2091:2130  \"usdc.balanceOf(address(minimalAccount))\"\n                            expr_11 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_152)\n                        }\n                        /// @src 86:2082:2134  \"assertEq(usdc.balanceOf(address(minimalAccount)), 0)\"\n                        fun_assertEq_21466(expr_11)\n                        /// @src 86:2240:2319  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        let expr_mpos_17 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2240:2319  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        mstore(add(expr_mpos_17, /** @src 86:2114:2128  \"minimalAccount\" */ _151), /** @src 86:2786:2809  \"ERC20Mock.mint.selector\" */ shl(224, 0x40c10f19))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:2240:2319  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\" */ add(expr_mpos_17, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), cleaned_28)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:2240:2319  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\" */ expr_mpos_17, /** @src 86:962:966  \"1e18\" */ 68), 0x0de0b6b3a7640000)\n                        /// @src 86:2240:2319  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        mstore(expr_mpos_17, /** @src 86:962:966  \"1e18\" */ 68)\n                        /// @src 86:2240:2319  \"abi.encodeWithSelector(ERC20Mock.mint.selector,address(minimalAccount), AMOUNT)\"\n                        finalize_allocation_31488(expr_mpos_17)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let cleaned_29 := and(sload(/** @src 86:2357:2367  \"randomUser\" */ 0x23), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _150)\n                        let _155 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                        /// @src 86:2348:2368  \"vm.prank(randomUser)\"\n                        if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _155))\n                        /// @src 86:2348:2368  \"vm.prank(randomUser)\"\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:2348:2368  \"vm.prank(randomUser)\"\n                        let _156 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2348:2368  \"vm.prank(randomUser)\"\n                        mstore(_156, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0xca669fa7))\n                        mstore(/** @src 86:2348:2368  \"vm.prank(randomUser)\" */ add(_156, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_29)\n                        /// @src 86:2348:2368  \"vm.prank(randomUser)\"\n                        let _157 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _155, _4, /** @src 86:2348:2368  \"vm.prank(randomUser)\" */ _156, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36, /** @src 86:2348:2368  \"vm.prank(randomUser)\" */ _156, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:2348:2368  \"vm.prank(randomUser)\"\n                        if iszero(_157)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_45 := mload(_2)\n                            returndatacopy(pos_45, _4, returndatasize())\n                            revert(pos_45, returndatasize())\n                        }\n                        /// @src 86:2348:2368  \"vm.prank(randomUser)\"\n                        if _157\n                        {\n                            finalize_allocation_21467(_156)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        /// @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\"\n                        if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _155))\n                        /// @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\"\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\"\n                        let _158 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\"\n                        mstore(_158, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(229, 0x0618f587))\n                        mstore(/** @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\" */ add(_158, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), /** @src 86:2395:2459  \"MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector\" */ shl(227, 0x0a1c585d))\n                        /// @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\"\n                        let _159 := call(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _155, _4, /** @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\" */ _158, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36, /** @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\" */ _158, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\"\n                        if iszero(_159)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_46 := mload(_2)\n                            returndatacopy(pos_46, _4, returndatasize())\n                            revert(pos_46, returndatasize())\n                        }\n                        /// @src 86:2379:2460  \"vm.expectRevert(MinimalAccount.MinimalAccount__NotFromEntryPointOrOwner.selector)\"\n                        if _159\n                        {\n                            finalize_allocation_21467(_158)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        let cleaned_30 := and(sload(/** @src 86:2114:2128  \"minimalAccount\" */ _151), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _150)\n                        /// @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\"\n                        if iszero(extcodesize(cleaned_30))\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            revert(_4, _4)\n                        }\n                        /// @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\"\n                        let _160 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_2)\n                        /// @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\"\n                        mstore(_160, /** @src 86:2908:2939  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        mstore(/** @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\" */ add(_160, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _3), cleaned_27)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\" */ _160, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), _4)\n                        /// @src 86:962:966  \"1e18\"\n                        mstore(add(/** @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\" */ _160, /** @src 86:962:966  \"1e18\" */ 68), 96)\n                        /// @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\"\n                        let _161 := call(gas(), cleaned_30, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4, /** @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\" */ _160, sub(/** @src 86:962:966  \"1e18\" */ abi_encode_string(expr_mpos_17, add(/** @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\" */ _160, /** @src 86:962:966  \"1e18\" */ 100)), /** @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\" */ _160), _160, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _4)\n                        /// @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\"\n                        if iszero(_161)\n                        {\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            let pos_47 := mload(_2)\n                            returndatacopy(pos_47, _4, returndatasize())\n                            revert(pos_47, returndatasize())\n                        }\n                        /// @src 86:2471:2518  \"minimalAccount.execute(dest,value,functionData)\"\n                        if _161\n                        {\n                            finalize_allocation_21467(_160)\n                            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                            if _4 { revert(_4, _4) }\n                        }\n                        return(_4, _4)\n                    }\n                    case 0xfa7626d4 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        let value_6 := and(sload(/** @src 28:1016:1042  \"bool public IS_TEST = true\" */ 31), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0xff)\n                        let memPos_11 := mload(_2)\n                        mstore(memPos_11, iszero(iszero(value_6)))\n                        return(memPos_11, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_array_address_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, 32)\n                mstore(headStart, 32)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let srcPtr := add(value0, 32)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                tail := pos\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n                end := add(add(pos, and(add(length, 31), /** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31))), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0x20)\n            }\n            function abi_encode_array_bytes4_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                let _1 := 0x20\n                pos := add(pos, 0x20)\n                let srcPtr := add(value, 0x20)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, and(mload(srcPtr), shl(224, 0xffffffff)))\n                    pos := add(pos, _1)\n                    srcPtr := add(srcPtr, _1)\n                }\n                end := pos\n            }\n            function abi_encode_array_string_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, 32)\n                mstore(headStart, 32)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                pos := add(headStart, 64)\n                let tail_2 := add(add(headStart, shl(5, length)), 64)\n                let srcPtr := add(value0, 32)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    tail_2 := abi_encode_string(mload(srcPtr), tail_2)\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function abi_encode_array_struct_FuzzSelector_dyn(headStart, value0) -> tail\n            {\n                let _1 := 32\n                let tail_1 := add(headStart, _1)\n                mstore(headStart, _1)\n                let pos := tail_1\n                let length := mload(value0)\n                mstore(tail_1, length)\n                let _2 := 64\n                pos := add(headStart, 64)\n                let tail_2 := add(add(headStart, shl(5, length)), 64)\n                let srcPtr := add(value0, _1)\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail_2, headStart), not(63)))\n                    let _3 := mload(srcPtr)\n                    mstore(tail_2, and(mload(_3), sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    let memberValue0 := mload(add(_3, _1))\n                    mstore(add(tail_2, _1), _2)\n                    tail_2 := abi_encode_array_bytes4_dyn(memberValue0, add(tail_2, _2))\n                    srcPtr := add(srcPtr, _1)\n                    pos := add(pos, _1)\n                }\n                tail := tail_2\n            }\n            function finalize_allocation_21467(memPtr)\n            {\n                if gt(memPtr, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, memPtr)\n            }\n            function finalize_allocation_21475(memPtr)\n            {\n                let newFreePtr := add(memPtr, 64)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_21483(memPtr)\n            {\n                let newFreePtr := add(memPtr, 288)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation_31488(memPtr)\n            {\n                let newFreePtr := add(memPtr, 128)\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), /** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)))\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            /// @src 86:962:966  \"1e18\"\n            function abi_decode_address_fromMemory(offset) -> value\n            {\n                value := mload(offset)\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                if iszero(eq(value, and(value, sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1))))\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                { revert(0, 0) }\n            }\n            /// @src 86:962:966  \"1e18\"\n            function abi_decode_struct_NetworkConfig_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                let memPtr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 86:962:966  \"1e18\" */ 64)\n                finalize_allocation_21475(memPtr)\n                mstore(memPtr, abi_decode_address_fromMemory(headStart))\n                mstore(add(memPtr, 32), abi_decode_address_fromMemory(add(headStart, 32)))\n                value0 := memPtr\n            }\n            function abi_decode_bytes_fromMemory(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                let _1 := mload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0x24)\n                }\n                /// @src 86:962:966  \"1e18\"\n                let memPtr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 86:962:966  \"1e18\"\n                finalize_allocation(memPtr, add(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(add(/** @src 86:962:966  \"1e18\" */ _1, 0x1f), /** @src 86:2763:2843  \"abi.encodeWithSelector(ERC20Mock.mint.selector, address(minimalAccount), AMOUNT)\" */ not(31)), /** @src 86:962:966  \"1e18\" */ 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                copy_memory_to_memory_with_cleanup(add(offset, 0x20), add(memPtr, 0x20), _1)\n                array := memPtr\n            }\n            function abi_decode_struct_PackedUserOperation_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                let offset := mload(headStart)\n                let _1 := 0xffffffffffffffff\n                if gt(offset, _1)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                let _2 := add(headStart, offset)\n                if slt(sub(dataEnd, _2), 0x0120)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                let memPtr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 86:962:966  \"1e18\"\n                finalize_allocation_21483(memPtr)\n                mstore(memPtr, abi_decode_address_fromMemory(_2))\n                mstore(add(memPtr, 32), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 86:962:966  \"1e18\" */ add(_2, 32)))\n                let offset_1 := mload(add(_2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 64))\n                /// @src 86:962:966  \"1e18\"\n                if gt(offset_1, _1)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                mstore(add(memPtr, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 64), /** @src 86:962:966  \"1e18\" */ abi_decode_bytes_fromMemory(add(_2, offset_1), dataEnd))\n                let offset_2 := mload(add(_2, 96))\n                if gt(offset_2, _1)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                mstore(add(memPtr, 96), abi_decode_bytes_fromMemory(add(_2, offset_2), dataEnd))\n                mstore(add(memPtr, 128), mload(add(_2, 128)))\n                mstore(add(memPtr, 160), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 86:962:966  \"1e18\" */ add(_2, 160)))\n                mstore(add(memPtr, 192), mload(add(_2, 192)))\n                let offset_3 := mload(add(_2, 224))\n                if gt(offset_3, _1)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                mstore(add(memPtr, 224), abi_decode_bytes_fromMemory(add(_2, offset_3), dataEnd))\n                let _3 := 256\n                let offset_4 := mload(add(_2, _3))\n                if gt(offset_4, _1)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 86:962:966  \"1e18\"\n                mstore(add(memPtr, _3), abi_decode_bytes_fromMemory(add(_2, offset_4), dataEnd))\n                value0 := memPtr\n            }\n            function abi_encode_bytes_struct_NetworkConfig_address(headStart, value0, value1, value2) -> tail\n            {\n                mstore(headStart, 128)\n                tail := abi_encode_string(value0, add(headStart, 128))\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let _1 := sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                mstore(/** @src 86:962:966  \"1e18\" */ add(headStart, 32), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ mload(value1), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _1))\n                mstore(/** @src 86:962:966  \"1e18\" */ add(headStart, 64), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 86:962:966  \"1e18\" */ mload(add(value1, 32)), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _1))\n                mstore(/** @src 86:962:966  \"1e18\" */ add(headStart, 96), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(value2, _1))\n            }\n            /// @src 86:962:966  \"1e18\"\n            function abi_encode_struct_PackedUserOperation(value, pos) -> end\n            {\n                let _1 := 0x0120\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                mstore(pos, and(/** @src 86:962:966  \"1e18\" */ mload(value), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                /// @src 86:962:966  \"1e18\"\n                mstore(add(pos, 0x20), mload(add(value, 0x20)))\n                let memberValue0 := mload(add(value, 0x40))\n                mstore(add(pos, 0x40), _1)\n                let tail := abi_encode_string(memberValue0, add(pos, _1))\n                let memberValue0_1 := mload(add(value, 0x60))\n                mstore(add(pos, 0x60), sub(tail, pos))\n                let tail_1 := abi_encode_string(memberValue0_1, tail)\n                mstore(add(pos, 0x80), mload(add(value, 0x80)))\n                mstore(add(pos, 0xa0), mload(add(value, 0xa0)))\n                mstore(add(pos, 0xc0), mload(add(value, 0xc0)))\n                let memberValue0_2 := mload(add(value, 0xe0))\n                mstore(add(pos, 0xe0), sub(tail_1, pos))\n                let tail_2 := abi_encode_string(memberValue0_2, tail_1)\n                let _2 := 0x0100\n                let memberValue0_3 := mload(add(value, _2))\n                mstore(add(pos, _2), sub(tail_2, pos))\n                end := abi_encode_string(memberValue0_3, tail_2)\n            }\n            /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n            function array_allocation_size_array_struct_FuzzInterface_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(shl(5, length), 0x20)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let slotValue := sload(slot)\n                let length := /** @src -1:-1:-1 */ ret\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let _1 := 1\n                length := shr(1, slotValue)\n                let outOfPlaceEncoding := and(slotValue, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                let _2 := 32\n                if eq(outOfPlaceEncoding, lt(length, _2))\n                {\n                    mstore(/** @src -1:-1:-1 */ ret, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(/** @src -1:-1:-1 */ ret, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0x24)\n                }\n                mstore(memPtr, length)\n                switch outOfPlaceEncoding\n                case 0 {\n                    mstore(add(memPtr, _2), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), _2)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    for { } lt(i, length) { i := add(i, _2) }\n                    {\n                        mstore(add(add(memPtr, i), _2), sload(dataPos))\n                        dataPos := add(dataPos, _1)\n                    }\n                    ret := add(add(memPtr, i), _2)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function copy_array_from_storage_to_memory_array_bytes4_dyn(slot) -> memPtr\n            {\n                let _1 := 64\n                memPtr := mload(64)\n                let pos := memPtr\n                let length := sload(slot)\n                mstore(memPtr, length)\n                let _2 := 0x20\n                pos := add(memPtr, _2)\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ slot)\n                let srcPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                let itemCounter := /** @src -1:-1:-1 */ 0\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                for { }\n                lt(add(itemCounter, 7), length)\n                {\n                    itemCounter := add(itemCounter, 8)\n                }\n                {\n                    let data := sload(srcPtr)\n                    let _3 := shl(224, 0xffffffff)\n                    let _4 := 224\n                    mstore(pos, and(shl(_4, data), _3))\n                    let _5 := 192\n                    mstore(add(pos, _2), and(shl(_5, data), _3))\n                    let _6 := 160\n                    mstore(add(pos, _1), and(shl(_6, data), _3))\n                    let _7 := 96\n                    let _8 := 128\n                    mstore(add(pos, _7), and(shl(_8, data), _3))\n                    mstore(add(pos, _8), and(shl(_7, data), _3))\n                    mstore(add(pos, _6), and(shl(_1, data), _3))\n                    mstore(add(pos, _5), and(shl(_2, data), _3))\n                    mstore(add(pos, _4), and(data, _3))\n                    pos := add(pos, 256)\n                    srcPtr := add(srcPtr, 1)\n                }\n                let data_1 := sload(srcPtr)\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(224, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(192, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(160, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(128, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(96, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(64, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(shl(_2, data_1), shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                    itemCounter := add(itemCounter, 1)\n                }\n                if lt(itemCounter, length)\n                {\n                    mstore(pos, and(data_1, shl(224, 0xffffffff)))\n                    pos := add(pos, _2)\n                }\n                finalize_allocation(memPtr, sub(pos, memPtr))\n            }\n            function memory_array_index_access_struct_PackedUserOperation_dyn(baseRef) -> addr\n            {\n                if iszero(mload(baseRef))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(baseRef, 32)\n            }\n            /// @ast-id 3987 @src 17:1243:1447  \"function failed() public view returns (bool) {...\"\n            function fun_failed() -> var\n            {\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let value := and(sload(/** @src 17:1302:1309  \"_failed\" */ 0x08), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0xff)\n                /// @src 17:1298:1441  \"if (_failed) {...\"\n                switch /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ value\n                case /** @src 17:1298:1441  \"if (_failed) {...\" */ 0 {\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    mstore(_1, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(228, 0x0667f9d7))\n                    let _2 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                    mstore(/** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, 4), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2)\n                    /// @src 86:962:966  \"1e18\"\n                    mstore(/** @src 17:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ add(/** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 17:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 36), shl(210, 0x19985a5b1959))\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let _3 := staticcall(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _2, /** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, /** @src 17:192:251  \"Vm(address(uint160(uint256(keccak256(\\\"hevm cheat code\\\")))))\" */ 68, /** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ _1, 32)\n                    if iszero(_3)\n                    {\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        let pos := mload(64)\n                        returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ returndatasize())\n                        revert(pos, returndatasize())\n                    }\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    let expr := /** @src -1:-1:-1 */ 0\n                    /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                    if _3\n                    {\n                        let _4 := 32\n                        if gt(32, returndatasize()) { _4 := returndatasize() }\n                        finalize_allocation(_1, _4)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        if slt(sub(/** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ add(_1, _4), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _1), /** @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\" */ 32)\n                        /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 17:1377:1416  \"vm.load(address(vm), bytes32(\\\"failed\\\"))\"\n                        expr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(_1)\n                    }\n                    /// @src 17:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    var := /** @src 17:1377:1430  \"vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\" */ iszero(iszero(expr))\n                    /// @src 17:1370:1430  \"return vm.load(address(vm), bytes32(\\\"failed\\\")) != bytes32(0)\"\n                    leave\n                }\n                default /// @src 17:1298:1441  \"if (_failed) {...\"\n                {\n                    /// @src 17:1325:1339  \"return _failed\"\n                    var := value\n                    leave\n                }\n            }\n            /// @ast-id 4117 @src 17:2270:2380  \"function assertEq(uint256 left, uint256 right) internal pure virtual {...\"\n            function fun_assertEq_21466(var_left)\n            {\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let _1 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _1))\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _2 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                mstore(_2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x260a5b15))\n                /// @src 86:962:966  \"1e18\"\n                mstore(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ add(_2, 4), /** @src 86:962:966  \"1e18\" */ var_left)\n                mstore(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), 0)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _3 := staticcall(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _1, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 68, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if iszero(_3)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, 0, returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if _3 { finalize_allocation_21467(_2) }\n            }\n            /// @ast-id 4117 @src 17:2270:2380  \"function assertEq(uint256 left, uint256 right) internal pure virtual {...\"\n            function fun_assertEq(var_left)\n            {\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                let _1 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if iszero(extcodesize(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _1))\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    revert(0, 0)\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _2 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                mstore(_2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(226, 0x260a5b15))\n                /// @src 86:962:966  \"1e18\"\n                mstore(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ add(_2, 4), /** @src 86:962:966  \"1e18\" */ var_left)\n                mstore(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ add(/** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36), /** @src 86:962:966  \"1e18\" */ 0x0de0b6b3a7640000)\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                let _3 := staticcall(gas(), /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ _1, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 68, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ _2, 0)\n                if iszero(_3)\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, /** @src 17:2349:2373  \"vm.assertEq(left, right)\" */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 17:2349:2373  \"vm.assertEq(left, right)\"\n                if _3 { finalize_allocation_21467(_2) }\n            }\n            /// @ast-id 49683 @src 76:2129:2895  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n            function fun_tryRecover_49683(var_hash, var_signature_mpos) -> var, var_1, var_2\n            {\n                /// @src 76:2256:2272  \"signature.length\"\n                let expr := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(/** @src 76:2256:2272  \"signature.length\" */ var_signature_mpos)\n                /// @src 76:2252:2889  \"if (signature.length == 65) {...\"\n                switch /** @src 76:2256:2278  \"signature.length == 65\" */ eq(expr, /** @src 76:2276:2278  \"65\" */ 0x41)\n                case /** @src 76:2252:2889  \"if (signature.length == 65) {...\" */ 0 {\n                    /// @src 76:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var := /** @src 76:2811:2812  \"0\" */ 0x00\n                    /// @src 76:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var_1 := /** @src 76:2815:2850  \"RecoverError.InvalidSignatureLength\" */ 2\n                    /// @src 76:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var_2 := expr\n                    leave\n                }\n                default /// @src 76:2252:2889  \"if (signature.length == 65) {...\"\n                {\n                    /// @src 76:2539:2719  \"assembly {...\"\n                    let var_r := mload(add(var_signature_mpos, 0x20))\n                    /// @src 76:2739:2764  \"tryRecover(hash, v, r, s)\"\n                    let expr_component, expr_component_1, expr_component_2 := fun_tryRecover(var_hash, /** @src 76:2539:2719  \"assembly {...\" */ byte(/** @src -1:-1:-1 */ 0, /** @src 76:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x60))), /** @src 76:2739:2764  \"tryRecover(hash, v, r, s)\" */ var_r, /** @src 76:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x40)))\n                    /// @src 76:2732:2764  \"return tryRecover(hash, v, r, s)\"\n                    var := expr_component\n                    var_1 := expr_component_1\n                    var_2 := expr_component_2\n                    leave\n                }\n            }\n            /// @ast-id 49956 @src 76:7196:7728  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n            function fun_throwError(var_error, var_errorArg)\n            {\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                if iszero(lt(var_error, 4))\n                {\n                    mstore(/** @src 76:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x21)\n                    revert(/** @src 76:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 0x24)\n                }\n                /// @src 76:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                switch /** @src 76:7282:7311  \"error == RecoverError.NoError\" */ iszero(var_error)\n                case /** @src 76:7278:7722  \"if (error == RecoverError.NoError) {...\" */ 0 {\n                    /// @src 76:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                    switch /** @src 76:7378:7416  \"error == RecoverError.InvalidSignature\" */ eq(var_error, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 1)\n                    case /** @src 76:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\" */ 0 {\n                        /// @src 76:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        switch /** @src 76:7483:7527  \"error == RecoverError.InvalidSignatureLength\" */ eq(var_error, /** @src 76:7492:7527  \"RecoverError.InvalidSignatureLength\" */ 2)\n                        case /** @src 76:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\" */ 0 {\n                            /// @src 76:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            if /** @src 76:7617:7656  \"error == RecoverError.InvalidSignatureS\" */ eq(var_error, /** @src 76:7626:7656  \"RecoverError.InvalidSignatureS\" */ 3)\n                            /// @src 76:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            {\n                                /// @src 76:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                let _1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                                /// @src 76:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                mstore(_1, shl(226, 0x35e2f383))\n                                /// @src 86:962:966  \"1e18\"\n                                mstore(/** @src 76:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\" */ add(_1, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 4), /** @src 86:962:966  \"1e18\" */ var_errorArg)\n                                /// @src 76:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                revert(_1, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36)\n                            }\n                        }\n                        default /// @src 76:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        {\n                            /// @src 76:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            let _2 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                            /// @src 76:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            mstore(_2, shl(224, 0xfce698f7))\n                            /// @src 86:962:966  \"1e18\"\n                            mstore(/** @src 76:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ add(_2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 4), /** @src 86:962:966  \"1e18\" */ var_errorArg)\n                            /// @src 76:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            revert(_2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 36)\n                        }\n                    }\n                    default /// @src 76:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                    {\n                        /// @src 76:7439:7462  \"ECDSAInvalidSignature()\"\n                        let _3 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                        /// @src 76:7439:7462  \"ECDSAInvalidSignature()\"\n                        mstore(_3, shl(224, 0xf645eedf))\n                        revert(_3, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 4)\n                    }\n                }\n                default /// @src 76:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                {\n                    /// @src 76:7327:7334  \"return;\"\n                    leave\n                }\n            }\n            /// @ast-id 49871 @src 76:5140:6670  \"function tryRecover(...\"\n            function fun_tryRecover(var_hash, var_v, var_r, var_s) -> var, var_1, var_\n            {\n                /// @src 76:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                if /** @src 76:6186:6265  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ gt(var_s, /** @src 76:6199:6265  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)\n                /// @src 76:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                {\n                    /// @src 76:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var := /** @src 76:6297:6298  \"0\" */ 0x00\n                    /// @src 76:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var_1 := /** @src 76:6301:6331  \"RecoverError.InvalidSignatureS\" */ 3\n                    /// @src 76:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var_ := var_s\n                    leave\n                }\n                /// @src 76:6457:6481  \"ecrecover(hash, v, r, s)\"\n                let _1 := /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ mload(64)\n                /// @src 86:962:966  \"1e18\"\n                mstore(_1, var_hash)\n                /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                mstore(add(_1, 32), and(var_v, 0xff))\n                /// @src 86:962:966  \"1e18\"\n                mstore(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ add(_1, 64), /** @src 86:962:966  \"1e18\" */ var_r)\n                mstore(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ add(_1, 96), /** @src 86:962:966  \"1e18\" */ var_s)\n                /// @src -1:-1:-1\n                let _2 := 0\n                /// @src 76:6457:6481  \"ecrecover(hash, v, r, s)\"\n                mstore(/** @src -1:-1:-1 */ _2, _2)\n                /// @src 76:6457:6481  \"ecrecover(hash, v, r, s)\"\n                if iszero(staticcall(gas(), 1, _1, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 128, /** @src -1:-1:-1 */ _2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ 32))\n                /// @src 76:6457:6481  \"ecrecover(hash, v, r, s)\"\n                {\n                    /// @src 86:719:5757  \"contract MinimalAccountTest is Test {...\"\n                    let pos := mload(64)\n                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ returndatasize())\n                    revert(pos, returndatasize())\n                }\n                /// @src 76:6457:6481  \"ecrecover(hash, v, r, s)\"\n                let _3 := mload(/** @src -1:-1:-1 */ _2)\n                /// @src 76:6491:6604  \"if (signer == address(0)) {...\"\n                if /** @src 76:6495:6515  \"signer == address(0)\" */ iszero(/** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ and(/** @src 76:6495:6515  \"signer == address(0)\" */ _3, /** @src 86:719:5757  \"contract MinimalAccountTest is Test {...\" */ sub(shl(160, /** @src 86:1090:1109  \"new DeployMinimal()\" */ 1), 1)))\n                /// @src 76:6491:6604  \"if (signer == address(0)) {...\"\n                {\n                    /// @src 76:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var := /** @src -1:-1:-1 */ _2\n                    /// @src 76:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var_1 := /** @src 76:6457:6481  \"ecrecover(hash, v, r, s)\" */ 1\n                    /// @src 76:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var_ := /** @src -1:-1:-1 */ _2\n                    /// @src 76:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    leave\n                }\n                /// @src 76:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var := _3\n                var_1 := /** @src -1:-1:-1 */ _2\n                /// @src 76:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var_ := /** @src -1:-1:-1 */ _2\n            }\n        }\n        /// @use-src 63:\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\", 64:\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\", 65:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 66:\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\", 67:\"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\", 71:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\n        object \"ERC20Mock_47635\" {\n            code {\n                {\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let _1 := memoryguard(0x80)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := 64\n                    let newFreePtr := add(_1, _2)\n                    let _3 := sub(shl(64, 1), 1)\n                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    mstore(_2, newFreePtr)\n                    mstore(_1, 9)\n                    let _4 := 32\n                    mstore(add(_1, _4), \"ERC20Mock\")\n                    let memPtr := mload(_2)\n                    let newFreePtr_1 := add(memPtr, _2)\n                    if or(gt(newFreePtr_1, _3), lt(newFreePtr_1, memPtr))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    mstore(_2, newFreePtr_1)\n                    let _5 := 4\n                    mstore(memPtr, _5)\n                    mstore(add(memPtr, _4), \"E20M\")\n                    let newLen := mload(_1)\n                    if gt(newLen, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    /// @src 65:1962:1975  \"_name = name_\"\n                    let _6 := 0x03\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let _7 := sload(/** @src 65:1962:1975  \"_name = name_\" */ _6)\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let length := /** @src -1:-1:-1 */ 0\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let _8 := 1\n                    length := shr(_8, _7)\n                    let outOfPlaceEncoding := and(_7, _8)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x22)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    let _9 := 31\n                    if gt(length, _9)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 65:1962:1975  \"_name = name_\" */ _6)\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let deleteStart := add(data, shr(5, add(newLen, _9)))\n                        if lt(newLen, _4) { deleteStart := data }\n                        let _10 := add(data, shr(5, add(length, _9)))\n                        let start := deleteStart\n                        for { } lt(start, _10) { start := add(start, _8) }\n                        {\n                            sstore(start, /** @src -1:-1:-1 */ 0)\n                        }\n                    }\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let srcOffset := /** @src -1:-1:-1 */ 0\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    srcOffset := _4\n                    switch gt(newLen, _9)\n                    case 1 {\n                        let loopEnd := and(newLen, not(31))\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 65:1962:1975  \"_name = name_\" */ _6)\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let dstPtr := keccak256(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let i := /** @src -1:-1:-1 */ 0\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        for { } lt(i, loopEnd) { i := add(i, _4) }\n                        {\n                            sstore(dstPtr, mload(add(_1, srcOffset)))\n                            dstPtr := add(dstPtr, _8)\n                            srcOffset := add(srcOffset, _4)\n                        }\n                        if lt(loopEnd, newLen)\n                        {\n                            let lastValue := mload(add(_1, srcOffset))\n                            sstore(dstPtr, and(lastValue, not(shr(and(shl(/** @src 65:1962:1975  \"_name = name_\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen), 248), not(0)))))\n                        }\n                        sstore(/** @src 65:1962:1975  \"_name = name_\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ add(shl(_8, newLen), _8))\n                    }\n                    default {\n                        let value := /** @src -1:-1:-1 */ 0\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        if newLen\n                        {\n                            value := mload(add(_1, srcOffset))\n                        }\n                        sstore(/** @src 65:1962:1975  \"_name = name_\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ or(and(value, not(shr(shl(/** @src 65:1962:1975  \"_name = name_\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen), not(0)))), shl(_8, newLen)))\n                    }\n                    let newLen_1 := mload(memPtr)\n                    if gt(newLen_1, _3)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x41)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    let _11 := sload(_5)\n                    let length_1 := /** @src -1:-1:-1 */ 0\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    length_1 := shr(_8, _11)\n                    let outOfPlaceEncoding_1 := and(_11, _8)\n                    if iszero(outOfPlaceEncoding_1)\n                    {\n                        length_1 := and(length_1, 0x7f)\n                    }\n                    if eq(outOfPlaceEncoding_1, lt(length_1, _4))\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ shl(224, 0x4e487b71))\n                        mstore(_5, 0x22)\n                        revert(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x24)\n                    }\n                    if gt(length_1, _9)\n                    {\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _5)\n                        let data_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let deleteStart_1 := add(data_1, shr(5, add(newLen_1, _9)))\n                        if lt(newLen_1, _4) { deleteStart_1 := data_1 }\n                        let _12 := add(data_1, shr(5, add(length_1, _9)))\n                        let start_1 := deleteStart_1\n                        for { } lt(start_1, _12) { start_1 := add(start_1, _8) }\n                        {\n                            sstore(start_1, /** @src -1:-1:-1 */ 0)\n                        }\n                    }\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    let srcOffset_1 := /** @src -1:-1:-1 */ 0\n                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                    srcOffset_1 := _4\n                    switch gt(newLen_1, _9)\n                    case 1 {\n                        let loopEnd_1 := and(newLen_1, not(31))\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _5)\n                        let dstPtr_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let i_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        for { } lt(i_1, loopEnd_1) { i_1 := add(i_1, _4) }\n                        {\n                            sstore(dstPtr_1, mload(add(memPtr, srcOffset_1)))\n                            dstPtr_1 := add(dstPtr_1, _8)\n                            srcOffset_1 := add(srcOffset_1, _4)\n                        }\n                        if lt(loopEnd_1, newLen_1)\n                        {\n                            let lastValue_1 := mload(add(memPtr, srcOffset_1))\n                            sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(/** @src 65:1962:1975  \"_name = name_\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen_1), 248), not(0)))))\n                        }\n                        sstore(_5, add(shl(_8, newLen_1), _8))\n                    }\n                    default {\n                        let value_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        if newLen_1\n                        {\n                            value_1 := mload(add(memPtr, srcOffset_1))\n                        }\n                        sstore(_5, or(and(value_1, not(shr(shl(/** @src 65:1962:1975  \"_name = name_\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ newLen_1), not(0)))), shl(_8, newLen_1)))\n                    }\n                    let _13 := mload(_2)\n                    let _14 := datasize(\"ERC20Mock_47635_deployed\")\n                    codecopy(_13, dataoffset(\"ERC20Mock_47635_deployed\"), _14)\n                    return(_13, _14)\n                }\n            }\n            /// @use-src 64:\"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol\", 65:\"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\", 71:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\"\n            object \"ERC20Mock_47635_deployed\" {\n                code {\n                    {\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x06fdde03 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let ret := _4\n                                let slotValue := sload(/** @src 65:2151:2156  \"_name\" */ 0x03)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let length := _4\n                                let _5 := 1\n                                length := shr(1, slotValue)\n                                let outOfPlaceEncoding := and(slotValue, 1)\n                                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                                let _6 := 32\n                                if eq(outOfPlaceEncoding, lt(length, _6))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x22)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_1, length)\n                                switch outOfPlaceEncoding\n                                case 0 {\n                                    mstore(add(_1, _6), and(slotValue, not(255)))\n                                    ret := add(add(_1, shl(5, iszero(iszero(length)))), _6)\n                                }\n                                case 1 {\n                                    mstore(_4, /** @src 65:2151:2156  \"_name\" */ 0x03)\n                                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    let dataPos := 87903029871075914254377627908054574944891091886930582284385770809450030037083\n                                    let i := _4\n                                    for { } lt(i, length) { i := add(i, _6) }\n                                    {\n                                        mstore(add(add(_1, i), _6), sload(dataPos))\n                                        dataPos := add(dataPos, _5)\n                                    }\n                                    ret := add(add(_1, i), _6)\n                                }\n                                let newFreePtr := add(_1, and(add(sub(ret, _1), 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, _1))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr)\n                                return(newFreePtr, sub(abi_encode_string(newFreePtr, _1), newFreePtr))\n                            }\n                            case 0x095ea7b3 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0 := abi_decode_address_3706()\n                                let _7 := calldataload(36)\n                                /// @src 65:10057:10146  \"if (owner == address(0)) {...\"\n                                if /** @src 65:10061:10080  \"owner == address(0)\" */ iszero(/** @src 71:735:745  \"msg.sender\" */ caller())\n                                /// @src 65:10057:10146  \"if (owner == address(0)) {...\"\n                                {\n                                    /// @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                    let _8 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                    mstore(_8, shl(224, 0xe602df05))\n                                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_8, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                    revert(_8, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                let _9 := and(/** @src 65:10159:10180  \"spender == address(0)\" */ value0, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 65:10155:10245  \"if (spender == address(0)) {...\"\n                                if /** @src 65:10159:10180  \"spender == address(0)\" */ iszero(/** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _9)\n                                /// @src 65:10155:10245  \"if (spender == address(0)) {...\"\n                                {\n                                    /// @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                    let _10 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                    mstore(_10, shl(225, 0x4a1406b1))\n                                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_10, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                    revert(_10, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                mstore(_4, /** @src 71:735:745  \"msg.sender\" */ caller())\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(0x20, /** @src 65:9105:9109  \"true\" */ 0x01)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let _11 := keccak256(_4, _2)\n                                mstore(_4, _9)\n                                mstore(0x20, _11)\n                                sstore(keccak256(_4, _2), _7)\n                                /// @src 65:10333:10364  \"Approval(owner, spender, value)\"\n                                let _12 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                mstore(_12, _7)\n                                /// @src 65:10333:10364  \"Approval(owner, spender, value)\"\n                                log3(_12, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 65:10333:10364  \"Approval(owner, spender, value)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 71:735:745  \"msg.sender\" */ caller(), /** @src 65:10333:10364  \"Approval(owner, spender, value)\" */ _9)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let memPos := mload(_2)\n                                mstore(memPos, /** @src 65:9105:9109  \"true\" */ 0x01)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                return(memPos, 0x20)\n                            }\n                            case 0x18160ddd {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let _13 := sload(/** @src 65:3222:3234  \"_totalSupply\" */ 0x02)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, _13)\n                                return(memPos_1, 32)\n                            }\n                            case 0x23b872dd {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 96) { revert(_4, _4) }\n                                let value0_1 := abi_decode_address_3706()\n                                let value1 := abi_decode_address()\n                                let value := calldataload(68)\n                                let _14 := and(value0_1, sub(shl(160, 1), 1))\n                                mstore(_4, _14)\n                                mstore(32, 1)\n                                let _15 := keccak256(_4, _2)\n                                mstore(_4, /** @src 71:735:745  \"msg.sender\" */ caller())\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(32, _15)\n                                let _16 := sload(keccak256(_4, _2))\n                                /// @src 65:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                                if /** @src 65:10828:10865  \"currentAllowance != type(uint256).max\" */ iszero(eq(_16, /** @src 65:10848:10865  \"type(uint256).max\" */ not(0)))\n                                /// @src 65:10824:11134  \"if (currentAllowance != type(uint256).max) {...\"\n                                {\n                                    /// @src 65:10881:11011  \"if (currentAllowance < value) {...\"\n                                    if /** @src 65:10885:10909  \"currentAllowance < value\" */ lt(_16, value)\n                                    /// @src 65:10881:11011  \"if (currentAllowance < value) {...\"\n                                    {\n                                        /// @src 65:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                        let _17 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                        /// @src 65:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\"\n                                        mstore(_17, shl(225, 0x7dc7a0d9))\n                                        revert(_17, sub(abi_encode_address_uint256_uint256(add(_17, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), /** @src 71:735:745  \"msg.sender\" */ caller(), /** @src 65:10936:10996  \"ERC20InsufficientAllowance(spender, currentAllowance, value)\" */ _16, value), _17))\n                                    }\n                                    /// @src 65:10057:10146  \"if (owner == address(0)) {...\"\n                                    if /** @src 65:10061:10080  \"owner == address(0)\" */ iszero(/** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _14)\n                                    /// @src 65:10057:10146  \"if (owner == address(0)) {...\"\n                                    {\n                                        /// @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                        let _18 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                        /// @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                        mstore(_18, shl(224, 0xe602df05))\n                                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                        mstore(/** @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\" */ add(_18, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                        /// @src 65:10103:10135  \"ERC20InvalidApprover(address(0))\"\n                                        revert(_18, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                    }\n                                    /// @src 65:10155:10245  \"if (spender == address(0)) {...\"\n                                    if /** @src 65:10159:10180  \"spender == address(0)\" */ iszero(/** @src 71:735:745  \"msg.sender\" */ caller())\n                                    /// @src 65:10155:10245  \"if (spender == address(0)) {...\"\n                                    {\n                                        /// @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                        let _19 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                        /// @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                        mstore(_19, shl(225, 0x4a1406b1))\n                                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                        mstore(/** @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\" */ add(_19, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                        /// @src 65:10203:10234  \"ERC20InvalidSpender(address(0))\"\n                                        revert(_19, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                    }\n                                    mstore(_4, _14)\n                                    mstore(32, 1)\n                                    let _20 := keccak256(_4, _2)\n                                    mstore(_4, /** @src 71:735:745  \"msg.sender\" */ caller())\n                                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(32, _20)\n                                    sstore(keccak256(_4, _2), sub(/** @src 65:11077:11101  \"currentAllowance - value\" */ _16, value))\n                                }\n                                /// @src 65:5249:5254  \"value\"\n                                fun_transfer(value0_1, value1, value)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let memPos_2 := mload(_2)\n                                mstore(memPos_2, 1)\n                                return(memPos_2, 32)\n                            }\n                            case 0x313ce567 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPos_3 := mload(_2)\n                                mstore(memPos_3, /** @src 65:3075:3077  \"18\" */ 0x12)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                return(memPos_3, 32)\n                            }\n                            case 0x40c10f19 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_2 := abi_decode_address_3706()\n                                let value_1 := calldataload(36)\n                                let _21 := and(/** @src 65:7791:7812  \"account == address(0)\" */ value0_2, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 65:7787:7878  \"if (account == address(0)) {...\"\n                                if /** @src 65:7791:7812  \"account == address(0)\" */ iszero(/** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _21)\n                                /// @src 65:7787:7878  \"if (account == address(0)) {...\"\n                                {\n                                    /// @src 65:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                                    let _22 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 65:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                                    mstore(_22, shl(224, 0xec442f05))\n                                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 65:7835:7867  \"ERC20InvalidReceiver(address(0))\" */ add(_22, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 65:7835:7867  \"ERC20InvalidReceiver(address(0))\"\n                                    revert(_22, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                let _23 := sload(/** @src 65:6496:6517  \"_totalSupply += value\" */ 0x02)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let sum := add(_23, value_1)\n                                if gt(_23, sum)\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x11)\n                                    revert(_4, 36)\n                                }\n                                sstore(/** @src 65:6496:6517  \"_totalSupply += value\" */ 0x02, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ sum)\n                                mstore(_4, _21)\n                                mstore(0x20, _4)\n                                let dataSlot := keccak256(_4, _2)\n                                sstore(dataSlot, add(sload(/** @src 65:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ value_1))\n                                /// @src 65:7346:7371  \"Transfer(from, to, value)\"\n                                let _24 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                mstore(_24, value_1)\n                                /// @src 65:7346:7371  \"Transfer(from, to, value)\"\n                                log3(_24, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 65:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4, /** @src 65:7346:7371  \"Transfer(from, to, value)\" */ _21)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                return(_4, _4)\n                            }\n                            case 0x70a08231 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                                mstore(_4, and(abi_decode_address_3706(), sub(shl(160, 1), 1)))\n                                mstore(32, _4)\n                                let _25 := sload(keccak256(_4, _2))\n                                let memPos_4 := mload(_2)\n                                mstore(memPos_4, _25)\n                                return(memPos_4, 32)\n                            }\n                            case 0x95d89b41 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let memPtr := mload(_2)\n                                let ret_1 := _4\n                                let slotValue_1 := sload(_3)\n                                let length_1 := _4\n                                let _26 := 1\n                                length_1 := shr(1, slotValue_1)\n                                let outOfPlaceEncoding_1 := and(slotValue_1, 1)\n                                if iszero(outOfPlaceEncoding_1)\n                                {\n                                    length_1 := and(length_1, 0x7f)\n                                }\n                                let _27 := 32\n                                if eq(outOfPlaceEncoding_1, lt(length_1, _27))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x22)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(memPtr, length_1)\n                                switch outOfPlaceEncoding_1\n                                case 0 {\n                                    mstore(add(memPtr, _27), and(slotValue_1, not(255)))\n                                    ret_1 := add(add(memPtr, shl(5, iszero(iszero(length_1)))), _27)\n                                }\n                                case 1 {\n                                    mstore(_4, _3)\n                                    let dataPos_1 := 62514009886607029107290561805838585334079798074568712924583230797734656856475\n                                    let i_1 := _4\n                                    for { } lt(i_1, length_1) { i_1 := add(i_1, _27) }\n                                    {\n                                        mstore(add(add(memPtr, i_1), _27), sload(dataPos_1))\n                                        dataPos_1 := add(dataPos_1, _26)\n                                    }\n                                    ret_1 := add(add(memPtr, i_1), _27)\n                                }\n                                let newFreePtr_1 := add(memPtr, and(add(sub(ret_1, memPtr), 31), not(31)))\n                                if or(gt(newFreePtr_1, 0xffffffffffffffff), lt(newFreePtr_1, memPtr))\n                                {\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                mstore(_2, newFreePtr_1)\n                                return(newFreePtr_1, sub(abi_encode_string(newFreePtr_1, memPtr), newFreePtr_1))\n                            }\n                            case 0x9dc29fac {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_3 := abi_decode_address_3706()\n                                let value_2 := calldataload(36)\n                                let _28 := and(/** @src 65:8317:8338  \"account == address(0)\" */ value0_3, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(shl(160, 1), 1))\n                                /// @src 65:8313:8402  \"if (account == address(0)) {...\"\n                                if /** @src 65:8317:8338  \"account == address(0)\" */ iszero(/** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _28)\n                                /// @src 65:8313:8402  \"if (account == address(0)) {...\"\n                                {\n                                    /// @src 65:8361:8391  \"ERC20InvalidSender(address(0))\"\n                                    let _29 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 65:8361:8391  \"ERC20InvalidSender(address(0))\"\n                                    mstore(_29, shl(225, 0x4b637e8f))\n                                    /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                    mstore(/** @src 65:8361:8391  \"ERC20InvalidSender(address(0))\" */ add(_29, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), _4)\n                                    /// @src 65:8361:8391  \"ERC20InvalidSender(address(0))\"\n                                    revert(_29, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                                }\n                                mstore(_4, _28)\n                                mstore(0x20, _4)\n                                let _30 := sload(keccak256(_4, _2))\n                                /// @src 65:6599:6714  \"if (fromBalance < value) {...\"\n                                if /** @src 65:6603:6622  \"fromBalance < value\" */ lt(_30, value_2)\n                                /// @src 65:6599:6714  \"if (fromBalance < value) {...\"\n                                {\n                                    /// @src 65:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                                    let _31 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                    /// @src 65:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                                    mstore(_31, shl(226, 0x391434e3))\n                                    revert(_31, sub(abi_encode_address_uint256_uint256(add(_31, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _3), /** @src 65:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\" */ value0_3, _30, value_2), _31))\n                                }\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                mstore(_4, _28)\n                                mstore(0x20, _4)\n                                sstore(keccak256(_4, _2), sub(/** @src 65:6852:6871  \"fromBalance - value\" */ _30, value_2))\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                sstore(/** @src 65:7073:7094  \"_totalSupply -= value\" */ 0x02, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ sub(sload(/** @src 65:7073:7094  \"_totalSupply -= value\" */ 0x02), /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ value_2))\n                                /// @src 65:7346:7371  \"Transfer(from, to, value)\"\n                                let _32 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(_2)\n                                mstore(_32, value_2)\n                                /// @src 65:7346:7371  \"Transfer(from, to, value)\"\n                                log3(_32, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 65:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _28, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                                return(_4, _4)\n                            }\n                            case 0xa9059cbb {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_4 := abi_decode_address_3706()\n                                /// @src 65:3754:3759  \"value\"\n                                fun_transfer(/** @src 71:735:745  \"msg.sender\" */ caller(), /** @src 65:3754:3759  \"value\" */ value0_4, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ calldataload(36))\n                                let memPos_5 := mload(_2)\n                                mstore(memPos_5, 1)\n                                return(memPos_5, 32)\n                            }\n                            case 0xdd62ed3e {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                                let value0_5 := abi_decode_address_3706()\n                                let value1_1 := abi_decode_address()\n                                let _33 := sub(shl(160, 1), 1)\n                                mstore(_4, and(value0_5, _33))\n                                mstore(32, /** @src 65:3952:3963  \"_allowances\" */ 0x01)\n                                /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                                let _34 := keccak256(_4, _2)\n                                mstore(_4, and(value1_1, _33))\n                                mstore(32, _34)\n                                let _35 := sload(keccak256(_4, _2))\n                                let memPos_6 := mload(_2)\n                                mstore(memPos_6, _35)\n                                return(memPos_6, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function abi_encode_string(headStart, value0) -> tail\n                    {\n                        let _1 := 32\n                        mstore(headStart, 32)\n                        let length := mload(value0)\n                        mstore(add(headStart, 32), length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, _1) }\n                        {\n                            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n                        }\n                        mstore(add(add(headStart, length), 64), 0)\n                        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n                    }\n                    function abi_decode_address_3706() -> value\n                    {\n                        value := calldataload(4)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_address() -> value\n                    {\n                        value := calldataload(36)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_encode_address_uint256_uint256(headStart, value0, value1, value2) -> tail\n                    {\n                        tail := add(headStart, 96)\n                        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                        mstore(add(headStart, 32), value1)\n                        mstore(add(headStart, 64), value2)\n                    }\n                    /// @ast-id 47880 @src 65:5656:5956  \"function _transfer(address from, address to, uint256 value) internal {...\"\n                    function fun_transfer(var_from, var_to, var_value)\n                    {\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _1 := sub(shl(160, 1), 1)\n                        let _2 := and(/** @src 65:5739:5757  \"from == address(0)\" */ var_from, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _1)\n                        /// @src 65:5735:5821  \"if (from == address(0)) {...\"\n                        if /** @src 65:5739:5757  \"from == address(0)\" */ iszero(/** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                        /// @src 65:5735:5821  \"if (from == address(0)) {...\"\n                        {\n                            /// @src 65:5780:5810  \"ERC20InvalidSender(address(0))\"\n                            let _3 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(64)\n                            /// @src 65:5780:5810  \"ERC20InvalidSender(address(0))\"\n                            mstore(_3, /** @src 65:8361:8391  \"ERC20InvalidSender(address(0))\" */ shl(225, 0x4b637e8f))\n                            /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 65:5780:5810  \"ERC20InvalidSender(address(0))\" */ add(_3, 4), /** @src 65:5755:5756  \"0\" */ 0x00)\n                            /// @src 65:5780:5810  \"ERC20InvalidSender(address(0))\"\n                            revert(_3, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        let _4 := and(/** @src 65:5834:5850  \"to == address(0)\" */ var_to, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _1)\n                        /// @src 65:5830:5916  \"if (to == address(0)) {...\"\n                        if /** @src 65:5834:5850  \"to == address(0)\" */ iszero(/** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        /// @src 65:5830:5916  \"if (to == address(0)) {...\"\n                        {\n                            /// @src 65:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                            let _5 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(64)\n                            /// @src 65:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                            mstore(_5, /** @src 65:7835:7867  \"ERC20InvalidReceiver(address(0))\" */ shl(224, 0xec442f05))\n                            /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                            mstore(/** @src 65:5873:5905  \"ERC20InvalidReceiver(address(0))\" */ add(_5, 4), /** @src 65:5755:5756  \"0\" */ 0x00)\n                            /// @src 65:5873:5905  \"ERC20InvalidReceiver(address(0))\"\n                            revert(_5, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 36)\n                        }\n                        /// @src 65:6356:6896  \"if (from == address(0)) {...\"\n                        let _6 := 0\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(/** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6)\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        let _7 := sload(keccak256(/** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40))\n                        /// @src 65:6599:6714  \"if (fromBalance < value) {...\"\n                        if /** @src 65:6603:6622  \"fromBalance < value\" */ lt(_7, var_value)\n                        /// @src 65:6599:6714  \"if (fromBalance < value) {...\"\n                        {\n                            /// @src 65:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            let _8 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(0x40)\n                            /// @src 65:6649:6699  \"ERC20InsufficientBalance(from, fromBalance, value)\"\n                            mstore(_8, shl(226, 0x391434e3))\n                            revert(_8, sub(abi_encode_address_uint256_uint256(add(_8, 4), var_from, _7, var_value), _8))\n                        }\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(/** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _2)\n                        mstore(0x20, /** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6)\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        sstore(keccak256(/** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40), sub(/** @src 65:6852:6871  \"fromBalance - value\" */ _7, var_value))\n                        /// @src 64:110:391  \"contract ERC20Mock is ERC20 {...\"\n                        mstore(/** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ _4)\n                        let dataSlot := keccak256(/** @src 65:6356:6896  \"if (from == address(0)) {...\" */ _6, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x40)\n                        sstore(dataSlot, add(sload(/** @src 65:7284:7306  \"_balances[to] += value\" */ dataSlot), /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ var_value))\n                        /// @src 65:7346:7371  \"Transfer(from, to, value)\"\n                        let _9 := /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ mload(0x40)\n                        mstore(_9, var_value)\n                        /// @src 65:7346:7371  \"Transfer(from, to, value)\"\n                        log3(_9, /** @src 64:110:391  \"contract ERC20Mock is ERC20 {...\" */ 0x20, /** @src 65:7346:7371  \"Transfer(from, to, value)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _2, _4)\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000818000a\"\n            }\n        }\n        /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 81:\"script/DeployMinimal.s.sol\"\n        object \"DeployMinimal_51227\" {\n            code {\n                {\n                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ not(16711935)), 65537))\n                    let _2 := datasize(\"DeployMinimal_51227_deployed\")\n                    codecopy(_1, dataoffset(\"DeployMinimal_51227_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 81:\"script/DeployMinimal.s.sol\"\n            object \"DeployMinimal_51227_deployed\" {\n                code {\n                    {\n                        /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                        let _1 := memoryguard(0x80)\n                        let _2 := 64\n                        mstore(_2, _1)\n                        let _3 := 4\n                        if iszero(lt(calldatasize(), _3))\n                        {\n                            let _4 := 0\n                            switch shr(224, calldataload(_4))\n                            case 0x7d7a1c8b {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                /// @src 81:465:483  \"new HelperConfig()\"\n                                let _5 := datasize(\"HelperConfig_51403\")\n                                let _6 := add(_1, _5)\n                                let _7 := 0xffffffffffffffff\n                                if or(gt(_6, _7), lt(_6, _1))\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, 0x24)\n                                }\n                                /// @src 81:465:483  \"new HelperConfig()\"\n                                datacopy(_1, dataoffset(\"HelperConfig_51403\"), _5)\n                                let expr_address := create(/** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4, /** @src 81:465:483  \"new HelperConfig()\" */ _1, sub(_6, _1))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    let pos := mload(_2)\n                                    returndatacopy(pos, _4, returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                let _8 := sub(shl(160, /** @src 81:465:483  \"new HelperConfig()\" */ 1), 1)\n                                /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                let _9 := and(/** @src 81:537:559  \"helperConfig.getConfig\" */ expr_address, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _8)\n                                /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                let _10 := /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                mstore(_10, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ shl(226, 0x30fe4275))\n                                /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                let _11 := call(gas(), _9, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4, /** @src 81:537:561  \"helperConfig.getConfig()\" */ _10, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _3, /** @src 81:537:561  \"helperConfig.getConfig()\" */ _10, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _2)\n                                /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                if iszero(_11)\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    let pos_1 := mload(_2)\n                                    returndatacopy(pos_1, _4, returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                let expr_mpos := /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4\n                                /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                if _11\n                                {\n                                    let _12 := /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _2\n                                    /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _2, /** @src 81:537:561  \"helperConfig.getConfig()\" */ returndatasize()) { _12 := returndatasize() }\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    let newFreePtr := add(_10, and(add(_12, 31), not(31)))\n                                    if or(gt(newFreePtr, /** @src 81:465:483  \"new HelperConfig()\" */ _7), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ lt(newFreePtr, _10))\n                                    {\n                                        mstore(_4, shl(224, 0x4e487b71))\n                                        mstore(_3, 0x41)\n                                        revert(_4, 0x24)\n                                    }\n                                    if slt(sub(/** @src 81:537:561  \"helperConfig.getConfig()\" */ add(_10, _12), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _10), _2) { revert(_4, _4) }\n                                    let newFreePtr_1 := add(newFreePtr, _2)\n                                    if or(gt(newFreePtr_1, /** @src 81:465:483  \"new HelperConfig()\" */ _7), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ lt(newFreePtr_1, newFreePtr))\n                                    {\n                                        mstore(_4, shl(224, 0x4e487b71))\n                                        mstore(_3, 0x41)\n                                        revert(_4, 0x24)\n                                    }\n                                    mstore(_2, newFreePtr_1)\n                                    mstore(newFreePtr, abi_decode_address_fromMemory(_10))\n                                    mstore(add(newFreePtr, 32), abi_decode_address_fromMemory(add(_10, 32)))\n                                    /// @src 81:537:561  \"helperConfig.getConfig()\"\n                                    expr_mpos := newFreePtr\n                                }\n                                /// @src 81:592:606  \"config.account\"\n                                let _13 := add(expr_mpos, 32)\n                                /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                let cleaned := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 81:592:606  \"config.account\" */ _13), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _8)\n                                let _14 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 81:574:607  \"vm.startBroadcast(config.account)\"\n                                if iszero(extcodesize(/** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _14))\n                                /// @src 81:574:607  \"vm.startBroadcast(config.account)\"\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 81:574:607  \"vm.startBroadcast(config.account)\"\n                                let _15 := /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 81:574:607  \"vm.startBroadcast(config.account)\"\n                                mstore(_15, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ shl(224, 0x7fec2a8d))\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                mstore(/** @src 81:574:607  \"vm.startBroadcast(config.account)\" */ add(_15, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _3), cleaned)\n                                /// @src 81:574:607  \"vm.startBroadcast(config.account)\"\n                                let _16 := call(gas(), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _14, _4, /** @src 81:574:607  \"vm.startBroadcast(config.account)\" */ _15, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 81:574:607  \"vm.startBroadcast(config.account)\" */ _15, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4)\n                                /// @src 81:574:607  \"vm.startBroadcast(config.account)\"\n                                if iszero(_16)\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    let pos_2 := mload(_2)\n                                    returndatacopy(pos_2, _4, returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 81:574:607  \"vm.startBroadcast(config.account)\"\n                                if _16\n                                {\n                                    finalize_allocation(_15)\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    _4 := _4\n                                }\n                                let cleaned_1 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 81:669:686  \"config.entryPoint\" */ expr_mpos), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _8)\n                                /// @src 81:650:687  \"new MinimalAccount(config.entryPoint)\"\n                                let _17 := /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 81:650:687  \"new MinimalAccount(config.entryPoint)\"\n                                let _18 := datasize(\"MinimalAccount_51919\")\n                                let _19 := add(_17, _18)\n                                if or(gt(_19, /** @src 81:465:483  \"new HelperConfig()\" */ _7), /** @src 81:650:687  \"new MinimalAccount(config.entryPoint)\" */ lt(_19, _17))\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    mstore(_4, shl(224, 0x4e487b71))\n                                    mstore(_3, 0x41)\n                                    revert(_4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36)\n                                }\n                                /// @src 81:650:687  \"new MinimalAccount(config.entryPoint)\"\n                                datacopy(_17, dataoffset(\"MinimalAccount_51919\"), _18)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                mstore(_19, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ cleaned_1)\n                                /// @src 81:650:687  \"new MinimalAccount(config.entryPoint)\"\n                                let expr_address_1 := create(/** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4, /** @src 81:650:687  \"new MinimalAccount(config.entryPoint)\" */ _17, add(sub(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _19, /** @src 81:650:687  \"new MinimalAccount(config.entryPoint)\" */ _17), /** @src 81:592:606  \"config.account\" */ 32))\n                                /// @src 81:650:687  \"new MinimalAccount(config.entryPoint)\"\n                                if iszero(expr_address_1)\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    let pos_3 := mload(_2)\n                                    returndatacopy(pos_3, _4, returndatasize())\n                                    revert(pos_3, returndatasize())\n                                }\n                                let _20 := and(/** @src 81:698:730  \"minimalAccount.transferOwnership\" */ expr_address_1, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _8)\n                                let cleaned_2 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 81:731:745  \"config.account\" */ _13), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _8)\n                                /// @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\"\n                                if iszero(extcodesize(_20))\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\"\n                                let _21 := /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\"\n                                mstore(_21, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ shl(224, 0xf2fde38b))\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                mstore(/** @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\" */ add(_21, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _3), cleaned_2)\n                                /// @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\"\n                                let _22 := call(gas(), _20, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4, /** @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\" */ _21, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 36, /** @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\" */ _21, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4)\n                                /// @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\"\n                                if iszero(_22)\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    let pos_4 := mload(_2)\n                                    returndatacopy(pos_4, _4, returndatasize())\n                                    revert(pos_4, returndatasize())\n                                }\n                                /// @src 81:698:746  \"minimalAccount.transferOwnership(config.account)\"\n                                if _22\n                                {\n                                    finalize_allocation(_21)\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    if _4 { revert(_4, _4) }\n                                }\n                                /// @src 81:757:775  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _14))\n                                /// @src 81:757:775  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    revert(_4, _4)\n                                }\n                                /// @src 81:757:775  \"vm.stopBroadcast()\"\n                                let _23 := /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ mload(_2)\n                                /// @src 81:757:775  \"vm.stopBroadcast()\"\n                                mstore(_23, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ shl(225, 0x3b756e9b))\n                                /// @src 81:757:775  \"vm.stopBroadcast()\"\n                                let _24 := call(gas(), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _14, _4, /** @src 81:757:775  \"vm.stopBroadcast()\" */ _23, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _3, /** @src 81:757:775  \"vm.stopBroadcast()\" */ _23, /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _4)\n                                /// @src 81:757:775  \"vm.stopBroadcast()\"\n                                if iszero(_24)\n                                {\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    let pos_5 := mload(_2)\n                                    returndatacopy(pos_5, _4, returndatasize())\n                                    revert(pos_5, returndatasize())\n                                }\n                                /// @src 81:757:775  \"vm.stopBroadcast()\"\n                                if _24\n                                {\n                                    finalize_allocation(_23)\n                                    /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                                    if _4 { revert(_4, _4) }\n                                }\n                                let memPos := mload(_2)\n                                mstore(memPos, _9)\n                                mstore(add(memPos, /** @src 81:592:606  \"config.account\" */ 32), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ _20)\n                                return(memPos, _2)\n                            }\n                            case 0xc0406226 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                return(_4, _4)\n                            }\n                            case 0xf8ccbf47 {\n                                if callvalue() { revert(_4, _4) }\n                                if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                                let value := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 81:236:836  \"contract DeployMinimal is Script {...\" */ 0xff)\n                                let memPos_1 := mload(_2)\n                                mstore(memPos_1, iszero(iszero(value)))\n                                return(memPos_1, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function finalize_allocation(memPtr)\n                    {\n                        if gt(memPtr, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, memPtr)\n                    }\n                    function abi_decode_address_fromMemory(offset) -> value\n                    {\n                        value := mload(offset)\n                        if iszero(eq(value, and(value, sub(shl(160, /** @src 81:465:483  \"new HelperConfig()\" */ 1), 1))))\n                        /// @src 81:236:836  \"contract DeployMinimal is Script {...\"\n                        { revert(0, 0) }\n                    }\n                }\n                /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 82:\"script/HelperConfig.s.sol\"\n                object \"HelperConfig_51403\" {\n                    code {\n                        {\n                            /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                            mstore(64, memoryguard(0x80))\n                            if callvalue() { revert(0, 0) }\n                            sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ not(16711935)), 65537))\n                            let memPtr := allocate_memory()\n                            mstore(memPtr, 0)\n                            mstore(add(memPtr, 32), 0)\n                            /// @src 82:1670:1765  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let expr_mpos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ allocate_memory()\n                            /// @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\"\n                            mstore(expr_mpos, /** @src 82:1697:1739  \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" */ 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789)\n                            /// @src 82:1670:1765  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let _1 := add(expr_mpos, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32)\n                            /// @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\"\n                            mstore(_1, 0x643315c9be056cdea171f4e7b2222a4ddab9f88d)\n                            /// @src 82:466:474  \"11155111\"\n                            mstore(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0, /** @src 82:466:474  \"11155111\" */ 0xaa36a7)\n                            mstore(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32, /** @src 82:991:1005  \"networkConfigs\" */ 0x0f)\n                            /// @src 82:466:474  \"11155111\"\n                            let dataSlot := keccak256(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0, 64)\n                            /// @src 82:466:474  \"11155111\"\n                            let _2 := sub(shl(160, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 1), 1)\n                            /// @src 82:466:474  \"11155111\"\n                            let _3 := and(mload(expr_mpos), _2)\n                            let _4 := not(sub(shl(160, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 1), 1))\n                            /// @src 82:466:474  \"11155111\"\n                            sstore(dataSlot, or(and(sload(dataSlot), _4), _3))\n                            let memberSlot := add(dataSlot, /** @src 18:3166:3170  \"true\" */ 0x01)\n                            /// @src 82:466:474  \"11155111\"\n                            sstore(memberSlot, or(and(sload(memberSlot), _4), and(mload(_1), _2)))\n                            /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                            let _5 := mload(64)\n                            let _6 := datasize(\"HelperConfig_51403_deployed\")\n                            codecopy(_5, dataoffset(\"HelperConfig_51403_deployed\"), _6)\n                            return(_5, _6)\n                        }\n                        function allocate_memory() -> memPtr\n                        {\n                            memPtr := mload(64)\n                            let newFreePtr := add(memPtr, 64)\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                        }\n                    }\n                    /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 82:\"script/HelperConfig.s.sol\"\n                    object \"HelperConfig_51403_deployed\" {\n                        code {\n                            {\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                mstore(_1, memoryguard(0x80))\n                                if iszero(lt(calldatasize(), 4))\n                                {\n                                    let _2 := 0\n                                    switch shr(224, calldataload(_2))\n                                    case 0x12900da8 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let ret := fun_getOrCreateAnvilEthConfig()\n                                        let memPos := mload(_1)\n                                        return(memPos, sub(abi_encode_struct_NetworkConfig(memPos, ret), memPos))\n                                    }\n                                    case 0x209c25eb {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                        let ret_1 := fun_getConfigByChainId(calldataload(4))\n                                        let memPos_1 := mload(_1)\n                                        return(memPos_1, sub(abi_encode_struct_NetworkConfig(memPos_1, ret_1), memPos_1))\n                                    }\n                                    case 0x7b99b603 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                        mstore(_2, calldataload(4))\n                                        mstore(32, /** @src 82:894:957  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ 15)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let dataSlot := keccak256(_2, _1)\n                                        let _3 := sub(shl(160, 1), 1)\n                                        let cleaned := and(sload(/** @src 82:894:957  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ dataSlot), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _3)\n                                        let cleaned_1 := and(sload(/** @src 82:894:957  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ add(dataSlot, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 1)), _3)\n                                        let memPos_2 := mload(_1)\n                                        return(memPos_2, sub(abi_encode_address_address(memPos_2, cleaned, cleaned_1), memPos_2))\n                                    }\n                                    case 0xa60f7516 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let _4 := sub(shl(160, 1), 1)\n                                        let cleaned_2 := and(sload(/** @src 82:848:887  \"NetworkConfig public localNetworkConfig\" */ 13), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _4)\n                                        let cleaned_3 := and(sload(/** @src 82:848:887  \"NetworkConfig public localNetworkConfig\" */ 14), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _4)\n                                        let memPos_3 := mload(_1)\n                                        return(memPos_3, sub(abi_encode_address_address(memPos_3, cleaned_2, cleaned_3), memPos_3))\n                                    }\n                                    case 0xba3ec354 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr := mload(_1)\n                                        finalize_allocation(memPtr)\n                                        mstore(memPtr, _2)\n                                        mstore(add(memPtr, 32), _2)\n                                        let memPtr_1 := mload(_1)\n                                        finalize_allocation(memPtr_1)\n                                        mstore(memPtr_1, _2)\n                                        mstore(/** @src 82:1876:1939  \"NetworkConfig({entryPoint: address(0), account: BURNER_WALLET})\" */ add(memPtr_1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32), /** @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\" */ 0x643315c9be056cdea171f4e7b2222a4ddab9f88d)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let memPos_4 := mload(_1)\n                                        return(memPos_4, sub(abi_encode_struct_NetworkConfig(memPos_4, memPtr_1), memPos_4))\n                                    }\n                                    case 0xc28975d1 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr_2 := mload(_1)\n                                        finalize_allocation(memPtr_2)\n                                        mstore(memPtr_2, _2)\n                                        mstore(add(memPtr_2, 32), _2)\n                                        let memPtr_3 := mload(_1)\n                                        finalize_allocation(memPtr_3)\n                                        mstore(memPtr_3, /** @src 82:1697:1739  \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" */ 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        mstore(/** @src 82:1670:1765  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\" */ add(memPtr_3, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32), /** @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\" */ 0x643315c9be056cdea171f4e7b2222a4ddab9f88d)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let memPos_5 := mload(_1)\n                                        return(memPos_5, sub(abi_encode_struct_NetworkConfig(memPos_5, memPtr_3), memPos_5))\n                                    }\n                                    case 0xc3f909d4 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr_4 := mload(_1)\n                                        finalize_allocation(memPtr_4)\n                                        mstore(memPtr_4, _2)\n                                        mstore(add(memPtr_4, 32), _2)\n                                        /// @src 82:1137:1177  \"return getConfigByChainId(block.chainid)\"\n                                        let var_mpos := /** @src 82:1144:1177  \"getConfigByChainId(block.chainid)\" */ fun_getConfigByChainId(/** @src 82:1163:1176  \"block.chainid\" */ chainid())\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let memPos_6 := mload(_1)\n                                        return(memPos_6, sub(abi_encode_struct_NetworkConfig(memPos_6, var_mpos), memPos_6))\n                                    }\n                                    case 0xf8ccbf47 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let value := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0xff)\n                                        let memPos_7 := mload(_1)\n                                        mstore(memPos_7, iszero(iszero(value)))\n                                        return(memPos_7, 32)\n                                    }\n                                }\n                                revert(0, 0)\n                            }\n                            function abi_encode_struct_NetworkConfig(headStart, value0) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(mload(value0), _1))\n                                mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n                            }\n                            function abi_encode_address_address(headStart, value0, value1) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(value0, _1))\n                                mstore(add(headStart, 32), and(value1, _1))\n                            }\n                            function finalize_allocation(memPtr)\n                            {\n                                let newFreePtr := add(memPtr, 64)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function finalize_allocation_1694(memPtr)\n                            {\n                                if gt(memPtr, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, memPtr)\n                            }\n                            function read_from_storage_reference_type_struct_NetworkConfig() -> value\n                            {\n                                let memPtr := mload(64)\n                                finalize_allocation(memPtr)\n                                value := memPtr\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(memPtr, and(sload(/** @src 82:2045:2063  \"localNetworkConfig\" */ 0x0d), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _1))\n                                mstore(add(memPtr, 32), and(sload(14), _1))\n                            }\n                            /// @ast-id 51402 @src 82:1955:2504  \"function getOrCreateAnvilEthConfig() public returns (NetworkConfig memory) {...\"\n                            function fun_getOrCreateAnvilEthConfig() -> var__mpos\n                            {\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                let memPtr := mload(_1)\n                                finalize_allocation(memPtr)\n                                /// @src -1:-1:-1\n                                let _2 := 0\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(memPtr, /** @src -1:-1:-1 */ _2)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(add(memPtr, 32), /** @src -1:-1:-1 */ _2)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _3 := sload(/** @src 82:2045:2071  \"localNetworkConfig.account\" */ 14)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let cleaned := /** @src -1:-1:-1 */ _2\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _4 := sub(shl(160, 1), 1)\n                                /// @src 82:2041:2139  \"if (localNetworkConfig.account != address(0)) {...\"\n                                if /** @src 82:2045:2085  \"localNetworkConfig.account != address(0)\" */ iszero(iszero(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ and(_3, _4)))\n                                /// @src 82:2041:2139  \"if (localNetworkConfig.account != address(0)) {...\"\n                                {\n                                    /// @src 82:2102:2127  \"return localNetworkConfig\"\n                                    var__mpos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                                    /// @src 82:2102:2127  \"return localNetworkConfig\"\n                                    leave\n                                }\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _5 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                if iszero(extcodesize(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5))\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src -1:-1:-1 */ _2, _2)\n                                }\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                let _6 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                mstore(_6, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(224, 0x7fec2a8d))\n                                let _7 := 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(/** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ add(_6, 4), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _7)\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                let _8 := call(gas(), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5, /** @src -1:-1:-1 */ _2, /** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ _6, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ 36, /** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ _6, /** @src -1:-1:-1 */ _2)\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                if iszero(_8)\n                                {\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                if _8\n                                {\n                                    finalize_allocation_1694(_6)\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    cleaned := /** @src -1:-1:-1 */ _2\n                                }\n                                /// @src 82:2299:2315  \"new EntryPoint()\"\n                                let _9 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 82:2299:2315  \"new EntryPoint()\"\n                                let _10 := datasize(\"EntryPoint_2097\")\n                                let _11 := add(_9, _10)\n                                if or(gt(_11, 0xffffffffffffffff), lt(_11, _9))\n                                {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ 4, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0x41)\n                                    revert(/** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ 36)\n                                }\n                                /// @src 82:2299:2315  \"new EntryPoint()\"\n                                datacopy(_9, dataoffset(\"EntryPoint_2097\"), _10)\n                                let expr_address := create(/** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:2299:2315  \"new EntryPoint()\" */ _9, sub(_11, _9))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_1 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_1, /** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5))\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src 82:2083:2084  \"0\" */ cleaned, cleaned)\n                                }\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                let _12 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                mstore(_12, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(225, 0x3b756e9b))\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                let _13 := call(gas(), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5, /** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:2326:2344  \"vm.stopBroadcast()\" */ _12, /** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ 4, /** @src 82:2326:2344  \"vm.stopBroadcast()\" */ _12, /** @src 82:2083:2084  \"0\" */ cleaned)\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                if iszero(_13)\n                                {\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_2 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_2, /** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                if _13\n                                {\n                                    finalize_allocation_1694(_12)\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    if cleaned\n                                    {\n                                        revert(/** @src 82:2083:2084  \"0\" */ cleaned, cleaned)\n                                    }\n                                }\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _14 := and(/** @src 82:2405:2424  \"address(entryPoint)\" */ expr_address, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _4)\n                                let memPtr_1 := mload(_1)\n                                finalize_allocation(memPtr_1)\n                                mstore(memPtr_1, _14)\n                                mstore(/** @src 82:2378:2458  \"NetworkConfig({entryPoint: address(entryPoint), account: ANVIL_DEFAULT_ACCOUNT})\" */ add(memPtr_1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _7)\n                                let _15 := shl(160, 0xffffffffffffffffffffffff)\n                                sstore(/** @src 82:2045:2063  \"localNetworkConfig\" */ 0x0d, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 82:2045:2063  \"localNetworkConfig\" */ 0x0d), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _15), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _14))\n                                /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                sstore(/** @src 82:2045:2071  \"localNetworkConfig.account\" */ 14, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 82:2045:2071  \"localNetworkConfig.account\" */ 14), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _15), _7))\n                                /// @src 82:2471:2496  \"return localNetworkConfig\"\n                                var__mpos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                            }\n                            /// @ast-id 51326 @src 82:1193:1570  \"function getConfigByChainId(uint256 chainId) public returns (NetworkConfig memory) {...\"\n                            function fun_getConfigByChainId(var_chainId) -> var_mpos\n                            {\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let memPtr := mload(64)\n                                finalize_allocation(memPtr)\n                                /// @src -1:-1:-1\n                                let _1 := 0\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(memPtr, /** @src -1:-1:-1 */ _1)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(add(memPtr, 32), /** @src -1:-1:-1 */ _1)\n                                /// @src 82:1287:1563  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                switch /** @src 82:1291:1316  \"chainId == LOCAL_CHAIN_ID\" */ eq(var_chainId, /** @src 82:568:573  \"31337\" */ 0x7a69)\n                                case /** @src 82:1287:1563  \"if (chainId == LOCAL_CHAIN_ID) {...\" */ 0 {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ var_chainId)\n                                    mstore(32, /** @src 82:1389:1403  \"networkConfigs\" */ 0x0f)\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    let _2 := sub(shl(160, 1), 1)\n                                    /// @src 82:1385:1563  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    switch /** @src 82:1389:1434  \"networkConfigs[chainId].account != address(0)\" */ iszero(iszero(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ and(sload(/** @src 82:1389:1420  \"networkConfigs[chainId].account\" */ add(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ keccak256(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 64), /** @src 82:1389:1420  \"networkConfigs[chainId].account\" */ 1)), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _2)))\n                                    case /** @src 82:1385:1563  \"if (networkConfigs[chainId].account != address(0)) {...\" */ 0 {\n                                        /// @src 82:1521:1551  \"HelperConfig__InvalidChainId()\"\n                                        let _3 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(64)\n                                        /// @src 82:1521:1551  \"HelperConfig__InvalidChainId()\"\n                                        mstore(_3, shl(225, 0x64780a77))\n                                        revert(_3, 4)\n                                    }\n                                    default /// @src 82:1385:1563  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    {\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        mstore(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ var_chainId)\n                                        mstore(32, /** @src 82:1389:1403  \"networkConfigs\" */ 0x0f)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let _4 := keccak256(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 64)\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation(memPtr_1)\n                                        mstore(memPtr_1, and(sload(_4), _2))\n                                        mstore(add(memPtr_1, 32), and(sload(add(_4, /** @src 82:1389:1420  \"networkConfigs[chainId].account\" */ 1)), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _2))\n                                        /// @src 82:1451:1481  \"return networkConfigs[chainId]\"\n                                        var_mpos := memPtr_1\n                                        leave\n                                    }\n                                }\n                                default /// @src 82:1287:1563  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                {\n                                    /// @src 82:1333:1367  \"return getOrCreateAnvilEthConfig()\"\n                                    var_mpos := /** @src 82:1340:1367  \"getOrCreateAnvilEthConfig()\" */ fun_getOrCreateAnvilEthConfig()\n                                    /// @src 82:1333:1367  \"return getOrCreateAnvilEthConfig()\"\n                                    leave\n                                }\n                            }\n                        }\n                        /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 9:\"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol\", 10:\"lib/account-abstraction/contracts/interfaces/INonceManager.sol\", 12:\"lib/account-abstraction/contracts/interfaces/IStakeManager.sol\", 72:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 77:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 78:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\"\n                        object \"EntryPoint_2097\" {\n                            code {\n                                {\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _1 := memoryguard(0xa0)\n                                    mstore(64, _1)\n                                    if callvalue() { revert(0, 0) }\n                                    /// @src 72:1713:1714  \"1\"\n                                    sstore(/** @src 72:1917:1938  \"_status = NOT_ENTERED\" */ 0x02, /** @src 72:1713:1714  \"1\" */ 0x01)\n                                    /// @src 0:986:1005  \"new SenderCreator()\"\n                                    let _2 := datasize(\"SenderCreator_2414\")\n                                    let _3 := add(_1, _2)\n                                    if or(gt(_3, sub(shl(64, 1), 1)), lt(_3, _1))\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                        mstore(4, 0x41)\n                                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                    }\n                                    /// @src 0:986:1005  \"new SenderCreator()\"\n                                    datacopy(_1, dataoffset(\"SenderCreator_2414\"), _2)\n                                    let expr_address := create(/** @src -1:-1:-1 */ 0, /** @src 0:986:1005  \"new SenderCreator()\" */ _1, sub(_3, _1))\n                                    if iszero(expr_address)\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let pos := mload(64)\n                                        returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        revert(pos, returndatasize())\n                                    }\n                                    /// @src 0:986:1005  \"new SenderCreator()\"\n                                    mstore(128, expr_address)\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _4 := mload(64)\n                                    let _5 := datasize(\"EntryPoint_2097_deployed\")\n                                    codecopy(_4, dataoffset(\"EntryPoint_2097_deployed\"), _5)\n                                    setimmutable(_4, \"35\", mload(/** @src 0:986:1005  \"new SenderCreator()\" */ 128))\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    return(_4, _5)\n                                }\n                            }\n                            /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 1:\"lib/account-abstraction/contracts/core/Helpers.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 5:\"lib/account-abstraction/contracts/core/UserOperationLib.sol\", 14:\"lib/account-abstraction/contracts/utils/Exec.sol\", 72:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 77:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\"\n                            object \"EntryPoint_2097_deployed\" {\n                                code {\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(64, memoryguard(0x80))\n                                        if iszero(lt(calldatasize(), 4))\n                                        {\n                                            switch shr(224, calldataload(0))\n                                            case 0x0042dc53 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 512) { revert(0, 0) }\n                                                let offset := calldataload(4)\n                                                let _1 := 0xffffffffffffffff\n                                                if gt(offset, _1) { revert(0, 0) }\n                                                if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                                                let array := abi_decode_available_length_bytes(add(offset, 36), calldataload(add(4, offset)), calldatasize())\n                                                let _2 := add(calldatasize(), not(35))\n                                                if slt(_2, 0x01c0) { revert(0, 0) }\n                                                let memPtr := mload(64)\n                                                finalize_allocation_26259(memPtr)\n                                                if slt(_2, 0x0140) { revert(0, 0) }\n                                                let memPtr_1 := mload(64)\n                                                finalize_allocation_26260(memPtr_1)\n                                                let value := calldataload(36)\n                                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(memPtr_1, value)\n                                                let _3 := 0x20\n                                                mstore(add(memPtr_1, _3), calldataload(68))\n                                                mstore(add(memPtr_1, 64), calldataload(100))\n                                                mstore(add(memPtr_1, 96), calldataload(132))\n                                                mstore(add(memPtr_1, 128), calldataload(164))\n                                                mstore(add(memPtr_1, 0xa0), calldataload(196))\n                                                mstore(add(memPtr_1, 192), calldataload(228))\n                                                let value_1 := calldataload(260)\n                                                if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(add(memPtr_1, 224), value_1)\n                                                mstore(add(memPtr_1, 256), calldataload(292))\n                                                mstore(add(memPtr_1, 288), calldataload(324))\n                                                mstore(memPtr, memPtr_1)\n                                                mstore(add(memPtr, _3), calldataload(356))\n                                                mstore(add(memPtr, 64), calldataload(388))\n                                                mstore(add(memPtr, 96), calldataload(420))\n                                                mstore(add(memPtr, 128), calldataload(452))\n                                                let offset_1 := calldataload(484)\n                                                if gt(offset_1, _1) { revert(0, 0) }\n                                                let value2, value3 := abi_decode_bytes_calldata(add(4, offset_1), calldatasize())\n                                                /// @src 0:11732:11741  \"gasleft()\"\n                                                let expr := gas()\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(/** @src 0:11759:11786  \"msg.sender == address(this)\" */ eq(/** @src 0:11759:11769  \"msg.sender\" */ caller(), /** @src 0:11781:11785  \"this\" */ address()))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_2 := mload(64)\n                                                    mstore(memPtr_2, shl(229, 4594637))\n                                                    mstore(add(memPtr_2, 4), _3)\n                                                    mstore(add(memPtr_2, 36), 23)\n                                                    mstore(add(memPtr_2, 68), \"AA92 internal call only\")\n                                                    revert(memPtr_2, 100)\n                                                }\n                                                /// @src 0:11854:11868  \"opInfo.mUserOp\"\n                                                let _mpos := mload(memPtr)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _4 := mload(/** @src 0:11902:11922  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let r := shr(6, mul(/** @src 0:12058:12067  \"gasleft()\" */ gas(), /** @src 0:12070:12072  \"63\" */ 0x3f))\n                                                /// @src 0:12037:12368  \"if (...\"\n                                                if /** @src 0:12058:12195  \"gasleft() * 63 / 64 <...\" */ lt(r, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(add(_4, mload(/** @src 0:12127:12158  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))), /** @src 0:1297:1302  \"10000\" */ 0x2710))\n                                                /// @src 0:12037:12368  \"if (...\"\n                                                {\n                                                    /// @src 0:12228:12354  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:12228:12354  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                                    revert(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, _3)\n                                                }\n                                                /// @src 0:12388:12450  \"IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded\"\n                                                let var_mode := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:12464:12479  \"callData.length\"\n                                                let expr_1 := /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12464:12479  \"callData.length\" */ array)\n                                                /// @src 0:12460:13044  \"if (callData.length > 0) {...\"\n                                                if /** @src 0:12464:12483  \"callData.length > 0\" */ iszero(iszero(expr_1))\n                                                /// @src 0:12460:13044  \"if (callData.length > 0) {...\"\n                                                {\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12524:12538  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:12580:13034  \"if (!success) {...\"\n                                                    if /** @src 0:12584:12592  \"!success\" */ iszero(/** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ call(_4, cleaned, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ add(array, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ expr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0))\n                                                    /// @src 0:12580:13034  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$len := returndatasize()\n                                                        /// @src 0:1543:1547  \"2048\"\n                                                        let _5 := 0x0800\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        if gt(usr$len, /** @src 0:1543:1547  \"2048\" */ _5)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        {\n                                                            usr$len := /** @src 0:1543:1547  \"2048\" */ _5\n                                                        }\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$ptr := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(usr$ptr, usr$len)\n                                                        returndatacopy(add(usr$ptr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                        /// @src 0:12693:12963  \"if (result.length > 0) {...\"\n                                                        if /** @src 0:12697:12714  \"result.length > 0\" */ iszero(iszero(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12697:12710  \"result.length\" */ usr$ptr)))\n                                                        /// @src 0:12693:12963  \"if (result.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:1543:1547  \"2048\"\n                                                            let _6 := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                            let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12837:12851  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                            let _7 := mload(/** @src 0:12877:12890  \"mUserOp.nonce\" */ add(_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                            /// @src 0:12743:12944  \"UserOperationRevertReason(...\"\n                                                            let _8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            mstore(_8, _7)\n                                                            /// @src 0:1543:1547  \"2048\"\n                                                            mstore(add(_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 64)\n                                                            /// @src 0:12743:12944  \"UserOperationRevertReason(...\"\n                                                            log3(_8, sub(/** @src 0:1543:1547  \"2048\" */ abi_encode_bytes(usr$ptr, add(_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)), /** @src 0:12743:12944  \"UserOperationRevertReason(...\" */ _8), 0x1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201, _6, cleaned_1)\n                                                        }\n                                                        /// @src 0:12980:13019  \"mode = IPaymaster.PostOpMode.opReverted\"\n                                                        var_mode := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1\n                                                    }\n                                                }\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let diff := sub(expr, /** @src 0:13107:13116  \"gasleft()\" */ gas())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _9 := add(diff, mload(add(memPtr, 128)))\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let _10 := abi_decode_available_length_bytes(/** @src 0:13155:13203  \"_postExecution(mode, opInfo, context, actualGas)\" */ value2, value3, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldatasize())\n                                                /// @src 0:13155:13203  \"_postExecution(mode, opInfo, context, actualGas)\"\n                                                let var_actualGas := _9\n                                                let var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:26799:26808  \"gasleft()\"\n                                                let expr_2 := gas()\n                                                /// @src 0:26842:26863  \"address refundAddress\"\n                                                let var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:26842:26863  \"address refundAddress\"\n                                                let var_refundAddress_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:26907:26921  \"opInfo.mUserOp\"\n                                                let _mpos_1 := mload(memPtr)\n                                                /// @src 0:26954:26980  \"getUserOpGasPrice(mUserOp)\"\n                                                let expr_3 := fun_getUserOpGasPrice(_mpos_1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let cleaned_2 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27015:27032  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                switch /** @src 0:27050:27073  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                                case /** @src 0:27046:27885  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                    /// @src 0:27162:27187  \"refundAddress = paymaster\"\n                                                    var_refundAddress := cleaned_2\n                                                    /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                    if /** @src 0:27209:27227  \"context.length > 0\" */ iszero(iszero(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27209:27223  \"context.length\" */ _10)))\n                                                    /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                    {\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if iszero(lt(var_mode, 3))\n                                                        {\n                                                            mstore(0, shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(0, 36)\n                                                        }\n                                                        /// @src 0:27309:27853  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        if /** @src 0:27313:27357  \"mode != IPaymaster.PostOpMode.postOpReverted\" */ iszero(eq(var_mode, /** @src 0:27321:27357  \"IPaymaster.PostOpMode.postOpReverted\" */ 2))\n                                                        /// @src 0:27309:27853  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        {\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            let _11 := mload(/** @src 0:27452:27483  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            if iszero(extcodesize(cleaned_2))\n                                                            {\n                                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                revert(0, 0)\n                                                            }\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            let _12 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            mstore(_12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x7c627b21))\n                                                            mstore(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ add(_12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_mode)\n                                                            mstore(add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 128)\n                                                            let tail := abi_encode_bytes(_10, add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132))\n                                                            mstore(add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), mul(/** @src 0:27267:27287  \"actualGas * gasPrice\" */ _9, expr_3))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), expr_3)\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            let trySuccessCondition := call(_11, cleaned_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, sub(tail, _12), _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            if trySuccessCondition\n                                                            {\n                                                                finalize_allocation_26283(_12)\n                                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                var_refundAddress_1 := 0\n                                                            }\n                                                            /// @src 0:27385:27831  \"try IPaymaster(paymaster).postOp{...\"\n                                                            switch iszero(trySuccessCondition)\n                                                            case 0 { }\n                                                            default {\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$len_1 := returndatasize()\n                                                                /// @src 0:1543:1547  \"2048\"\n                                                                let _13 := 0x0800\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                if gt(usr$len_1, /** @src 0:1543:1547  \"2048\" */ _13)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                {\n                                                                    usr$len_1 := /** @src 0:1543:1547  \"2048\" */ _13\n                                                                }\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$ptr_1 := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(usr$ptr_1, usr$len_1)\n                                                                returndatacopy(add(usr$ptr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src -1:-1:-1 */ var_refundAddress_1, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                                /// @src 0:27782:27804  \"PostOpReverted(reason)\"\n                                                                let _14 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                                /// @src 0:27782:27804  \"PostOpReverted(reason)\"\n                                                                mstore(_14, shl(226, 0x2b5e552f))\n                                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                mstore(/** @src 0:27782:27804  \"PostOpReverted(reason)\" */ add(_14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _3)\n                                                                /// @src 0:27782:27804  \"PostOpReverted(reason)\"\n                                                                revert(_14, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:27782:27804  \"PostOpReverted(reason)\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:27782:27804  \"PostOpReverted(reason)\" */ _14))\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                default /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                {\n                                                    /// @src 0:27093:27123  \"refundAddress = mUserOp.sender\"\n                                                    var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27109:27123  \"mUserOp.sender\" */ _mpos_1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                }\n                                                /// @src 0:27898:27929  \"actualGas += preGas - gasleft()\"\n                                                var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(_9, /** @src 0:1543:1547  \"2048\" */ sub(expr_2, /** @src 0:27920:27929  \"gasleft()\" */ gas()))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _15 := mload(/** @src 0:28052:28072  \"mUserOp.callGasLimit\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let sum := add(_15, mload(/** @src 0:28075:28106  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0)))\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let diff_1 := sub(var_actualGas, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(add(memPtr, 128)))\n                                                /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                if /** @src 0:28316:28352  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff_1)\n                                                /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                {\n                                                    /// @src 0:28538:28567  \"actualGas += unusedGasPenalty\"\n                                                    var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:28396:28432  \"executionGasLimit - executionGasUsed\" */ sum, diff_1), /** @src 0:1596:1598  \"10\" */ 0x0a), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                                }\n                                                /// @src 0:28614:28650  \"actualGasCost = actualGas * gasPrice\"\n                                                var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:28630:28650  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _16 := mload(add(memPtr, 64))\n                                                /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                switch /** @src 0:28714:28737  \"prefund < actualGasCost\" */ lt(_16, var_actualGasCost)\n                                                case /** @src 0:28710:29503  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                    /// @src 0:29291:29331  \"_incrementDeposit(refundAddress, refund)\"\n                                                    pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:29250:29273  \"prefund - actualGasCost\" */ _16, var_actualGasCost)))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let _17 := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                    /// @src 0:6324:6338  \"opInfo.mUserOp\"\n                                                    let _mpos_2 := mload(memPtr)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_3 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6324:6345  \"opInfo.mUserOp.sender\" */ _mpos_2), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    let cleaned_4 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6359:6383  \"opInfo.mUserOp.paymaster\" */ add(_mpos_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                    let _18 := mload(/** @src 0:6397:6417  \"opInfo.mUserOp.nonce\" */ add(_mpos_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                    /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                                    let _19 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                    mstore(_19, _18)\n                                                    mstore(add(_19, _3), /** @src 0:29364:29405  \"mode == IPaymaster.PostOpMode.opSucceeded\" */ iszero(var_mode))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(add(_19, 64), var_actualGasCost)\n                                                    mstore(add(_19, 96), var_actualGas)\n                                                    /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                                    log4(_19, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6261:6498  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _17, cleaned_3, cleaned_4)\n                                                }\n                                                default /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                {\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:28757:29195  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    switch /** @src 0:28761:28805  \"mode == IPaymaster.PostOpMode.postOpReverted\" */ eq(var_mode, /** @src 0:28769:28805  \"IPaymaster.PostOpMode.postOpReverted\" */ 2)\n                                                    case /** @src 0:28757:29195  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\" */ 0 {\n                                                        /// @src 0:29031:29177  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:29031:29177  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                                    }\n                                                    default /// @src 0:28757:29195  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    {\n                                                        /// @src 0:28829:28852  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _16\n                                                        /// @src 0:28892:28898  \"opInfo\"\n                                                        fun_emitPrefundTooLow(memPtr)\n                                                        /// @src 0:28974:28983  \"actualGas\"\n                                                        fun_emitUserOperationEvent(memPtr, _16, var_actualGas)\n                                                    }\n                                                }\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos := mload(64)\n                                                mstore(memPos, var_actualGasCost)\n                                                return(memPos, _3)\n                                            }\n                                            case 0x01ffc9a7 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_2 := calldataload(4)\n                                                let _20 := and(value_2, shl(224, 0xffffffff))\n                                                if iszero(eq(value_2, _20)) { revert(0, 0) }\n                                                /// @src 0:1860:2034  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_4 := /** @src 0:1860:1974  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId)\" */ eq(_20, /** @src 0:1876:1973  \"type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId\" */ shl(225, 0x307e35b7))\n                                                /// @src 0:1860:2034  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_4 := /** @src 0:1990:2034  \"interfaceId == type(IEntryPoint).interfaceId\" */ eq(_20, /** @src 0:1876:1905  \"type(IEntryPoint).interfaceId\" */ shl(227, 0x122a0e9b))\n                                                }\n                                                /// @src 0:1860:2096  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_5 := expr_4\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_5 := /** @src 0:2050:2096  \"interfaceId == type(IStakeManager).interfaceId\" */ eq(_20, /** @src 0:1908:1939  \"type(IStakeManager).interfaceId\" */ shl(224, 0xcf28ef97))\n                                                }\n                                                /// @src 0:1860:2158  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_6 := expr_5\n                                                if iszero(expr_5)\n                                                {\n                                                    expr_6 := /** @src 0:2112:2158  \"interfaceId == type(INonceManager).interfaceId\" */ eq(_20, /** @src 0:1942:1973  \"type(INonceManager).interfaceId\" */ shl(224, 0x3e84f021))\n                                                }\n                                                /// @src 0:1860:2210  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_7 := expr_6\n                                                if iszero(expr_6)\n                                                {\n                                                    expr_7 := /** @src 77:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_20, /** @src 77:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                                }\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_1 := mload(64)\n                                                mstore(memPos_1, iszero(iszero(expr_7)))\n                                                return(memPos_1, 32)\n                                            }\n                                            case 0x0396cb60 {\n                                                let _21 := 32\n                                                if slt(add(calldatasize(), not(3)), _21) { revert(0, 0) }\n                                                let value_3 := calldataload(4)\n                                                let _22 := 0xffffffff\n                                                let _23 := and(value_3, _22)\n                                                if iszero(eq(value_3, _23)) { revert(0, 0) }\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot := keccak256(0, 64)\n                                                if /** @src 4:2457:2476  \"unstakeDelaySec > 0\" */ iszero(_23)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_3 := mload(64)\n                                                    mstore(memPtr_3, shl(229, 4594637))\n                                                    mstore(add(memPtr_3, 4), _21)\n                                                    mstore(add(memPtr_3, 36), 26)\n                                                    mstore(add(memPtr_3, 68), \"must specify unstake delay\")\n                                                    revert(memPtr_3, 100)\n                                                }\n                                                let _24 := sload(/** @src 4:2557:2577  \"info.unstakeDelaySec\" */ add(dataSlot, 1))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2538:2577  \"unstakeDelaySec >= info.unstakeDelaySec\" */ lt(_23, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(120, _24), _22))\n                                                {\n                                                    let memPtr_4 := mload(64)\n                                                    mstore(memPtr_4, shl(229, 4594637))\n                                                    mstore(add(memPtr_4, 4), _21)\n                                                    mstore(add(memPtr_4, 36), 28)\n                                                    mstore(add(memPtr_4, 68), \"cannot decrease unstake time\")\n                                                    revert(memPtr_4, 100)\n                                                }\n                                                let _25 := 0xffffffffffffffffffffffffffff\n                                                /// @src 4:2657:2679  \"info.stake + msg.value\"\n                                                let expr_8 := checked_add_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(8, _24), _25), /** @src 4:2670:2679  \"msg.value\" */ callvalue())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2697:2706  \"stake > 0\" */ iszero(expr_8)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_5 := mload(64)\n                                                    mstore(memPtr_5, shl(229, 4594637))\n                                                    mstore(add(memPtr_5, 4), _21)\n                                                    mstore(add(memPtr_5, 36), 18)\n                                                    mstore(add(memPtr_5, 68), \"no stake specified\")\n                                                    revert(memPtr_5, 100)\n                                                }\n                                                if /** @src 4:2747:2773  \"stake <= type(uint112).max\" */ gt(expr_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25)\n                                                {\n                                                    let memPtr_6 := mload(64)\n                                                    mstore(memPtr_6, shl(229, 4594637))\n                                                    mstore(add(memPtr_6, 4), _21)\n                                                    mstore(add(memPtr_6, 36), 14)\n                                                    mstore(add(memPtr_6, 68), \"stake overflow\")\n                                                    revert(memPtr_6, 100)\n                                                }\n                                                let _26 := sload(/** @src 4:2850:2862  \"info.deposit\" */ dataSlot)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPtr_7 := mload(64)\n                                                finalize_allocation_26259(memPtr_7)\n                                                mstore(memPtr_7, _26)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _27 := add(memPtr_7, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21)\n                                                mstore(_27, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _28 := add(memPtr_7, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                mstore(_28, and(/** @src 4:2894:2908  \"uint112(stake)\" */ expr_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25))\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _29 := add(memPtr_7, 96)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_29, _23)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _30 := add(memPtr_7, 128)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_30, 0)\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot_1 := keccak256(0, 64)\n                                                sstore(dataSlot_1, mload(memPtr_7))\n                                                let memberSlot := add(dataSlot_1, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _31 := iszero(iszero(mload(_27)))\n                                                let _32 := sload(memberSlot)\n                                                let _33 := and(shl(8, mload(_28)), 0xffffffffffffffffffffffffffff00)\n                                                sstore(memberSlot, or(or(_33, or(and(_32, shl(152, 0xffffffffffffffffffffffffff)), and(_31, 255))), and(shl(120, mload(_29)), shl(120, 0xffffffff))))\n                                                update_storage_value_offsett_uint48_to_uint48(memberSlot, and(mload(_30), 0xffffffffffff))\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                let _34 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_34, expr_8)\n                                                mstore(add(_34, _21), _23)\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                log2(_34, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\" */ 0xa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x0bd28e3b {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_4 := calldataload(4)\n                                                let _35 := and(value_4, sub(shl(192, 1), 1))\n                                                if iszero(eq(value_4, _35)) { revert(0, 0) }\n                                                mstore(0, /** @src 2:913:923  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, /** @src 2:893:912  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _36 := keccak256(0, 64)\n                                                mstore(0, _35)\n                                                mstore(32, _36)\n                                                let dataSlot_2 := keccak256(0, 64)\n                                                sstore(dataSlot_2, /** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ increment_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ dataSlot_2)))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x1b2e01b8 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0 := abi_decode_address()\n                                                let value1 := abi_decode_uint192()\n                                                mstore(0, and(value0, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:279:353  \"mapping(address => mapping(uint192 => uint256)) public nonceSequenceNumber\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _37 := keccak256(0, 64)\n                                                mstore(0, and(value1, sub(shl(192, 1), 1)))\n                                                mstore(32, _37)\n                                                let _38 := sload(keccak256(0, 64))\n                                                let memPos_2 := mload(64)\n                                                mstore(memPos_2, _38)\n                                                return(memPos_2, 32)\n                                            }\n                                            case 0x205c2878 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_1 := abi_decode_address()\n                                                let value_5 := calldataload(36)\n                                                mstore(0, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, 0)\n                                                let dataSlot_3 := keccak256(0, 64)\n                                                let _39 := sload(/** @src 4:4852:4864  \"info.deposit\" */ dataSlot_3)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:4834:4864  \"withdrawAmount <= info.deposit\" */ gt(value_5, _39)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_8 := mload(64)\n                                                    mstore(memPtr_8, shl(229, 4594637))\n                                                    mstore(add(memPtr_8, 4), 32)\n                                                    mstore(add(memPtr_8, 36), 25)\n                                                    mstore(add(memPtr_8, 68), \"Withdraw amount too large\")\n                                                    revert(memPtr_8, 100)\n                                                }\n                                                sstore(dataSlot_3, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ checked_sub_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _39, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ value_5))\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                let _40 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                log2(_40, sub(abi_encode_address_payable_uint256(_40, value0_1, value_5), _40), 0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                let expr_component := call(gas(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:5045:5065  \"withdrawAddress.call\" */ value0_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\" */ value_5, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component)\n                                                {\n                                                    let memPtr_9 := mload(64)\n                                                    mstore(memPtr_9, shl(229, 4594637))\n                                                    mstore(add(memPtr_9, 4), 32)\n                                                    mstore(add(memPtr_9, 36), 18)\n                                                    mstore(add(memPtr_9, 68), \"failed to withdraw\")\n                                                    revert(memPtr_9, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0x22cdde4c {\n                                                if callvalue() { revert(0, 0) }\n                                                let _41 := not(3)\n                                                if slt(add(calldatasize(), _41), 32) { revert(0, 0) }\n                                                let offset_2 := calldataload(4)\n                                                if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n                                                if slt(add(sub(calldatasize(), offset_2), _41), 288) { revert(0, 0) }\n                                                let ret := fun_getUserOpHash(add(4, offset_2))\n                                                let memPos_3 := mload(64)\n                                                mstore(memPos_3, ret)\n                                                return(memPos_3, 32)\n                                            }\n                                            case 0x35567e1a {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_2 := abi_decode_address()\n                                                let value1_1 := abi_decode_uint192()\n                                                mstore(0, and(value0_2, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:507:526  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _42 := keccak256(0, 64)\n                                                mstore(0, and(value1_1, sub(shl(192, 1), 1)))\n                                                mstore(32, _42)\n                                                let _43 := sload(keccak256(0, 64))\n                                                let memPos_4 := mload(64)\n                                                mstore(memPos_4, /** @src 2:507:562  \"nonceSequenceNumber[sender][key] | (uint256(key) << 64)\" */ or(_43, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shl(64, /** @src 2:543:555  \"uint256(key)\" */ value1_1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(0xffffffffffffffff))))\n                                                return(memPos_4, 32)\n                                            }\n                                            case 0x5287ce12 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value0_3 := abi_decode_address()\n                                                let memPtr_10 := mload(64)\n                                                finalize_allocation_26259(memPtr_10)\n                                                mstore(memPtr_10, 0)\n                                                mstore(add(memPtr_10, 32), 0)\n                                                mstore(add(memPtr_10, 64), 0)\n                                                mstore(add(memPtr_10, 96), 0)\n                                                mstore(add(memPtr_10, 128), 0)\n                                                mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_4 := keccak256(0, 64)\n                                                let memPtr_11 := mload(64)\n                                                finalize_allocation_26259(memPtr_11)\n                                                let _44 := sload(dataSlot_4)\n                                                mstore(memPtr_11, _44)\n                                                let _45 := sload(add(dataSlot_4, 1))\n                                                let _46 := add(memPtr_11, 32)\n                                                mstore(_46, iszero(iszero(and(_45, 0xff))))\n                                                let _47 := 0xffffffffffffffffffffffffffff\n                                                let _48 := add(memPtr_11, 64)\n                                                mstore(_48, and(shr(8, _45), _47))\n                                                let _49 := 0xffffffff\n                                                let _50 := add(memPtr_11, 96)\n                                                mstore(_50, and(shr(120, _45), _49))\n                                                let _51 := 0xffffffffffff\n                                                let _52 := add(memPtr_11, 128)\n                                                mstore(_52, and(shr(152, _45), _51))\n                                                let memPos_5 := mload(64)\n                                                mstore(memPos_5, _44)\n                                                mstore(add(memPos_5, 32), iszero(iszero(mload(_46))))\n                                                mstore(add(memPos_5, 64), and(mload(_48), _47))\n                                                mstore(add(memPos_5, 96), and(mload(_50), _49))\n                                                mstore(add(memPos_5, 128), and(mload(_52), _51))\n                                                return(memPos_5, 160)\n                                            }\n                                            case 0x70a08231 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let _53 := sload(keccak256(0, 64))\n                                                let memPos_6 := mload(64)\n                                                mstore(memPos_6, _53)\n                                                return(memPos_6, 32)\n                                            }\n                                            case 0x765e827f {\n                                                if callvalue() { revert(0, 0) }\n                                                let param, param_1, param_2 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 72:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:6980:7004  \"new UserOpInfo[](opslen)\"\n                                                let expr_mpos := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(param_1)\n                                                /// @src 0:7044:7057  \"uint256 i = 0\"\n                                                let var_i := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7039:7520  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7059:7069  \"i < opslen\" */ lt(var_i, param_1)\n                                                /// @src 0:7044:7057  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7071:7074  \"i++\"\n                                                    var_i := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7071:7074  \"i++\" */ var_i, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:7071:7074  \"i++\"\n                                                {\n                                                    /// @src 0:7260:7298  \"_validatePrepayment(i, ops[i], opInfo)\"\n                                                    let expr_component_1, expr_component_2 := fun_validatePrepayment(var_i, /** @src 0:7283:7289  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i), /** @src 0:7121:7131  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i)))\n                                                    /// @src 0:21736:21792  \"_getValidationData(...\"\n                                                    let expr_component_3, expr_component_4 := fun_getValidationData(expr_component_1)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _54 := sub(shl(160, 1), 1)\n                                                    /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                    if /** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ expr_component_3, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                    {\n                                                        /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        let _55 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        mstore(_55, shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                        /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        revert(_55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:21922:22018  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_4\n                                                    {\n                                                        /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        let _56 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        mstore(_56, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                        mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                        /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        revert(_56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:22320:22385  \"_getValidationData(...\"\n                                                    let expr_component_5, expr_component_6 := fun_getValidationData(expr_component_2)\n                                                    /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                    if /** @src 0:22399:22425  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:22399:22425  \"pmAggregator != address(0)\" */ expr_component_5, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        let _57 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        mstore(_57, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                        /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        revert(_57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:22509:22615  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_6\n                                                    {\n                                                        /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        let _58 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        mstore(_58, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                        /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        revert(_58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                    }\n                                                }\n                                                /// @src 0:7534:7555  \"uint256 collected = 0\"\n                                                let var_collected := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7574:7591  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:7574:7591  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:7611:7624  \"uint256 i = 0\"\n                                                let var_i_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7606:7726  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7626:7636  \"i < opslen\" */ lt(var_i_1, param_1)\n                                                /// @src 0:7611:7624  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7638:7641  \"i++\"\n                                                    var_i_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7638:7641  \"i++\" */ var_i_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:7638:7641  \"i++\"\n                                                {\n                                                    /// @src 0:7692:7698  \"ops[i]\"\n                                                    let expr_offset := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i_1)\n                                                    /// @src 0:7661:7711  \"collected += _executeUserOp(i, ops[i], opInfos[i])\"\n                                                    var_collected := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_collected, /** @src 0:7674:7711  \"_executeUserOp(i, ops[i], opInfos[i])\" */ fun_executeUserOp(var_i_1, expr_offset, /** @src 0:7700:7710  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i_1))))\n                                                }\n                                                /// @src 0:7765:7774  \"collected\"\n                                                fun_compensate(param_2, var_collected)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 72:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                return(0, 0)\n                                            }\n                                            case 0x850aaf62 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_4 := abi_decode_address()\n                                                let offset_3 := calldataload(36)\n                                                if gt(offset_3, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value1_2, value2_1 := abi_decode_bytes_calldata(add(4, offset_3), calldatasize())\n                                                /// @src 0:31052:31077  \"target.delegatecall(data)\"\n                                                let _59 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                calldatacopy(_59, value1_2, value2_1)\n                                                let _60 := add(_59, value2_1)\n                                                mstore(_60, 0)\n                                                /// @src 0:31052:31077  \"target.delegatecall(data)\"\n                                                let expr_component_7 := delegatecall(gas(), value0_4, _59, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _60, /** @src 0:31052:31077  \"target.delegatecall(data)\" */ _59), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0)\n                                                /// @src 0:31052:31077  \"target.delegatecall(data)\"\n                                                let expr_component_mpos := extract_returndata()\n                                                /// @src 0:31094:31125  \"DelegateAndRevert(success, ret)\"\n                                                let _61 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:31094:31125  \"DelegateAndRevert(success, ret)\"\n                                                mstore(_61, shl(226, 0x26504155))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ add(_61, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), iszero(iszero(expr_component_7)))\n                                                mstore(add(/** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                /// @src 0:31094:31125  \"DelegateAndRevert(success, ret)\"\n                                                revert(_61, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(expr_component_mpos, add(/** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)), /** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ _61))\n                                            }\n                                            case /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x9b249f69 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let offset_4 := calldataload(4)\n                                                if gt(offset_4, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value0_5, value1_3 := abi_decode_bytes_calldata(add(4, offset_4), calldatasize())\n                                                let _62 := sub(shl(160, 1), 1)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                let _63 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                mstore(_63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                                mstore(/** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ add(_63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 32)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                let _64 := call(gas(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1100:1114  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _62), 0, /** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ _63, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(value0_5, value1_3, add(/** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ _63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ _63), _63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                if iszero(_64)\n                                                {\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let pos := mload(64)\n                                                    returndatacopy(pos, 0, returndatasize())\n                                                    revert(pos, returndatasize())\n                                                }\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                let expr_9 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                if _64\n                                                {\n                                                    let _65 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32\n                                                    /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                    if gt(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ returndatasize()) { _65 := returndatasize() }\n                                                    finalize_allocation(_63, _65)\n                                                    expr_9 := abi_decode_address_fromMemory(_63, add(_63, _65))\n                                                }\n                                                /// @src 0:16922:16949  \"SenderAddressResult(sender)\"\n                                                let _66 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:16922:16949  \"SenderAddressResult(sender)\"\n                                                mstore(_66, shl(225, 0x3653dc03))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16922:16949  \"SenderAddressResult(sender)\" */ add(_66, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), and(expr_9, _62))\n                                                /// @src 0:16922:16949  \"SenderAddressResult(sender)\"\n                                                revert(_66, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                            }\n                                            case 0xb760faf9 {\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                fun_depositTo(abi_decode_address())\n                                                return(0, 0)\n                                            }\n                                            case 0xbb9fe6bf {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                                                mstore(0, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(0x20, 0)\n                                                /// @src 4:3277:3297  \"info.unstakeDelaySec\"\n                                                let _67 := add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3277:3297  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _68 := sload(/** @src 4:3277:3297  \"info.unstakeDelaySec\" */ _67)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_6 := and(shr(120, _68), 0xffffffff)\n                                                if /** @src 4:3277:3302  \"info.unstakeDelaySec != 0\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_6)\n                                                {\n                                                    let memPtr_12 := mload(64)\n                                                    mstore(memPtr_12, shl(229, 4594637))\n                                                    mstore(add(memPtr_12, 4), 0x20)\n                                                    mstore(add(memPtr_12, 36), 10)\n                                                    mstore(add(memPtr_12, 68), \"not staked\")\n                                                    revert(memPtr_12, 100)\n                                                }\n                                                if iszero(and(_68, 0xff))\n                                                {\n                                                    let memPtr_13 := mload(64)\n                                                    mstore(memPtr_13, shl(229, 4594637))\n                                                    mstore(add(memPtr_13, 4), 0x20)\n                                                    mstore(add(memPtr_13, 36), 17)\n                                                    mstore(add(memPtr_13, 68), \"already unstaking\")\n                                                    revert(memPtr_13, 100)\n                                                }\n                                                let _69 := 0xffffffffffff\n                                                let sum_1 := add(and(/** @src 4:3407:3422  \"block.timestamp\" */ timestamp(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _69), value_6)\n                                                if gt(sum_1, _69)\n                                                {\n                                                    mstore(0, shl(224, 0x4e487b71))\n                                                    mstore(4, 0x11)\n                                                    revert(0, 0x24)\n                                                }\n                                                /// @src 4:3456:3488  \"info.withdrawTime = withdrawTime\"\n                                                update_storage_value_offsett_uint48_to_uint48(_67, sum_1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(_67, and(sload(_67), not(255)))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                let _70 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_70, and(sum_1, _69))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                log2(_70, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20, /** @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\" */ 0xfa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xc23a5cea {\n                                                if callvalue() { revert(0, 0) }\n                                                let _71 := 32\n                                                if slt(add(calldatasize(), not(3)), _71) { revert(0, 0) }\n                                                let value0_6 := abi_decode_address()\n                                                mstore(0, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_71, 0)\n                                                /// @src 4:3934:3944  \"info.stake\"\n                                                let _72 := add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3934:3944  \"info.stake\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _73 := sload(/** @src 4:3934:3944  \"info.stake\" */ _72)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_7 := and(shr(8, _73), 0xffffffffffffffffffffffffffff)\n                                                if /** @src 4:3962:3971  \"stake > 0\" */ iszero(value_7)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_14 := mload(64)\n                                                    mstore(memPtr_14, shl(229, 4594637))\n                                                    mstore(add(memPtr_14, 4), _71)\n                                                    mstore(add(memPtr_14, 36), 20)\n                                                    mstore(add(memPtr_14, 68), \"No stake to withdraw\")\n                                                    revert(memPtr_14, 100)\n                                                }\n                                                let value_8 := and(shr(152, _73), 0xffffffffffff)\n                                                if /** @src 4:4014:4035  \"info.withdrawTime > 0\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8)\n                                                {\n                                                    let memPtr_15 := mload(64)\n                                                    mstore(memPtr_15, shl(229, 4594637))\n                                                    mstore(add(memPtr_15, 4), _71)\n                                                    mstore(add(memPtr_15, 36), 29)\n                                                    mstore(add(memPtr_15, 68), \"must call unlockStake() first\")\n                                                    revert(memPtr_15, 100)\n                                                }\n                                                if /** @src 4:4100:4136  \"info.withdrawTime <= block.timestamp\" */ gt(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8, /** @src 4:4121:4136  \"block.timestamp\" */ timestamp())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_16 := mload(64)\n                                                    mstore(memPtr_16, shl(229, 4594637))\n                                                    mstore(add(memPtr_16, 4), _71)\n                                                    mstore(add(memPtr_16, 36), 27)\n                                                    mstore(add(memPtr_16, 68), \"Stake withdrawal is not due\")\n                                                    revert(memPtr_16, 100)\n                                                }\n                                                sstore(_72, and(_73, not(sub(shl(200, 1), 256))))\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                let _74 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                log2(_74, sub(abi_encode_address_payable_uint256(_74, value0_6, value_7), _74), 0xb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                let expr_component_8 := call(gas(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:4371:4391  \"withdrawAddress.call\" */ value0_6, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\" */ value_7, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component_8)\n                                                {\n                                                    let memPtr_17 := mload(64)\n                                                    mstore(memPtr_17, shl(229, 4594637))\n                                                    mstore(add(memPtr_17, 4), _71)\n                                                    mstore(add(memPtr_17, 36), 24)\n                                                    mstore(add(memPtr_17, 68), \"failed to withdraw stake\")\n                                                    revert(memPtr_17, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0xdbed18e0 {\n                                                if callvalue() { revert(0, 0) }\n                                                let param_3, param_4, param_5 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 72:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:8042:8062  \"uint256 totalOps = 0\"\n                                                let var_totalOps := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8077:8090  \"uint256 i = 0\"\n                                                let var_i_2 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8072:8839  \"for (uint256 i = 0; i < opasLen; i++) {...\"\n                                                for { }\n                                                /** @src 0:8092:8103  \"i < opasLen\" */ lt(var_i_2, param_4)\n                                                /// @src 0:8077:8090  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:8105:8108  \"i++\"\n                                                    var_i_2 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8105:8108  \"i++\" */ var_i_2, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:8105:8108  \"i++\"\n                                                {\n                                                    /// @src 0:8160:8179  \"opsPerAggregator[i]\"\n                                                    let expr_offset_1 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_i_2)\n                                                    /// @src 0:8230:8241  \"opa.userOps\"\n                                                    let expr_offset_2, expr_length := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_1, expr_offset_1)\n                                                    /// @src 0:8280:8294  \"opa.aggregator\"\n                                                    let _75 := 32\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _76 := and(/** @src 0:8280:8294  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_1, _75)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:8429:8430  \"1\"\n                                                    let _77 := 0x01\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if /** @src 0:8398:8431  \"address(aggregator) != address(1)\" */ eq(_76, /** @src 0:8429:8430  \"1\" */ _77)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    {\n                                                        let memPtr_18 := mload(64)\n                                                        mstore(memPtr_18, shl(229, 4594637))\n                                                        mstore(add(memPtr_18, 4), /** @src 0:8280:8294  \"opa.aggregator\" */ _75)\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(memPtr_18, 36), 23)\n                                                        mstore(add(memPtr_18, 68), \"AA96 invalid aggregator\")\n                                                        revert(memPtr_18, 100)\n                                                    }\n                                                    /// @src 0:8503:8792  \"if (address(aggregator) != address(0)) {...\"\n                                                    if /** @src 0:8507:8540  \"address(aggregator) != address(0)\" */ iszero(iszero(_76))\n                                                    /// @src 0:8503:8792  \"if (address(aggregator) != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:8660:8673  \"opa.signature\"\n                                                        let expr_offset_3, expr_length_1 := access_calldata_tail_bytes_calldata(expr_offset_1, add(expr_offset_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64))\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if iszero(extcodesize(_76))\n                                                        {\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            revert(0, 0)\n                                                        }\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let _78 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        mstore(_78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x2dd81133))\n                                                        let tail_1 := add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)\n                                                        mstore(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ add(_78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 64)\n                                                        let pos_1 := tail_1\n                                                        mstore(tail_1, expr_length)\n                                                        let _79 := 100\n                                                        pos_1 := add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _79)\n                                                        let tail_2 := add(add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(5, expr_length)), _79)\n                                                        let srcPtr := expr_offset_2\n                                                        let i := 0\n                                                        for { }\n                                                        lt(i, expr_length)\n                                                        {\n                                                            i := add(i, /** @src 0:8429:8430  \"1\" */ _77)\n                                                        }\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        {\n                                                            mstore(pos_1, add(sub(tail_2, /** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(99)))\n                                                            let rel_offset_of_tail := calldataload(srcPtr)\n                                                            if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), expr_offset_2), not(286)))) { revert(0, 0) }\n                                                            tail_2 := abi_encode_struct_PackedUserOperation_calldata(add(rel_offset_of_tail, expr_offset_2), tail_2)\n                                                            srcPtr := add(srcPtr, /** @src 0:8280:8294  \"opa.aggregator\" */ _75)\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            pos_1 := add(pos_1, /** @src 0:8280:8294  \"opa.aggregator\" */ _75)\n                                                        }\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), add(sub(tail_2, /** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(3)))\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let trySuccessCondition_1 := staticcall(gas(), _76, _78, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_3, expr_length_1, tail_2), /** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if trySuccessCondition_1\n                                                        {\n                                                            finalize_allocation_26283(_78)\n                                                        }\n                                                        /// @src 0:8621:8778  \"try aggregator.validateSignatures(ops, opa.signature) {} catch {...\"\n                                                        switch iszero(trySuccessCondition_1)\n                                                        case 0 { }\n                                                        default {\n                                                            /// @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\"\n                                                            let _80 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\"\n                                                            mstore(_80, shl(228, 0x086a9f75))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\" */ add(_80, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _76)\n                                                            /// @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\"\n                                                            revert(_80, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                        }\n                                                    }\n                                                    /// @src 0:8806:8828  \"totalOps += ops.length\"\n                                                    var_totalOps := checked_add_uint256(var_totalOps, /** @src 0:8818:8828  \"ops.length\" */ expr_length)\n                                                }\n                                                /// @src 0:8879:8905  \"new UserOpInfo[](totalOps)\"\n                                                let expr_mpos_1 := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(var_totalOps)\n                                                /// @src 0:8916:8935  \"uint256 opIndex = 0\"\n                                                let var_opIndex := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8950:8963  \"uint256 a = 0\"\n                                                let var_a := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8945:9776  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:8965:8976  \"a < opasLen\" */ lt(var_a, param_4)\n                                                /// @src 0:8950:8963  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:8978:8981  \"a++\"\n                                                    var_a := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8978:8981  \"a++\" */ var_a, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:8978:8981  \"a++\"\n                                                {\n                                                    /// @src 0:9033:9052  \"opsPerAggregator[a]\"\n                                                    let expr_offset_4 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a)\n                                                    /// @src 0:9103:9114  \"opa.userOps\"\n                                                    let expr_offset_5, expr_length_2 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_4, expr_offset_4)\n                                                    /// @src 0:9153:9167  \"opa.aggregator\"\n                                                    let expr_address := read_from_calldatat_contract_IAggregator(add(expr_offset_4, /** @src 0:8280:8294  \"opa.aggregator\" */ 32))\n                                                    /// @src 0:9228:9241  \"uint256 i = 0\"\n                                                    let var_i_3 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    let _81 := sub(shl(160, 1), 1)\n                                                    let _82 := and(/** @src 0:9687:9706  \"address(aggregator)\" */ expr_address, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)\n                                                    /// @src 0:9223:9766  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:9243:9253  \"i < opslen\" */ lt(var_i_3, expr_length_2)\n                                                    /// @src 0:9228:9241  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:9255:9258  \"i++\"\n                                                        var_i_3 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9255:9258  \"i++\" */ var_i_3, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:9255:9258  \"i++\"\n                                                    {\n                                                        /// @src 0:9457:9501  \"_validatePrepayment(opIndex, ops[i], opInfo)\"\n                                                        let expr_component_9, expr_component_10 := fun_validatePrepayment(var_opIndex, /** @src 0:9486:9492  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_5, expr_length_2, var_i_3), /** @src 0:9305:9321  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex)))\n                                                        /// @src 0:21736:21792  \"_getValidationData(...\"\n                                                        let expr_component_11, expr_component_12 := fun_getValidationData(expr_component_9)\n                                                        /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                        if /** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ iszero(eq(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _82, and(/** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ expr_component_11, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                        {\n                                                            /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            let _83 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            mstore(_83, shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                            /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            revert(_83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:21922:22018  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_12\n                                                        {\n                                                            /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            let _84 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            mstore(_84, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                            mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                            /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            revert(_84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:22320:22385  \"_getValidationData(...\"\n                                                        let expr_component_13, expr_component_14 := fun_getValidationData(expr_component_10)\n                                                        /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                        if /** @src 0:22399:22425  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:22399:22425  \"pmAggregator != address(0)\" */ expr_component_13, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                        {\n                                                            /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            let _85 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            mstore(_85, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                            /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            revert(_85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:22509:22615  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_14\n                                                        {\n                                                            /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            let _86 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            mstore(_86, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                            /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            revert(_86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                        }\n                                                        /// @src 0:9742:9751  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:9791:9808  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9791:9808  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:9850:9861  \"opIndex = 0\"\n                                                var_opIndex := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9819:9840  \"uint256 collected = 0\"\n                                                let var_collected_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9876:9889  \"uint256 a = 0\"\n                                                let var_a_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9871:10335  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:9891:9902  \"a < opasLen\" */ lt(var_a_1, param_4)\n                                                /// @src 0:9876:9889  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:9904:9907  \"a++\"\n                                                    var_a_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9904:9907  \"a++\" */ var_a_1, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:9904:9907  \"a++\"\n                                                {\n                                                    /// @src 0:9959:9978  \"opsPerAggregator[a]\"\n                                                    let expr_offset_6 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a_1)\n                                                    /// @src 0:9997:10048  \"SignatureAggregatorChanged(address(opa.aggregator))\"\n                                                    log2(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9997:10048  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:10032:10046  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_6, /** @src 0:8280:8294  \"opa.aggregator\" */ 32)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                                    /// @src 0:10099:10110  \"opa.userOps\"\n                                                    let expr_offset_7, expr_length_3 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_6, expr_offset_6)\n                                                    /// @src 0:10171:10184  \"uint256 i = 0\"\n                                                    let var_i_4 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:10166:10325  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:10186:10196  \"i < opslen\" */ lt(var_i_4, expr_length_3)\n                                                    /// @src 0:10171:10184  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:10198:10201  \"i++\"\n                                                        var_i_4 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:10198:10201  \"i++\" */ var_i_4, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:10198:10201  \"i++\"\n                                                    {\n                                                        /// @src 0:10258:10264  \"ops[i]\"\n                                                        let expr_offset_8 := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_7, expr_length_3, var_i_4)\n                                                        /// @src 0:10221:10283  \"collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex])\"\n                                                        var_collected_1 := checked_add_uint256(var_collected_1, /** @src 0:10234:10283  \"_executeUserOp(opIndex, ops[i], opInfos[opIndex])\" */ fun_executeUserOp(var_opIndex, expr_offset_8, /** @src 0:10266:10282  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex))))\n                                                        /// @src 0:10301:10310  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:10349:10387  \"SignatureAggregatorChanged(address(0))\"\n                                                log2(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9997:10048  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                /// @src 0:10423:10432  \"collected\"\n                                                fun_compensate(param_5, var_collected_1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 72:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xfc7e286d {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_5 := keccak256(0, 64)\n                                                let _87 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ dataSlot_5)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _88 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ add(dataSlot_5, 1))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_7 := mload(64)\n                                                mstore(memPos_7, _87)\n                                                mstore(add(memPos_7, 32), iszero(iszero(and(_88, 0xff))))\n                                                mstore(add(memPos_7, 64), and(shr(8, _88), 0xffffffffffffffffffffffffffff))\n                                                mstore(add(memPos_7, 96), and(shr(120, _88), 0xffffffff))\n                                                mstore(add(memPos_7, 128), and(shr(152, _88), 0xffffffffffff))\n                                                return(memPos_7, 160)\n                                            }\n                                        }\n                                        if iszero(calldatasize())\n                                        {\n                                            /// @src 4:1326:1336  \"msg.sender\"\n                                            fun_depositTo(caller())\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            stop()\n                                        }\n                                        revert(0, 0)\n                                    }\n                                    function finalize_allocation_26259(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0xa0)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26260(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0x0140)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26283(memPtr)\n                                    {\n                                        if gt(memPtr, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, memPtr)\n                                    }\n                                    function finalize_allocation_26350(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 96)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation(memPtr, size)\n                                    {\n                                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function array_allocation_size_bytes(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(and(add(length, 31), not(31)), 0x20)\n                                    }\n                                    function abi_decode_available_length_bytes(src, length, end) -> array\n                                    {\n                                        let _1 := array_allocation_size_bytes(length)\n                                        let memPtr := mload(64)\n                                        finalize_allocation(memPtr, _1)\n                                        array := memPtr\n                                        mstore(memPtr, length)\n                                        if gt(add(src, length), end)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        calldatacopy(add(memPtr, 0x20), src, length)\n                                        mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_decode_address() -> value\n                                    {\n                                        value := calldataload(4)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n                                    {\n                                        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                                        length := calldataload(offset)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        arrayPos := add(offset, 0x20)\n                                        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n                                    }\n                                    function abi_decode_uint192() -> value\n                                    {\n                                        value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(192, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(dataEnd) -> value0, value1, value2\n                                    {\n                                        if slt(add(dataEnd, not(3)), 64) { revert(0, 0) }\n                                        let offset := calldataload(4)\n                                        let _1 := 0xffffffffffffffff\n                                        if gt(offset, _1) { revert(0, 0) }\n                                        if iszero(slt(add(offset, 35), dataEnd))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let length := calldataload(add(4, offset))\n                                        if gt(length, _1)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if gt(add(add(offset, shl(5, length)), 36), dataEnd)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := add(offset, 36)\n                                        value1 := length\n                                        let value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value2 := value\n                                    }\n                                    /// @src 0:1543:1547  \"2048\"\n                                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                                    {\n                                        let i := 0\n                                        for { } lt(i, length) { i := add(i, 32) }\n                                        {\n                                            mstore(add(dst, i), mload(add(src, i)))\n                                        }\n                                        mstore(add(dst, length), 0)\n                                    }\n                                    function abi_encode_bytes(value, pos) -> end\n                                    {\n                                        let length := /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:1543:1547  \"2048\" */ value)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, length)\n                                        /// @src 0:1543:1547  \"2048\"\n                                        copy_memory_to_memory_with_cleanup(add(value, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20), add(pos, 0x20), /** @src 0:1543:1547  \"2048\" */ length)\n                                        end := add(add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ pos, and(add(/** @src 0:1543:1547  \"2048\" */ length, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 31), not(31))), 0x20)\n                                    }\n                                    function checked_add_uint256(x, y) -> sum\n                                    {\n                                        sum := add(x, y)\n                                        if gt(x, sum)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function update_storage_value_offsett_uint48_to_uint48(slot, value)\n                                    {\n                                        let _1 := sload(slot)\n                                        sstore(slot, or(and(_1, not(shl(152, 0xffffffffffff))), and(shl(152, value), shl(152, 0xffffffffffff))))\n                                    }\n                                    function increment_uint256(value) -> ret\n                                    {\n                                        if eq(value, not(0))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                        ret := add(value, 1)\n                                    }\n                                    function checked_sub_uint256(x, y) -> diff\n                                    {\n                                        diff := sub(x, y)\n                                        if gt(diff, x)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function abi_encode_address_payable_uint256(headStart, value0, value1) -> tail\n                                    {\n                                        tail := add(headStart, 64)\n                                        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                                        mstore(add(headStart, 32), value1)\n                                    }\n                                    function extract_returndata() -> data\n                                    {\n                                        switch returndatasize()\n                                        case 0 { data := 96 }\n                                        default {\n                                            let _1 := returndatasize()\n                                            let _2 := array_allocation_size_bytes(_1)\n                                            let memPtr := mload(64)\n                                            finalize_allocation(memPtr, _2)\n                                            mstore(memPtr, _1)\n                                            data := memPtr\n                                            returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        }\n                                    }\n                                    /// @ast-id 968 @src 0:13258:13464  \"function getUserOpHash(...\"\n                                    function fun_getUserOpHash(var_userOp_947_offset) -> var\n                                    {\n                                        /// @src 5:1998:2013  \"userOp.initCode\"\n                                        let _1 := 64\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, _1))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem, expr_offset, expr_length)\n                                        let var_ret := keccak256(usr$mem, expr_length)\n                                        /// @src 5:2062:2077  \"userOp.callData\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 96))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_1 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_1, expr_offset_1, expr_length_1)\n                                        let var_ret_1 := keccak256(usr$mem_1, expr_length_1)\n                                        /// @src 5:2300:2323  \"userOp.paymasterAndData\"\n                                        let expr_offset_2, expr_length_2 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 224))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_2 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_2, expr_offset_2, expr_length_2)\n                                        let var_ret_2 := keccak256(usr$mem_2, expr_length_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let expr_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let _2 := add(expr_mpos, /** @src 5:1938:1950  \"userOp.nonce\" */ 32)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_2, and(/** @src 5:823:884  \"assembly {...\" */ calldataload(/** @src 5:1895:1912  \"getSender(userOp)\" */ var_userOp_947_offset), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:1998:2013  \"userOp.initCode\" */ _1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:1938:1950  \"userOp.nonce\" */ add(var_userOp_947_offset, 32)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2062:2077  \"userOp.callData\" */ 96), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2115:2138  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret_1)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2177:2202  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2115:2138  \"userOp.accountGasLimits\" */ add(var_userOp_947_offset, 128)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2230:2244  \"userOp.gasFees\" */ 192), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2177:2202  \"userOp.preVerificationGas\" */ add(var_userOp_947_offset, 160)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2300:2323  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2230:2244  \"userOp.gasFees\" */ add(var_userOp_947_offset, 192)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 256\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), var_ret_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        mstore(expr_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                        let newFreePtr := add(expr_mpos, 288)\n                                        let _4 := 0xffffffffffffffff\n                                        if or(gt(newFreePtr, _4), lt(newFreePtr, expr_mpos))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr)\n                                        /// @src 5:4955:4987  \"return keccak256(encode(userOp))\"\n                                        let var_1 := /** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ keccak256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2, /** @src 0:1297:1302  \"10000\" */ mload(/** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ expr_mpos))\n                                        /// @src 0:13401:13456  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        let _5 := add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ expr_mpos, /** @src 0:13401:13456  \"abi.encode(userOp.hash(), address(this), block.chainid)\" */ 320)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_5, var_1)\n                                        mstore(add(expr_mpos, 352), /** @src 0:13435:13439  \"this\" */ address())\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(expr_mpos, 384), /** @src 0:13442:13455  \"block.chainid\" */ chainid())\n                                        /// @src 0:13401:13456  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        mstore(newFreePtr, /** @src 5:2062:2077  \"userOp.callData\" */ 96)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let newFreePtr_1 := add(expr_mpos, 416)\n                                        if or(gt(newFreePtr_1, _4), lt(newFreePtr_1, newFreePtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr_1)\n                                        /// @src 0:13372:13457  \"return...\"\n                                        var := /** @src 0:13391:13457  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ keccak256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5, /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:13391:13457  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ newFreePtr))\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function array_allocation_size_array_struct_UserOpInfo_dyn(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(shl(5, length), 0x20)\n                                    }\n                                    function allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(length) -> memPtr\n                                    {\n                                        let _1 := array_allocation_size_array_struct_UserOpInfo_dyn(length)\n                                        let _2 := 64\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation(memPtr_1, _1)\n                                        mstore(memPtr_1, length)\n                                        memPtr := memPtr_1\n                                        let _3 := add(array_allocation_size_array_struct_UserOpInfo_dyn(length), not(31))\n                                        let i := /** @src -1:-1:-1 */ 0\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        for { } lt(i, _3) { i := add(i, 32) }\n                                        {\n                                            let memPtr_2 := mload(_2)\n                                            finalize_allocation_26259(memPtr_2)\n                                            let memPtr_3 := mload(_2)\n                                            finalize_allocation_26260(memPtr_3)\n                                            mstore(memPtr_3, /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _4 := 32\n                                            mstore(add(memPtr_3, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _5 := 96\n                                            mstore(add(memPtr_3, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _6 := 128\n                                            mstore(add(memPtr_3, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 160), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 192), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 224), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 256), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 288), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_2, memPtr_3)\n                                            mstore(add(memPtr_2, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(add(memPtr_1, i), _4), memPtr_2)\n                                        }\n                                    }\n                                    function memory_array_index_access_struct_UserOpInfo_dyn(baseRef, index) -> addr\n                                    {\n                                        if iszero(lt(index, /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ baseRef)))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        addr := add(add(baseRef, shl(5, index)), 32)\n                                    }\n                                    function calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(286))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function abi_decode_address_fromMemory(headStart, dataEnd) -> value0\n                                    {\n                                        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                                        let value := mload(headStart)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := value\n                                    }\n                                    function abi_encode_bytes_calldata(start, length, pos) -> end\n                                    {\n                                        mstore(pos, length)\n                                        calldatacopy(add(pos, 0x20), start, length)\n                                        mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                                    }\n                                    /// @ast-id 2547 @src 4:1935:2114  \"function depositTo(address account) public virtual payable {...\"\n                                    function fun_depositTo(var_account)\n                                    {\n                                        /// @src 4:2025:2062  \"_incrementDeposit(account, msg.value)\"\n                                        let expr := fun_incrementDeposit(var_account, /** @src 4:2052:2061  \"msg.value\" */ callvalue())\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        let _1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_1, expr)\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        log2(_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ var_account, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                    }\n                                    function calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n                                    }\n                                    function read_from_calldatat_contract_IAggregator(ptr) -> returnValue\n                                    {\n                                        let value := calldataload(ptr)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                        returnValue := value\n                                    }\n                                    function access_calldata_tail_bytes_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function calldata_access_bytes_calldata(base_ref, ptr) -> value, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let value_1 := add(rel_offset_of_tail, base_ref)\n                                        length := calldataload(value_1)\n                                        value := add(value_1, 0x20)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function abi_encode_struct_PackedUserOperation_calldata(value, pos) -> end\n                                    {\n                                        let _1 := 0x0120\n                                        let value_1 := calldataload(value)\n                                        let _2 := and(value_1, sub(shl(160, 1), 1))\n                                        if iszero(eq(value_1, _2))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, _2)\n                                        mstore(add(pos, 0x20), calldataload(add(value, 0x20)))\n                                        let memberValue0, memberValue1 := calldata_access_bytes_calldata(value, add(value, 0x40))\n                                        mstore(add(pos, 0x40), _1)\n                                        let tail := abi_encode_bytes_calldata(memberValue0, memberValue1, add(pos, _1))\n                                        let memberValue0_1, memberValue1_1 := calldata_access_bytes_calldata(value, add(value, 0x60))\n                                        mstore(add(pos, 0x60), sub(tail, pos))\n                                        let tail_1 := abi_encode_bytes_calldata(memberValue0_1, memberValue1_1, tail)\n                                        mstore(add(pos, 0x80), calldataload(add(value, 0x80)))\n                                        mstore(add(pos, 0xa0), calldataload(add(value, 0xa0)))\n                                        mstore(add(pos, 0xc0), calldataload(add(value, 0xc0)))\n                                        let memberValue0_2, memberValue1_2 := calldata_access_bytes_calldata(value, add(value, 0xe0))\n                                        mstore(add(pos, 0xe0), sub(tail_1, pos))\n                                        let tail_2 := abi_encode_bytes_calldata(memberValue0_2, memberValue1_2, tail_1)\n                                        let _3 := 0x0100\n                                        let memberValue0_3, memberValue1_3 := calldata_access_bytes_calldata(value, add(value, _3))\n                                        mstore(add(pos, _3), sub(tail_2, pos))\n                                        end := abi_encode_bytes_calldata(memberValue0_3, memberValue1_3, tail_2)\n                                    }\n                                    /// @ast-id 48912 @src 72:2431:2738  \"function _nonReentrantBefore() private {...\"\n                                    function fun_nonReentrantBefore()\n                                    {\n                                        /// @src 72:2554:2640  \"if (_status == ENTERED) {...\"\n                                        if /** @src 72:2558:2576  \"_status == ENTERED\" */ eq(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 72:2558:2565  \"_status\" */ 0x02), 0x02)\n                                        /// @src 72:2554:2640  \"if (_status == ENTERED) {...\"\n                                        {\n                                            /// @src 72:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            let _1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                            /// @src 72:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            mstore(_1, shl(224, 0x3ee5aeb5))\n                                            revert(_1, 4)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(/** @src 72:2558:2565  \"_status\" */ 0x02, 0x02)\n                                    }\n                                    /// @ast-id 1795 @src 0:23805:25958  \"function _validatePrepayment(...\"\n                                    function fun_validatePrepayment(var_opIndex, var_userOp_1628_offset, var_outOpInfo_mpos) -> var_validationData, var_paymasterValidationData\n                                    {\n                                        /// @src 0:24005:24036  \"uint256 paymasterValidationData\"\n                                        var_paymasterValidationData := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:24069:24078  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:24118:24135  \"outOpInfo.mUserOp\"\n                                        let _431_mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let value := calldataload(var_userOp_1628_offset)\n                                        let _1 := and(value, sub(shl(160, 1), 1))\n                                        if iszero(eq(value, _1)) { revert(0, 0) }\n                                        mstore(_431_mpos, _1)\n                                        mstore(/** @src 0:13835:13848  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13851:13863  \"userOp.nonce\" */ add(var_userOp_1628_offset, 32)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := calldataload(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ add(var_userOp_1628_offset, 128))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 0xffffffffffffffffffffffffffffffff\n                                        mstore(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _2))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:14020:14045  \"userOp.preVerificationGas\" */ add(var_userOp_1628_offset, 160)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _4 := calldataload(/** @src 0:14139:14153  \"userOp.gasFees\" */ add(var_userOp_1628_offset, /** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ 192))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:14086:14106  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:14056:14084  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _4))\n                                        /// @src 0:14198:14221  \"userOp.paymasterAndData\"\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_1628_offset, add(var_userOp_1628_offset, 224))\n                                        /// @src 0:14231:14777  \"if (paymasterAndData.length > 0) {...\"\n                                        switch /** @src 0:14235:14262  \"paymasterAndData.length > 0\" */ iszero(iszero(expr_length))\n                                        case /** @src 0:14231:14777  \"if (paymasterAndData.length > 0) {...\" */ 0 {\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:14632:14649  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:14676:14713  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:14731:14762  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        }\n                                        default /// @src 0:14231:14777  \"if (paymasterAndData.length > 0) {...\"\n                                        {\n                                            /// @src 5:490:492  \"52\"\n                                            if /** @src 0:14303:14368  \"paymasterAndData.length >= UserOperationLib.PAYMASTER_DATA_OFFSET\" */ lt(expr_length, /** @src 5:490:492  \"52\" */ 0x34)\n                                            {\n                                                let memPtr := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(memPtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(229, 4594637))\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(add(memPtr, 4), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 5:490:492  \"52\" */ add(memPtr, 36), 29)\n                                                mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 5:490:492  \"52\" */ memPtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 5:490:492  \"52\" */ \"AA93 invalid paymasterAndData\")\n                                                revert(memPtr, 100)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(0x14, expr_length)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:434:436  \"36\" */ 0x24, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:490:492  \"52\" */ 0x34, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            mstore(/** @src 0:14504:14535  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, /** @src 5:434:436  \"36\" */ 0x24))))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:14465:14502  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, 0x14))))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:14446:14463  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224), /** @src 5:372:374  \"20\" */ shr(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 5:4451:4511  \"bytes20(paymasterAndData[: PAYMASTER_VALIDATION_GAS_OFFSET])\" */ expr_offset)))\n                                        }\n                                        /// @src 0:24214:24235  \"getUserOpHash(userOp)\"\n                                        let _5 := fun_getUserOpHash(var_userOp_1628_offset)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5)\n                                        let _6 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:24491:24552  \"mUserOp.preVerificationGas |...\"\n                                        let expr_1 := or(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)), /** @src 0:24491:24552  \"mUserOp.preVerificationGas |...\" */ _6)\n                                        /// @src 0:24491:24587  \"mUserOp.preVerificationGas |...\"\n                                        let expr_2 := or(expr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:24491:24639  \"mUserOp.preVerificationGas |...\"\n                                        let expr_3 := or(expr_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:24602:24639  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:24491:24685  \"mUserOp.preVerificationGas |...\"\n                                        let expr_4 := or(expr_3, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:24654:24685  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:24491:24720  \"mUserOp.preVerificationGas |...\"\n                                        let expr_5 := or(expr_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:14086:14106  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if /** @src 0:24781:24814  \"maxGasValues <= type(uint120).max\" */ gt(/** @src 0:24491:24763  \"mUserOp.preVerificationGas |...\" */ or(expr_5, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:14056:14084  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288))), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffffffffffffffffff)\n                                        {\n                                            let memPtr_1 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_1, 36), 24)\n                                            mstore(add(memPtr_1, 68), \"AA94 gas values overflow\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                        let _7 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum := add(_7, mload(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_1 := add(sum, mload(/** @src 0:24602:24639  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_2 := add(sum_1, mload(/** @src 0:24654:24685  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_3 := add(sum_2, mload(/** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let product := mul(sum_3, mload(/** @src 0:14086:14106  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:24935:25098  \"_validateAccountPrepayment(...\"\n                                        let var_validationData_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:17742:17756  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:17787:17801  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:17854:17865  \"op.initCode\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_1628_offset, add(var_userOp_1628_offset, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64))\n                                        /// @src 0:15806:16738  \"if (initCode.length != 0) {...\"\n                                        if /** @src 0:15810:15830  \"initCode.length != 0\" */ iszero(iszero(expr_length_1))\n                                        /// @src 0:15806:16738  \"if (initCode.length != 0) {...\"\n                                        {\n                                            /// @src 0:15898:16002  \"if (sender.code.length != 0)...\"\n                                            if /** @src 0:15902:15925  \"sender.code.length != 0\" */ iszero(iszero(/** @src 0:15902:15920  \"sender.code.length\" */ extcodesize(cleaned)))\n                                            /// @src 0:15898:16002  \"if (sender.code.length != 0)...\"\n                                            {\n                                                /// @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                let _8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                mstore(_8, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ add(_8, 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 31)\n                                                mstore(add(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA10 sender already constructed\")\n                                                /// @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                revert(_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            let _9 := mload(/** @src 0:16085:16120  \"opInfo.mUserOp.verificationGasLimit\" */ add(/** @src 0:16085:16099  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            let _10 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            mstore(_10, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                            mstore(/** @src 0:16034:16144  \"senderCreator().createSender{...\" */ add(_10, 4), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            let _11 := call(_9, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1100:1114  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), 0, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ _10, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_1, expr_length_1, add(/** @src 0:16034:16144  \"senderCreator().createSender{...\" */ _10, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ _10), _10, /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            if iszero(_11)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let pos := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                returndatacopy(pos, 0, returndatasize())\n                                                revert(pos, returndatasize())\n                                            }\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            let expr_6 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            if _11\n                                            {\n                                                let _12 := /** @src 0:13851:13863  \"userOp.nonce\" */ 32\n                                                /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                                if gt(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ returndatasize()) { _12 := returndatasize() }\n                                                finalize_allocation(_10, _12)\n                                                expr_6 := abi_decode_address_fromMemory(_10, add(_10, _12))\n                                            }\n                                            /// @src 0:16162:16183  \"sender1 == address(0)\"\n                                            let _13 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:16162:16183  \"sender1 == address(0)\" */ expr_6, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:16158:16256  \"if (sender1 == address(0))...\"\n                                            if /** @src 0:16162:16183  \"sender1 == address(0)\" */ iszero(_13)\n                                            /// @src 0:16158:16256  \"if (sender1 == address(0))...\"\n                                            {\n                                                /// @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                let _14 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                mstore(_14, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ add(_14, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 27)\n                                                mstore(add(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA13 initCode failed or OOG\")\n                                                /// @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                revert(_14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:16270:16369  \"if (sender1 != sender)...\"\n                                            if /** @src 0:16274:16291  \"sender1 != sender\" */ iszero(eq(_13, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned))\n                                            /// @src 0:16270:16369  \"if (sender1 != sender)...\"\n                                            {\n                                                /// @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                let _15 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                mstore(_15, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ add(_15, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA14 initCode must return sender\")\n                                                /// @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                revert(_15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:16383:16489  \"if (sender1.code.length == 0)...\"\n                                            if /** @src 0:16387:16411  \"sender1.code.length == 0\" */ iszero(/** @src 0:16387:16406  \"sender1.code.length\" */ extcodesize(expr_6))\n                                            /// @src 0:16383:16489  \"if (sender1.code.length == 0)...\"\n                                            {\n                                                /// @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                let _16 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                mstore(_16, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ add(_16, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA15 initCode must create sender\")\n                                                /// @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                revert(_16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 0:16548:16550  \"20\" */ 0x14, /** @src 5:372:374  \"20\" */ expr_length_1)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _17 := mload(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:16689:16713  \"opInfo.mUserOp.paymaster\" */ add(/** @src 0:16689:16703  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:16572:16727  \"AccountDeployed(...\"\n                                            let _18 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(_18, /** @src 5:372:374  \"20\" */ shr(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 0:16529:16552  \"bytes20(initCode[0:20])\" */ expr_offset_1)))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(_18, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                            /// @src 0:16572:16727  \"AccountDeployed(...\"\n                                            log3(_18, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:16572:16727  \"AccountDeployed(...\" */ 0xd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d, _17, cleaned)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_2 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:17900:17917  \"mUserOp.paymaster\" */ add(_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:17931:17962  \"uint256 missingAccountFunds = 0\"\n                                        let var_missingAccountFunds := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:17976:18198  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:17980:18003  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:17976:18198  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let _19 := sload(keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:18094:18183  \"bal > requiredPrefund...\"\n                                            let expr_7 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:18094:18183  \"bal > requiredPrefund...\"\n                                            switch /** @src 0:18094:18115  \"bal > requiredPrefund\" */ gt(_19, product)\n                                            case /** @src 0:18094:18183  \"bal > requiredPrefund...\" */ 0 {\n                                                expr_7 := /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:18162:18183  \"requiredPrefund - bal\" */ product, _19)\n                                            }\n                                            default /// @src 0:18094:18183  \"bal > requiredPrefund...\"\n                                            {\n                                                expr_7 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            }\n                                            /// @src 0:18072:18183  \"missingAccountFunds = bal > requiredPrefund...\"\n                                            var_missingAccountFunds := expr_7\n                                        }\n                                        /// @src 0:1543:1547  \"2048\"\n                                        let _20 := mload(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        let _21 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        mstore(_21, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x06608bdf))\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        let trySuccessCondition := call(_6, cleaned, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ _21, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_21, 4), var_userOp_1628_offset, _20, var_missingAccountFunds), _21), _21, /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        let expr_8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        if trySuccessCondition\n                                        {\n                                            let _22 := /** @src 0:13851:13863  \"userOp.nonce\" */ 32\n                                            /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                            if gt(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ returndatasize()) { _22 := returndatasize() }\n                                            finalize_allocation(_21, _22)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            if slt(sub(/** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ add(_21, _22), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            { revert(0, 0) }\n                                            /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                            expr_8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(_21)\n                                        }\n                                        /// @src 0:18211:18617  \"try...\"\n                                        switch iszero(trySuccessCondition)\n                                        case 0 {\n                                            /// @src 0:18436:18468  \"validationData = _validationData\"\n                                            var_validationData_1 := expr_8\n                                        }\n                                        default /// @src 0:18211:18617  \"try...\"\n                                        {\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$len := returndatasize()\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _23 := 0x0800\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if gt(usr$len, /** @src 0:1543:1547  \"2048\" */ _23)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            {\n                                                usr$len := /** @src 0:1543:1547  \"2048\" */ _23\n                                            }\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$ptr := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(usr$ptr, usr$len)\n                                            returndatacopy(add(usr$ptr, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                            /// @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            let _24 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            mstore(_24, shl(224, 0x65c8fd4d))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_24, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA23 reverted\")\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)\n                                            /// @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            revert(_24, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr, add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24))\n                                        }\n                                        /// @src 0:18630:18999  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:17980:18003  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:18630:18999  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _25 := sload(/** @src 0:18762:18780  \"senderInfo.deposit\" */ dataSlot)\n                                            /// @src 0:18798:18921  \"if (requiredPrefund > deposit) {...\"\n                                            if /** @src 0:18802:18827  \"requiredPrefund > deposit\" */ gt(product, _25)\n                                            /// @src 0:18798:18921  \"if (requiredPrefund > deposit) {...\"\n                                            {\n                                                /// @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                let _26 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                mstore(_26, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ add(_26, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                mstore(add(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA21 didn't pay prefund\")\n                                                /// @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                revert(_26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:18959:18984  \"deposit - requiredPrefund\" */ _25, product))\n                                        }\n                                        /// @src 0:24918:25098  \"validationData = _validateAccountPrepayment(...\"\n                                        var_validationData := var_validationData_1\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_3 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:25138:25152  \"mUserOp.sender\" */ _431_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _27 := mload(/** @src 0:13835:13848  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, cleaned_3)\n                                        mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                        let _28 := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, shr(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _27))\n                                        mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _28)\n                                        let dataSlot_1 := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _29 := sload(/** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ dataSlot_1)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot_1, /** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ increment_uint256(_29))\n                                        /// @src 0:25109:25249  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        if /** @src 0:25113:25168  \"!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)\" */ iszero(/** @src 2:1373:1414  \"nonceSequenceNumber[sender][key]++ == seq\" */ eq(_29, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 2:1343:1356  \"uint64(nonce)\" */ _27, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffff)))\n                                        /// @src 0:25109:25249  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        {\n                                            /// @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            let _30 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            mstore(_30, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ add(_30, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 26)\n                                            mstore(add(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA25 invalid account nonce\")\n                                            /// @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            revert(_30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:25283:25421  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        if /** @src 0:25287:25328  \"preGas - gasleft() > verificationGasLimit\" */ gt(/** @src 0:1543:1547  \"2048\" */ sub(expr, /** @src 0:25296:25305  \"gasleft()\" */ gas()), /** @src 0:25287:25328  \"preGas - gasleft() > verificationGasLimit\" */ _6)\n                                        /// @src 0:25283:25421  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        {\n                                            /// @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            let _31 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            mstore(_31, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ add(_31, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                            mstore(add(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA26 over verificationGasLimit\")\n                                            /// @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            revert(_31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:25441:25461  \"bytes memory context\"\n                                        let var_context_1745_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:25441:25461  \"bytes memory context\"\n                                        var_context_1745_mpos := /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96\n                                        /// @src 0:25471:25721  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        if /** @src 0:25475:25506  \"mUserOp.paymaster != address(0)\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:25475:25492  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))))\n                                        /// @src 0:25471:25721  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        {\n                                            /// @src 0:25559:25710  \"_validatePaymasterPrepayment(...\"\n                                            let var_context_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:25559:25710  \"_validatePaymasterPrepayment(...\"\n                                            let var_validationData_2 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:19872:19881  \"gasleft()\"\n                                            let expr_9 := gas()\n                                            /// @src 0:19925:19939  \"opInfo.mUserOp\"\n                                            let _mpos_1 := mload(var_outOpInfo_mpos)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_4 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:19973:19990  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            mstore(0, cleaned_4)\n                                            mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot_2 := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _32 := sload(/** @src 0:20091:20112  \"paymasterInfo.deposit\" */ dataSlot_2)\n                                            /// @src 0:20126:20248  \"if (deposit < requiredPreFund) {...\"\n                                            if /** @src 0:20130:20155  \"deposit < requiredPreFund\" */ lt(_32, product)\n                                            /// @src 0:20126:20248  \"if (deposit < requiredPreFund) {...\"\n                                            {\n                                                /// @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                let _33 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                mstore(_33, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ add(_33, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                                mstore(add(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA31 paymaster deposit too low\")\n                                                /// @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                revert(_33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot_2, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:20285:20310  \"deposit - requiredPreFund\" */ _32, product))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _34 := mload(/** @src 0:20357:20394  \"mUserOp.paymasterVerificationGasLimit\" */ add(_mpos_1, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128))\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _35 := mload(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let _36 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            mstore(_36, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x14add44b))\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let trySuccessCondition_1 := call(_34, cleaned_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _36, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_36, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ var_userOp_1628_offset, _35, product), _36), _36, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let expr_component_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            let expr_component := 0\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            if trySuccessCondition_1\n                                            {\n                                                let _37 := returndatasize()\n                                                returndatacopy(_36, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _37)\n                                                finalize_allocation(_36, _37)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if slt(sub(/** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let offset := mload(_36)\n                                                if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                                                if iszero(slt(add(add(_36, offset), 0x1f), /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37)))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let _38 := mload(add(_36, offset))\n                                                let _39 := array_allocation_size_bytes(_38)\n                                                let memPtr_2 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                finalize_allocation(memPtr_2, _39)\n                                                mstore(memPtr_2, _38)\n                                                if gt(add(add(add(_36, offset), _38), /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                copy_memory_to_memory_with_cleanup(add(add(_36, offset), /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr_2, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _38)\n                                                let value_1 := mload(add(_36, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                                /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                                expr_component_mpos := memPtr_2\n                                                expr_component := value_1\n                                            }\n                                            /// @src 0:20408:20925  \"try...\"\n                                            switch iszero(trySuccessCondition_1)\n                                            case 0 {\n                                                /// @src 0:20708:20726  \"context = _context\"\n                                                var_context_mpos := expr_component_mpos\n                                                /// @src 0:20744:20776  \"validationData = _validationData\"\n                                                var_validationData_2 := expr_component\n                                            }\n                                            default /// @src 0:20408:20925  \"try...\"\n                                            {\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$len_1 := returndatasize()\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let _40 := 0x0800\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                if gt(usr$len_1, /** @src 0:1543:1547  \"2048\" */ _40)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                {\n                                                    usr$len_1 := /** @src 0:1543:1547  \"2048\" */ _40\n                                                }\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$ptr_1 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(usr$ptr_1, usr$len_1)\n                                                returndatacopy(add(usr$ptr_1, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                /// @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                let _41 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                mstore(_41, /** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ shl(224, 0x65c8fd4d))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_41, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA33 reverted\")\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)\n                                                /// @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                revert(_41, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41))\n                                            }\n                                            /// @src 0:20938:21087  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            if /** @src 0:20942:20985  \"preGas - gasleft() > pmVerificationGasLimit\" */ gt(/** @src 0:1543:1547  \"2048\" */ sub(expr_9, /** @src 0:20951:20960  \"gasleft()\" */ gas()), /** @src 0:20942:20985  \"preGas - gasleft() > pmVerificationGasLimit\" */ _34)\n                                            /// @src 0:20938:21087  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            {\n                                                /// @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                let _42 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                mstore(_42, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ add(_42, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 39)\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA36 over paymasterVerificationG\")\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"asLimit\")\n                                                /// @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                revert(_42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                            }\n                                            /// @src 0:25522:25710  \"(context, paymasterValidationData) = _validatePaymasterPrepayment(...\"\n                                            var_paymasterValidationData := var_validationData_2\n                                            var_context_1745_mpos := var_context_mpos\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:25754:25771  \"outOpInfo.prefund\" */ add(var_outOpInfo_mpos, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ product)\n                                        mstore(/** @src 0:25803:25826  \"outOpInfo.contextOffset\" */ add(var_outOpInfo_mpos, /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_context_1745_mpos)\n                                        mstore(/** @src 0:25874:25892  \"outOpInfo.preOpGas\" */ add(var_outOpInfo_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:1543:1547  \"2048\" */ sub(expr, /** @src 0:25904:25913  \"gasleft()\" */ gas()), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:14020:14045  \"userOp.preVerificationGas\" */ add(var_userOp_1628_offset, 160))))\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_UserOpInfo(value, pos)\n                                    {\n                                        let _1 := mload(value)\n                                        let _2 := sub(shl(160, 1), 1)\n                                        mstore(pos, and(mload(_1), _2))\n                                        mstore(add(pos, 0x20), mload(add(_1, 0x20)))\n                                        mstore(add(pos, 0x40), mload(add(_1, 0x40)))\n                                        mstore(add(pos, 0x60), mload(add(_1, 0x60)))\n                                        mstore(add(pos, 0x80), mload(add(_1, 0x80)))\n                                        mstore(add(pos, 0xa0), mload(add(_1, 0xa0)))\n                                        mstore(add(pos, 0xc0), mload(add(_1, 0xc0)))\n                                        mstore(add(pos, 0xe0), and(mload(add(_1, 0xe0)), _2))\n                                        let _3 := 0x0100\n                                        mstore(add(pos, _3), mload(add(_1, _3)))\n                                        let _4 := 0x0120\n                                        mstore(add(pos, _4), mload(add(_1, _4)))\n                                        mstore(add(pos, 0x0140), mload(add(value, 0x20)))\n                                        mstore(add(pos, 0x0160), mload(add(value, 0x40)))\n                                        mstore(add(pos, 0x0180), mload(add(value, 0x60)))\n                                        mstore(add(pos, 0x01a0), mload(add(value, 0x80)))\n                                    }\n                                    /// @ast-id 328 @src 0:3032:6109  \"function _executeUserOp(...\"\n                                    function fun_executeUserOp(var_opIndex, var_userOp_offset, var_opInfo_155_mpos) -> var_collected\n                                    {\n                                        /// @src 0:3242:3251  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:3309:3329  \"opInfo.contextOffset\" */ add(var_opInfo_155_mpos, 96))\n                                        /// @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _2 := 0x40\n                                        let var_saveFreePtr := mload(_2)\n                                        /// @src 0:3531:3546  \"userOp.callData\"\n                                        let expr_offset, expr_182_length := access_calldata_tail_bytes_calldata(var_userOp_offset, add(var_userOp_offset, /** @src 0:3309:3329  \"opInfo.contextOffset\" */ 96))\n                                        /// @src 0:3560:3582  \"bytes memory innerCall\"\n                                        let var_innerCall_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:3596:3612  \"bytes4 methodSig\"\n                                        let var_methodSig := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3596:3612  \"bytes4 methodSig\"\n                                        var_methodSig := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3626:3806  \"assembly {...\"\n                                        if gt(expr_182_length, 3)\n                                        {\n                                            var_methodSig := calldataload(expr_offset)\n                                        }\n                                        /// @src 0:3836:3874  \"IAccountExecute.executeUserOp.selector\"\n                                        let _3 := shl(224, 0x8dd7712f)\n                                        /// @src 0:3819:4236  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        switch /** @src 0:3823:3874  \"methodSig == IAccountExecute.executeUserOp.selector\" */ eq(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:3823:3874  \"methodSig == IAccountExecute.executeUserOp.selector\" */ var_methodSig, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0xffffffff)), /** @src 0:3836:3874  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                        case /** @src 0:3819:4236  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\" */ 0 {\n                                            /// @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            mstore(add(var_saveFreePtr, 0x20), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ add(var_saveFreePtr, 36), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail := abi_encode_bytes_calldata(expr_offset, expr_182_length, add(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail, /** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            let _4 := sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail), /** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr)\n                                            mstore(var_saveFreePtr, add(_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)))\n                                            /// @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            finalize_allocation(var_saveFreePtr, _4)\n                                            /// @src 0:4146:4221  \"innerCall = abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            var_innerCall_mpos := var_saveFreePtr\n                                        }\n                                        default /// @src 0:3819:4236  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        {\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _5 := mload(/** @src 0:3978:3995  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, 32))\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let expr_206_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(add(expr_206_mpos, /** @src 0:3978:3995  \"opInfo.userOpHash\" */ 32), /** @src 0:3836:3874  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ add(expr_206_mpos, 36), /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let tail_1 := abi_encode_struct_PackedUserOperation_calldata(var_userOp_offset, add(/** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_206_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                            mstore(add(/** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_206_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), _5)\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let _6 := sub(tail_1, expr_206_mpos)\n                                            let _7 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(expr_206_mpos, add(_6, _7))\n                                            finalize_allocation(expr_206_mpos, _6)\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let expr_217_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            mstore(add(expr_217_mpos, /** @src 0:3978:3995  \"opInfo.userOpHash\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ add(expr_217_mpos, /** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ 36), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail_2 := abi_encode_bytes(expr_206_mpos, add(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail_2, /** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let _8 := sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail_2), /** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos)\n                                            mstore(expr_217_mpos, add(_8, /** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ _7))\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            finalize_allocation(expr_217_mpos, _8)\n                                            /// @src 0:4015:4095  \"innerCall = abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            var_innerCall_mpos := expr_217_mpos\n                                        }\n                                        /// @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _9 := 32\n                                        let var_success := call(gas(), address(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ add(var_innerCall_mpos, _9), mload(var_innerCall_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                        var_collected := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        /// @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\"\n                                        mstore(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ var_saveFreePtr)\n                                        /// @src 0:4488:6103  \"if (!success) {...\"\n                                        if /** @src 0:4492:4500  \"!success\" */ iszero(var_success)\n                                        /// @src 0:4488:6103  \"if (!success) {...\"\n                                        {\n                                            /// @src 0:4516:4539  \"bytes32 innerRevertCode\"\n                                            let var_innerRevertCode := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:4553:4780  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if eq(/** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9, /** @src 0:4553:4780  \"assembly (\\\"memory-safe\\\") {...\" */ returndatasize())\n                                            {\n                                                returndatacopy(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode, var_innerRevertCode, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                                /// @src 0:4553:4780  \"assembly (\\\"memory-safe\\\") {...\"\n                                                var_innerRevertCode := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode)\n                                            }\n                                            /// @src 0:4793:6093  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            switch /** @src 0:4797:4832  \"innerRevertCode == INNER_OUT_OF_GAS\" */ eq(var_innerRevertCode, /** @src 0:12228:12354  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                            case /** @src 0:4793:6093  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\" */ 0 {\n                                                /// @src 0:5089:6093  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                switch /** @src 0:5093:5136  \"innerRevertCode == INNER_REVERT_LOW_PREFUND\" */ eq(var_innerRevertCode, /** @src 0:29031:29177  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                case /** @src 0:5089:6093  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\" */ 0 {\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let _10 := mload(/** @src 0:5612:5629  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 0:5651:5665  \"opInfo.mUserOp\"\n                                                    let _565_mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _11 := sub(shl(160, 1), 1)\n                                                    let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:5651:5672  \"opInfo.mUserOp.sender\" */ _565_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    let _12 := mload(/** @src 0:5694:5714  \"opInfo.mUserOp.nonce\" */ add(_565_mpos, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$len := returndatasize()\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let _13 := 0x0800\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    if gt(usr$len, /** @src 0:1543:1547  \"2048\" */ _13)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    {\n                                                        usr$len := /** @src 0:1543:1547  \"2048\" */ _13\n                                                    }\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$ptr := mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(usr$ptr, usr$len)\n                                                    returndatacopy(add(usr$ptr, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                    /// @src 0:5572:5795  \"PostOpRevertReason(...\"\n                                                    let _14 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(_14, _12)\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    mstore(add(_14, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:5572:5795  \"PostOpRevertReason(...\"\n                                                    log3(_14, sub(/** @src 0:1543:1547  \"2048\" */ abi_encode_bytes(usr$ptr, add(_14, /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)), /** @src 0:5572:5795  \"PostOpRevertReason(...\" */ _14), 0xf62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f4792, _10, cleaned)\n                                                    /// @src 0:5834:5852  \"preGas - gasleft()\"\n                                                    let expr_1 := checked_sub_uint256(expr, /** @src 0:5843:5852  \"gasleft()\" */ gas())\n                                                    /// @src 0:5855:5870  \"opInfo.preOpGas\"\n                                                    let _15 := add(var_opInfo_155_mpos, 128)\n                                                    /// @src 0:5900:6078  \"_postExecution(...\"\n                                                    let var_actualGas := /** @src 0:5834:5870  \"preGas - gasleft() + opInfo.preOpGas\" */ checked_add_uint256(expr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5855:5870  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:5900:6078  \"_postExecution(...\"\n                                                    let var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:26799:26808  \"gasleft()\"\n                                                    let expr_2 := gas()\n                                                    /// @src 0:26842:26863  \"address refundAddress\"\n                                                    let var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:26842:26863  \"address refundAddress\"\n                                                    let var_refundAddress_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:26907:26921  \"opInfo.mUserOp\"\n                                                    let _mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:26954:26980  \"getUserOpGasPrice(mUserOp)\"\n                                                    let expr_3 := fun_getUserOpGasPrice(_mpos)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27015:27032  \"mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                    switch /** @src 0:27050:27073  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                                    case /** @src 0:27046:27885  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                        /// @src 0:27162:27187  \"refundAddress = paymaster\"\n                                                        var_refundAddress := cleaned_1\n                                                        /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                        if /** @src 0:27209:27227  \"context.length > 0\" */ iszero(iszero(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27209:27223  \"context.length\" */ _1)))\n                                                        /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            var_refundAddress_1 := var_actualGasCost\n                                                        }\n                                                    }\n                                                    default /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                    {\n                                                        /// @src 0:27093:27123  \"refundAddress = mUserOp.sender\"\n                                                        var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27109:27123  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    }\n                                                    /// @src 0:27898:27929  \"actualGas += preGas - gasleft()\"\n                                                    var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, /** @src 0:1543:1547  \"2048\" */ sub(expr_2, /** @src 0:27920:27929  \"gasleft()\" */ gas()))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _16 := mload(/** @src 0:28052:28072  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:3309:3329  \"opInfo.contextOffset\" */ 96))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let sum := add(_16, mload(/** @src 0:28075:28106  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, 160)))\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let diff := sub(var_actualGas, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:28163:28178  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    if /** @src 0:28316:28352  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff)\n                                                    /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    {\n                                                        /// @src 0:28538:28567  \"actualGas += unusedGasPenalty\"\n                                                        var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:28396:28432  \"executionGasLimit - executionGasUsed\" */ sum, diff), /** @src 0:1596:1598  \"10\" */ 0x0a), /** @src 0:28513:28516  \"100\" */ 0x64))\n                                                    }\n                                                    /// @src 0:28614:28650  \"actualGasCost = actualGas * gasPrice\"\n                                                    var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:28630:28650  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _17 := mload(/** @src 0:28682:28696  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                    switch /** @src 0:28714:28737  \"prefund < actualGasCost\" */ lt(_17, var_actualGasCost)\n                                                    case /** @src 0:28710:29503  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                        /// @src 0:29291:29331  \"_incrementDeposit(refundAddress, refund)\"\n                                                        pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:29250:29273  \"prefund - actualGasCost\" */ _17, var_actualGasCost)))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:29478:29487  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, var_actualGasCost, var_actualGas)\n                                                    }\n                                                    default /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                    {\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:28829:28852  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _17\n                                                        /// @src 0:28892:28898  \"opInfo\"\n                                                        fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                        /// @src 0:28974:28983  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, _17, var_actualGas)\n                                                    }\n                                                    /// @src 0:5888:6078  \"collected = _postExecution(...\"\n                                                    var_collected := var_actualGasCost\n                                                }\n                                                default /// @src 0:5089:6093  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                {\n                                                    /// @src 0:5269:5287  \"preGas - gasleft()\"\n                                                    let expr_4 := checked_sub_uint256(expr, /** @src 0:5278:5287  \"gasleft()\" */ gas())\n                                                    /// @src 0:5269:5305  \"preGas - gasleft() + opInfo.preOpGas\"\n                                                    let expr_5 := checked_add_uint256(expr_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5290:5305  \"opInfo.preOpGas\" */ add(var_opInfo_155_mpos, 128)))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _18 := mload(/** @src 0:5347:5361  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:5397:5403  \"opInfo\"\n                                                    fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                    /// @src 0:5475:5484  \"actualGas\"\n                                                    fun_emitUserOperationEvent(var_opInfo_155_mpos, _18, expr_5)\n                                                    /// @src 0:5503:5528  \"collected = actualGasCost\"\n                                                    var_collected := _18\n                                                }\n                                            }\n                                            default /// @src 0:4793:6093  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            {\n                                                /// @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                let _19 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                mstore(_19, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ add(_19, 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                /// @src 0:1474:1487  \"hex\\\"deadaa51\\\"\"\n                                                mstore(add(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ 36), /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ add(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ 68), 15)\n                                                mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ \"AA95 out of gas\")\n                                                /// @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                revert(_19, /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ 132)\n                                            }\n                                        }\n                                    }\n                                    /// @ast-id 146 @src 0:2446:2725  \"function _compensate(address payable beneficiary, uint256 amount) internal {...\"\n                                    function fun_compensate(var_beneficiary, var_amount)\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 0:2539:2564  \"beneficiary != address(0)\" */ var_beneficiary, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        if /** @src 0:2539:2564  \"beneficiary != address(0)\" */ iszero(_1)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        {\n                                            let memPtr := mload(64)\n                                            mstore(memPtr, shl(229, 4594637))\n                                            mstore(add(memPtr, 4), 32)\n                                            mstore(add(memPtr, 36), 24)\n                                            mstore(add(memPtr, 68), \"AA90 invalid beneficiary\")\n                                            revert(memPtr, 100)\n                                        }\n                                        /// @src 0:2622:2657  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        let expr_138_component := call(gas(), _1, var_amount, /** @src 0:2562:2563  \"0\" */ 0x00, 0x00, 0x00, 0x00)\n                                        /// @src 0:2622:2657  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        pop(extract_returndata())\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if iszero(expr_138_component)\n                                        {\n                                            let memPtr_1 := mload(64)\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), 32)\n                                            mstore(add(memPtr_1, 36), 31)\n                                            mstore(add(memPtr_1, 68), \"AA91 failed send to beneficiary\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                    }\n                                    /// @ast-id 2527 @src 4:1559:1818  \"function _incrementDeposit(address account, uint256 amount) internal returns (uint256) {...\"\n                                    function fun_incrementDeposit(var_account, var_amount) -> var\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(var_account, sub(shl(160, 1), 1)))\n                                        mstore(0x20, /** @src 4:1683:1691  \"deposits\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let dataSlot := keccak256(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x40)\n                                        /// @src 4:1730:1751  \"info.deposit + amount\"\n                                        let expr := checked_add_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 4:1730:1742  \"info.deposit\" */ dataSlot), /** @src 4:1730:1751  \"info.deposit + amount\" */ var_amount)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot, expr)\n                                        /// @src 4:1795:1811  \"return newAmount\"\n                                        var := expr\n                                    }\n                                    /// @ast-id 2053 @src 0:29763:30294  \"function getUserOpGasPrice(...\"\n                                    function fun_getUserOpGasPrice(var_mUserOp_mpos) -> var_\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:29922:29942  \"mUserOp.maxFeePerGas\" */ add(var_mUserOp_mpos, 256))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := mload(/** @src 0:29987:30015  \"mUserOp.maxPriorityFeePerGas\" */ add(var_mUserOp_mpos, 288))\n                                        /// @src 0:30029:30202  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        if /** @src 0:30033:30069  \"maxFeePerGas == maxPriorityFeePerGas\" */ eq(_1, _2)\n                                        /// @src 0:30029:30202  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        {\n                                            /// @src 0:30168:30187  \"return maxFeePerGas\"\n                                            var_ := _1\n                                            leave\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := add(/** @src 0:30240:30276  \"maxPriorityFeePerGas + block.basefee\" */ _2, /** @src 0:30263:30276  \"block.basefee\" */ basefee())\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        let expr := /** @src -1:-1:-1 */ 0\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        switch /** @src 1:3338:3343  \"a < b\" */ lt(_1, _3)\n                                        case /** @src 1:3338:3351  \"a < b ? a : b\" */ 0 { expr := _3 }\n                                        default { expr := _1 }\n                                        /// @src 0:30215:30277  \"return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee)\"\n                                        var_ := expr\n                                    }\n                                    /// @ast-id 358 @src 0:6115:6505  \"function emitUserOperationEvent(UserOpInfo memory opInfo, bool success, uint256 actualGasCost, uint256 actualGas) internal virtual {...\"\n                                    function fun_emitUserOperationEvent(var_opInfo_mpos, var_actualGasCost, var_actualGas)\n                                    {\n                                        /// @src 0:1543:1547  \"2048\"\n                                        let _1 := mload(/** @src 0:6293:6310  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6324:6338  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := sub(shl(160, 1), 1)\n                                        let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6324:6345  \"opInfo.mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6359:6383  \"opInfo.mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let _3 := mload(/** @src 0:6397:6417  \"opInfo.mUserOp.nonce\" */ add(_mpos, /** @src 0:6293:6310  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                        let _4 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_4, _3)\n                                        mstore(add(_4, /** @src 0:6293:6310  \"opInfo.userOpHash\" */ 32), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(_4, 64), var_actualGasCost)\n                                        mstore(add(_4, 96), var_actualGas)\n                                        /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                        log4(_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6261:6498  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _1, cleaned, cleaned_1)\n                                    }\n                                    /// @ast-id 376 @src 0:6511:6739  \"function emitPrefundTooLow(UserOpInfo memory opInfo) internal virtual {...\"\n                                    function fun_emitPrefundTooLow(var_opInfo_mpos)\n                                    {\n                                        /// @src 0:1543:1547  \"2048\"\n                                        let _1 := mload(/** @src 0:6636:6653  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6667:6681  \"opInfo.mUserOp\"\n                                        let _665_mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6667:6688  \"opInfo.mUserOp.sender\" */ _665_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := mload(/** @src 0:6702:6722  \"opInfo.mUserOp.nonce\" */ add(_665_mpos, /** @src 0:6636:6653  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6596:6732  \"UserOperationPrefundTooLow(...\"\n                                        let _3 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_3, _2)\n                                        /// @src 0:6596:6732  \"UserOperationPrefundTooLow(...\"\n                                        log3(_3, /** @src 0:6636:6653  \"opInfo.userOpHash\" */ 32, /** @src 0:6596:6732  \"UserOperationPrefundTooLow(...\" */ 0x67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e, _1, cleaned)\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(headStart, value0, value1, value2) -> tail\n                                    {\n                                        mstore(headStart, 96)\n                                        tail := abi_encode_struct_PackedUserOperation_calldata(value0, add(headStart, 96))\n                                        mstore(add(headStart, 32), value1)\n                                        mstore(add(headStart, 64), value2)\n                                    }\n                                    /// @ast-id 1622 @src 0:22951:23437  \"function _getValidationData(...\"\n                                    function fun_getValidationData(var_validationData) -> var_aggregator, var_outOfTimeRange\n                                    {\n                                        /// @src 0:23091:23167  \"if (validationData == 0) {...\"\n                                        if /** @src 0:23095:23114  \"validationData == 0\" */ iszero(var_validationData)\n                                        /// @src 0:23091:23167  \"if (validationData == 0) {...\"\n                                        {\n                                            /// @src 0:23130:23156  \"return (address(0), false)\"\n                                            var_aggregator := /** @src 0:23113:23114  \"0\" */ 0x00\n                                            /// @src 0:23130:23156  \"return (address(0), false)\"\n                                            var_outOfTimeRange := /** @src 0:23113:23114  \"0\" */ 0x00\n                                            /// @src 0:23130:23156  \"return (address(0), false)\"\n                                            leave\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let memPtr := mload(64)\n                                        finalize_allocation_26350(memPtr)\n                                        mstore(memPtr, /** @src 0:23113:23114  \"0\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 32), /** @src 0:23113:23114  \"0\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 64), /** @src 0:23113:23114  \"0\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 1:1507:1530  \"uint160(validationData)\" */ var_validationData, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := 0xffffffffffff\n                                        /// @src 1:1537:1586  \"uint48 validUntil = uint48(validationData >> 160)\"\n                                        let var_validUntil := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(/** @src 1:1582:1585  \"160\" */ 0xa0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData), _2)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        if /** @src 1:1596:1611  \"validUntil == 0\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validUntil)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        {\n                                            /// @src 1:1623:1652  \"validUntil = type(uint48).max\"\n                                            var_validUntil := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2\n                                        }\n                                        let result := shr(/** @src 1:1710:1718  \"48 + 160\" */ 0xd0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData)\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation_26350(memPtr_1)\n                                        mstore(memPtr_1, _1)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32), result)\n                                        let _3 := and(var_validUntil, _2)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64), _3)\n                                        /// @src 0:23322:23392  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        let expr := /** @src 0:23322:23355  \"block.timestamp > data.validUntil\" */ gt(/** @src 0:23322:23337  \"block.timestamp\" */ timestamp(), /** @src 0:23322:23355  \"block.timestamp > data.validUntil\" */ _3)\n                                        /// @src 0:23322:23392  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        if iszero(expr)\n                                        {\n                                            expr := /** @src 0:23359:23392  \"block.timestamp < data.validAfter\" */ lt(/** @src 0:23322:23337  \"block.timestamp\" */ timestamp(), /** @src 0:23359:23392  \"block.timestamp < data.validAfter\" */ result)\n                                        }\n                                        /// @src 0:23305:23392  \"outOfTimeRange = block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        var_outOfTimeRange := expr\n                                        /// @src 0:23402:23430  \"aggregator = data.aggregator\"\n                                        var_aggregator := _1\n                                    }\n                                }\n                                data \".metadata\" hex\"a164736f6c6343000818000a\"\n                            }\n                            /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                            object \"SenderCreator_2414\" {\n                                code {\n                                    {\n                                        /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                        let _1 := memoryguard(0x80)\n                                        mstore(64, _1)\n                                        if callvalue() { revert(0, 0) }\n                                        let _2 := datasize(\"SenderCreator_2414_deployed\")\n                                        codecopy(_1, dataoffset(\"SenderCreator_2414_deployed\"), _2)\n                                        return(_1, _2)\n                                    }\n                                }\n                                /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                                object \"SenderCreator_2414_deployed\" {\n                                    code {\n                                        {\n                                            /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                            let _1 := memoryguard(0x80)\n                                            if iszero(lt(calldatasize(), 4))\n                                            {\n                                                let _2 := 0\n                                                if eq(0x570e1a36, shr(224, calldataload(_2)))\n                                                {\n                                                    if callvalue() { revert(_2, _2) }\n                                                    if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                                    let offset := calldataload(4)\n                                                    let _3 := 0xffffffffffffffff\n                                                    if gt(offset, _3) { revert(_2, _2) }\n                                                    if iszero(slt(add(offset, 35), calldatasize())) { revert(_2, _2) }\n                                                    let length := calldataload(add(4, offset))\n                                                    if gt(length, _3) { revert(_2, _2) }\n                                                    if gt(add(add(offset, length), 36), calldatasize()) { revert(_2, _2) }\n                                                    let var_sender := _2\n                                                    if gt(/** @src 3:726:728  \"20\" */ 0x14, /** @src 3:205:1231  \"contract SenderCreator {...\" */ length) { revert(_2, _2) }\n                                                    let lengthOut := add(length, not(19))\n                                                    if gt(lengthOut, _3)\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    let _4 := not(31)\n                                                    let newFreePtr := add(_1, and(add(and(add(length, 11), _4), 63), _4))\n                                                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    mstore(64, newFreePtr)\n                                                    mstore(_1, lengthOut)\n                                                    let dst := add(_1, 32)\n                                                    calldatacopy(dst, add(offset, 56), lengthOut)\n                                                    mstore(add(add(_1, length), 12), _2)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let var_success := call(gas(), /** @src 3:205:1231  \"contract SenderCreator {...\" */ shr(96, calldataload(add(offset, 36))), _2, /** @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\" */ dst, mload(_1), /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2, 32)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    var_sender := mload(/** @src 3:205:1231  \"contract SenderCreator {...\" */ _2)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    if /** @src 3:1169:1177  \"!success\" */ iszero(var_success)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 3:1193:1212  \"sender = address(0)\"\n                                                        var_sender := /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2\n                                                    }\n                                                    let memPos := mload(64)\n                                                    mstore(memPos, and(var_sender, sub(shl(160, 1), 1)))\n                                                    return(memPos, 32)\n                                                }\n                                            }\n                                            revert(0, 0)\n                                        }\n                                    }\n                                    data \".metadata\" hex\"a164736f6c6343000818000a\"\n                                }\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000818000a\"\n                    }\n                }\n                /// @use-src 6:\"lib/account-abstraction/contracts/interfaces/IAccount.sol\", 62:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 71:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 84:\"src/ethereum/MinimalAccount.sol\"\n                object \"MinimalAccount_51919\" {\n                    code {\n                        {\n                            /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                            let _1 := memoryguard(0xa0)\n                            if callvalue() { revert(0, 0) }\n                            let programSize := datasize(\"MinimalAccount_51919\")\n                            let argSize := sub(codesize(), programSize)\n                            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n                            {\n                                mstore(/** @src -1:-1:-1 */ 0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(/** @src -1:-1:-1 */ 0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                            codecopy(_1, programSize, argSize)\n                            if slt(sub(add(_1, argSize), _1), 32)\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                            let value := mload(_1)\n                            let _2 := sub(shl(160, 1), 1)\n                            let _3 := and(value, _2)\n                            if iszero(eq(value, _3))\n                            {\n                                revert(/** @src -1:-1:-1 */ 0, 0)\n                            }\n                            /// @src 62:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            if /** @src 62:1273:1299  \"initialOwner == address(0)\" */ iszero(/** @src 84:963:973  \"msg.sender\" */ caller())\n                            /// @src 62:1269:1364  \"if (initialOwner == address(0)) {...\"\n                            {\n                                /// @src 62:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                let _4 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(64)\n                                /// @src 62:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                mstore(_4, shl(224, 0x1e4fbdf7))\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                mstore(/** @src 62:1322:1353  \"OwnableInvalidOwner(address(0))\" */ add(_4, 4), /** @src -1:-1:-1 */ 0)\n                                /// @src 62:1322:1353  \"OwnableInvalidOwner(address(0))\"\n                                revert(_4, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 36)\n                            }\n                            let _5 := sload(/** @src -1:-1:-1 */ 0)\n                            /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                            sstore(/** @src -1:-1:-1 */ 0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ or(and(_5, not(sub(shl(160, 1), 1))), /** @src 84:963:973  \"msg.sender\" */ caller()))\n                            /// @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                            let _6 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(64)\n                            /// @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                            log3(/** @src -1:-1:-1 */ 0, 0, /** @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(_5, _2), /** @src 84:963:973  \"msg.sender\" */ caller())\n                            /// @src 84:986:1024  \"i_entryPoint = IEntryPoint(entrypoint)\"\n                            mstore(128, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _3)\n                            let _7 := datasize(\"MinimalAccount_51919_deployed\")\n                            codecopy(_6, dataoffset(\"MinimalAccount_51919_deployed\"), _7)\n                            setimmutable(_6, \"51716\", mload(/** @src 84:986:1024  \"i_entryPoint = IEntryPoint(entrypoint)\" */ 128))\n                            /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                            return(_6, _7)\n                        }\n                    }\n                    /// @use-src 1:\"lib/account-abstraction/contracts/core/Helpers.sol\", 62:\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\", 71:\"lib/openzeppelin-contracts/contracts/utils/Context.sol\", 74:\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\", 75:\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\", 84:\"src/ethereum/MinimalAccount.sol\"\n                    object \"MinimalAccount_51919_deployed\" {\n                        code {\n                            {\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                let _1 := 64\n                                mstore(_1, memoryguard(0x80))\n                                let _2 := 4\n                                if iszero(lt(calldatasize(), _2))\n                                {\n                                    let _3 := 0\n                                    switch shr(224, calldataload(_3))\n                                    case 0x19822f7c {\n                                        if callvalue() { revert(_3, _3) }\n                                        let _4 := not(3)\n                                        if slt(add(calldatasize(), _4), 96) { revert(_3, _3) }\n                                        let offset := calldataload(_2)\n                                        if gt(offset, 0xffffffffffffffff) { revert(_3, _3) }\n                                        if slt(add(sub(calldatasize(), offset), _4), 288) { revert(_3, _3) }\n                                        let value := calldataload(68)\n                                        /// @src 84:2709:2764  \"validationData = _validateSignature(userOp, userOpHash)\"\n                                        let var_validationData := /** @src 84:2726:2764  \"_validateSignature(userOp, userOpHash)\" */ fun_validateSignature(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ add(_2, offset), calldataload(36))\n                                        /// @src 84:3665:3842  \"if(missingAccountFunds != 0) {...\"\n                                        if /** @src 84:3668:3692  \"missingAccountFunds != 0\" */ iszero(iszero(value))\n                                        /// @src 84:3665:3842  \"if(missingAccountFunds != 0) {...\"\n                                        {\n                                            /// @src 84:3727:3806  \"payable(msg.sender).call{value: missingAccountFunds,gas: type(uint256).max}(\\\"\\\")\"\n                                            pop(call(/** @src 84:3784:3801  \"type(uint256).max\" */ not(0), /** @src 84:3735:3745  \"msg.sender\" */ caller(), /** @src 84:3727:3806  \"payable(msg.sender).call{value: missingAccountFunds,gas: type(uint256).max}(\\\"\\\")\" */ value, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _3, _3, _3, _3))\n                                            /// @src 84:3727:3806  \"payable(msg.sender).call{value: missingAccountFunds,gas: type(uint256).max}(\\\"\\\")\"\n                                            pop(extract_returndata())\n                                        }\n                                        /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                        let memPos := mload(_1)\n                                        mstore(memPos, var_validationData)\n                                        return(memPos, 32)\n                                    }\n                                    case 0x44ab613f {\n                                        if callvalue() { revert(_3, _3) }\n                                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                        let memPos_1 := mload(_1)\n                                        mstore(memPos_1, and(/** @src 84:4204:4216  \"i_entryPoint\" */ loadimmutable(\"51716\"), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ sub(shl(160, 1), 1)))\n                                        return(memPos_1, 32)\n                                    }\n                                    case 0x715018a6 {\n                                        if callvalue() { revert(_3, _3) }\n                                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                        /// @src 62:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                        let _5 := sload(_3)\n                                        sstore(_3, and(_5, shl(160, 0xffffffffffffffffffffffff)))\n                                        /// @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _3, _3, /** @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(_5, sub(shl(160, 1), 1)), _3)\n                                        return(_3, _3)\n                                    }\n                                    case 0x8da5cb5b {\n                                        if callvalue() { revert(_3, _3) }\n                                        if slt(add(calldatasize(), not(3)), _3) { revert(_3, _3) }\n                                        let cleaned := and(sload(_3), sub(shl(160, 1), 1))\n                                        let memPos_2 := mload(_1)\n                                        mstore(memPos_2, cleaned)\n                                        return(memPos_2, 32)\n                                    }\n                                    case 0xb61d27f6 {\n                                        if callvalue() { revert(_3, _3) }\n                                        if slt(add(calldatasize(), not(3)), 96) { revert(_3, _3) }\n                                        let value0 := abi_decode_address()\n                                        let _6 := 68\n                                        let offset_1 := calldataload(68)\n                                        let _7 := 0xffffffffffffffff\n                                        if gt(offset_1, _7) { revert(_3, _3) }\n                                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(_3, _3) }\n                                        let length := calldataload(add(_2, offset_1))\n                                        if gt(length, _7) { revert(_3, _3) }\n                                        if gt(add(add(offset_1, length), 36), calldatasize()) { revert(_3, _3) }\n                                        let _8 := sub(shl(160, 1), 1)\n                                        /// @src 84:1708:1768  \"msg.sender != address(i_entryPoint) && msg.sender != owner()\"\n                                        let expr := /** @src 84:1708:1743  \"msg.sender != address(i_entryPoint)\" */ iszero(eq(/** @src 84:1708:1718  \"msg.sender\" */ caller(), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(/** @src 84:1730:1742  \"i_entryPoint\" */ loadimmutable(\"51716\"), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _8)))\n                                        /// @src 84:1708:1768  \"msg.sender != address(i_entryPoint) && msg.sender != owner()\"\n                                        if expr\n                                        {\n                                            expr := /** @src 84:1747:1768  \"msg.sender != owner()\" */ iszero(eq(/** @src 84:1708:1718  \"msg.sender\" */ caller(), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(sload(_3), _8)))\n                                        }\n                                        /// @src 84:1705:1845  \"if(msg.sender != address(i_entryPoint) && msg.sender != owner()){...\"\n                                        if expr\n                                        {\n                                            /// @src 84:1791:1833  \"MinimalAccount__NotFromEntryPointOrOwner()\"\n                                            let _9 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(_1)\n                                            /// @src 84:1791:1833  \"MinimalAccount__NotFromEntryPointOrOwner()\"\n                                            mstore(_9, shl(227, 0x0a1c585d))\n                                            revert(_9, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _2)\n                                        }\n                                        /// @src 84:2283:2320  \"dest.call{value: value}(functionData)\"\n                                        let _10 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(_1)\n                                        calldatacopy(_10, add(offset_1, 36), length)\n                                        let _11 := add(_10, length)\n                                        mstore(_11, _3)\n                                        /// @src 84:2283:2320  \"dest.call{value: value}(functionData)\"\n                                        let expr_component := call(gas(), value0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ calldataload(36), /** @src 84:2283:2320  \"dest.call{value: value}(functionData)\" */ _10, sub(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _11, /** @src 84:2283:2320  \"dest.call{value: value}(functionData)\" */ _10), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _3, _3)\n                                        /// @src 84:2283:2320  \"dest.call{value: value}(functionData)\"\n                                        let expr_component_mpos := extract_returndata()\n                                        /// @src 84:2331:2412  \"if(!success) {...\"\n                                        if /** @src 84:2334:2342  \"!success\" */ iszero(expr_component)\n                                        /// @src 84:2331:2412  \"if(!success) {...\"\n                                        {\n                                            /// @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\"\n                                            let _12 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(_1)\n                                            /// @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\"\n                                            mstore(_12, shl(228, 0x038fe215))\n                                            /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                            let _13 := 32\n                                            mstore(/** @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\" */ add(_12, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _2), 32)\n                                            let length_1 := mload(expr_component_mpos)\n                                            mstore(add(/** @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\" */ _12, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 36), length_1)\n                                            let i := _3\n                                            for { } lt(i, length_1) { i := add(i, _13) }\n                                            {\n                                                mstore(add(add(/** @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\" */ _12, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ i), _6), mload(add(add(expr_component_mpos, i), _13)))\n                                            }\n                                            mstore(add(add(/** @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\" */ _12, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ length_1), 68), _3)\n                                            /// @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\"\n                                            revert(_12, add(sub(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ add(/** @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\" */ _12, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(add(length_1, 0x1f), not(31))), /** @src 84:2366:2400  \"MinimalAccount__CallFailed(result)\" */ _12), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 68))\n                                        }\n                                        return(_3, _3)\n                                    }\n                                    case 0xf2fde38b {\n                                        if callvalue() { revert(_3, _3) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_3, _3) }\n                                        let value0_1 := abi_decode_address()\n                                        /// @src 62:1500:1562  \"modifier onlyOwner() {...\"\n                                        fun_checkOwner()\n                                        /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                        let _14 := sub(shl(160, 1), 1)\n                                        let _15 := and(/** @src 62:2627:2649  \"newOwner == address(0)\" */ value0_1, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _14)\n                                        /// @src 62:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        if /** @src 62:2627:2649  \"newOwner == address(0)\" */ iszero(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _15)\n                                        /// @src 62:2623:2714  \"if (newOwner == address(0)) {...\"\n                                        {\n                                            /// @src 62:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            let _16 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(_1)\n                                            /// @src 62:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            mstore(_16, shl(224, 0x1e4fbdf7))\n                                            /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                            mstore(/** @src 62:2672:2703  \"OwnableInvalidOwner(address(0))\" */ add(_16, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _2), _3)\n                                            /// @src 62:2672:2703  \"OwnableInvalidOwner(address(0))\"\n                                            revert(_16, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 36)\n                                        }\n                                        let _17 := sload(_3)\n                                        sstore(_3, or(and(_17, shl(160, 0xffffffffffffffffffffffff)), _15))\n                                        /// @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\"\n                                        log3(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _3, _3, /** @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(_17, _14), /** @src 62:3052:3092  \"OwnershipTransferred(oldOwner, newOwner)\" */ _15)\n                                        /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                        return(_3, _3)\n                                    }\n                                }\n                                if iszero(calldatasize()) { stop() }\n                                revert(0, 0)\n                            }\n                            function abi_decode_address() -> value\n                            {\n                                value := calldataload(4)\n                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            }\n                            function allocate_memory(size) -> memPtr\n                            {\n                                memPtr := mload(64)\n                                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function array_allocation_size_bytes(length) -> size\n                            {\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                size := add(and(add(length, 31), not(31)), 0x20)\n                            }\n                            function extract_returndata() -> data\n                            {\n                                switch returndatasize()\n                                case 0 { data := 96 }\n                                default {\n                                    let _1 := returndatasize()\n                                    let memPtr := allocate_memory(array_allocation_size_bytes(_1))\n                                    mstore(memPtr, _1)\n                                    data := memPtr\n                                    returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ returndatasize())\n                                }\n                            }\n                            /// @ast-id 51874 @src 84:3119:3587  \"function _validateSignature(PackedUserOperation calldata userOp,bytes32 userOpHash) internal view returns (uint256 validationData) {...\"\n                            function fun_validateSignature(var_userOp_offset, var_userOpHash) -> var_validationData\n                            {\n                                /// @src -1:-1:-1\n                                let _1 := 0\n                                /// @src 75:1367:1676  \"assembly {...\"\n                                mstore(/** @src -1:-1:-1 */ _1, /** @src 75:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                                mstore(0x1c, var_userOpHash)\n                                let var_digest := keccak256(/** @src -1:-1:-1 */ _1, /** @src 75:1367:1676  \"assembly {...\" */ 0x3c)\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                let rel_offset_of_tail := calldataload(/** @src 84:3407:3423  \"userOp.signature\" */ add(var_userOp_offset, 256))\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), var_userOp_offset), not(30))))\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                let addr := add(var_userOp_offset, rel_offset_of_tail)\n                                let length := calldataload(addr)\n                                if gt(length, 0xffffffffffffffff)\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                let addr_1 := add(addr, 0x20)\n                                if sgt(addr_1, sub(calldatasize(), length))\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                let array := allocate_memory(array_allocation_size_bytes(length))\n                                mstore(array, length)\n                                if gt(add(add(addr, length), 0x20), calldatasize())\n                                {\n                                    revert(/** @src -1:-1:-1 */ _1, _1)\n                                }\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                calldatacopy(add(array, 0x20), addr_1, length)\n                                mstore(add(add(array, length), 0x20), /** @src -1:-1:-1 */ _1)\n                                /// @src 74:3859:3886  \"tryRecover(hash, signature)\"\n                                let expr_component, expr_component_1, expr_component_2 := fun_tryRecover_49261(var_digest, array)\n                                /// @src 74:3915:3923  \"errorArg\"\n                                fun_throwError(expr_component_1, expr_component_2)\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                let _2 := sub(shl(160, 1), 1)\n                                /// @src 84:3435:3520  \"if (signer != owner()) {...\"\n                                if /** @src 84:3439:3456  \"signer != owner()\" */ iszero(eq(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(/** @src 84:3439:3456  \"signer != owner()\" */ expr_component, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _2), and(sload(/** @src -1:-1:-1 */ _1), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ _2)))\n                                /// @src 84:3435:3520  \"if (signer != owner()) {...\"\n                                {\n                                    /// @src 84:3473:3501  \"return SIG_VALIDATION_FAILED\"\n                                    var_validationData := /** @src 1:305:306  \"1\" */ 0x01\n                                    /// @src 84:3473:3501  \"return SIG_VALIDATION_FAILED\"\n                                    leave\n                                }\n                                /// @src 84:3530:3559  \"return SIG_VALIDATION_SUCCESS\"\n                                var_validationData := /** @src -1:-1:-1 */ _1\n                            }\n                            /// @ast-id 47394 @src 62:1796:1958  \"function _checkOwner() internal view virtual {...\"\n                            function fun_checkOwner()\n                            {\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                let cleaned := and(sload(/** @src 62:1710:1716  \"_owner\" */ 0x00), /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ sub(shl(160, 1), 1))\n                                /// @src 62:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                if /** @src 62:1855:1878  \"owner() != _msgSender()\" */ iszero(eq(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ cleaned, /** @src 71:735:745  \"msg.sender\" */ caller()))\n                                /// @src 62:1851:1952  \"if (owner() != _msgSender()) {...\"\n                                {\n                                    /// @src 62:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    let _1 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(64)\n                                    /// @src 62:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    mstore(_1, shl(224, 0x118cdaa7))\n                                    /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                    mstore(/** @src 62:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\" */ add(_1, 4), /** @src 71:735:745  \"msg.sender\" */ caller())\n                                    /// @src 62:1901:1941  \"OwnableUnauthorizedAccount(_msgSender())\"\n                                    revert(_1, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 36)\n                                }\n                            }\n                            /// @ast-id 49261 @src 74:2129:2895  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n                            function fun_tryRecover_49261(var_hash, var_signature_mpos) -> var, var_1, var_2\n                            {\n                                /// @src 74:2256:2272  \"signature.length\"\n                                let expr := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(/** @src 74:2256:2272  \"signature.length\" */ var_signature_mpos)\n                                /// @src 74:2252:2889  \"if (signature.length == 65) {...\"\n                                switch /** @src 74:2256:2278  \"signature.length == 65\" */ eq(expr, /** @src 74:2276:2278  \"65\" */ 0x41)\n                                case /** @src 74:2252:2889  \"if (signature.length == 65) {...\" */ 0 {\n                                    /// @src 74:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var := /** @src 74:2811:2812  \"0\" */ 0x00\n                                    /// @src 74:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var_1 := /** @src 74:2815:2850  \"RecoverError.InvalidSignatureLength\" */ 2\n                                    /// @src 74:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                                    var_2 := expr\n                                    leave\n                                }\n                                default /// @src 74:2252:2889  \"if (signature.length == 65) {...\"\n                                {\n                                    /// @src 74:2539:2719  \"assembly {...\"\n                                    let var_r := mload(add(var_signature_mpos, 0x20))\n                                    /// @src 74:2739:2764  \"tryRecover(hash, v, r, s)\"\n                                    let expr_component, expr_component_1, expr_49242_component := fun_tryRecover(var_hash, /** @src 74:2539:2719  \"assembly {...\" */ byte(/** @src -1:-1:-1 */ 0, /** @src 74:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x60))), /** @src 74:2739:2764  \"tryRecover(hash, v, r, s)\" */ var_r, /** @src 74:2539:2719  \"assembly {...\" */ mload(add(var_signature_mpos, 0x40)))\n                                    /// @src 74:2732:2764  \"return tryRecover(hash, v, r, s)\"\n                                    var := expr_component\n                                    var_1 := expr_component_1\n                                    var_2 := expr_49242_component\n                                    leave\n                                }\n                            }\n                            /// @ast-id 49534 @src 74:7196:7728  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n                            function fun_throwError(var_error, var_errorArg)\n                            {\n                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                if iszero(lt(var_error, 4))\n                                {\n                                    mstore(/** @src 74:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ shl(224, 0x4e487b71))\n                                    mstore(4, 0x21)\n                                    revert(/** @src 74:7291:7311  \"RecoverError.NoError\" */ 0, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 0x24)\n                                }\n                                /// @src 74:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                                switch /** @src 74:7282:7311  \"error == RecoverError.NoError\" */ iszero(var_error)\n                                case /** @src 74:7278:7722  \"if (error == RecoverError.NoError) {...\" */ 0 {\n                                    /// @src 74:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                                    switch /** @src 74:7378:7416  \"error == RecoverError.InvalidSignature\" */ eq(var_error, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 1)\n                                    case /** @src 74:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\" */ 0 {\n                                        /// @src 74:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                        switch /** @src 74:7483:7527  \"error == RecoverError.InvalidSignatureLength\" */ eq(var_error, /** @src 74:7492:7527  \"RecoverError.InvalidSignatureLength\" */ 2)\n                                        case /** @src 74:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\" */ 0 {\n                                            /// @src 74:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                                            if /** @src 74:7617:7656  \"error == RecoverError.InvalidSignatureS\" */ eq(var_error, /** @src 74:7626:7656  \"RecoverError.InvalidSignatureS\" */ 3)\n                                            /// @src 74:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                                            {\n                                                /// @src 74:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                let _1 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(64)\n                                                /// @src 74:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                mstore(_1, shl(226, 0x35e2f383))\n                                                /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                                mstore(/** @src 74:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\" */ add(_1, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 4), var_errorArg)\n                                                /// @src 74:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                                revert(_1, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 36)\n                                            }\n                                        }\n                                        default /// @src 74:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                        {\n                                            /// @src 74:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            let _2 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(64)\n                                            /// @src 74:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            mstore(_2, shl(224, 0xfce698f7))\n                                            /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                            mstore(/** @src 74:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\" */ add(_2, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 4), var_errorArg)\n                                            /// @src 74:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                            revert(_2, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 36)\n                                        }\n                                    }\n                                    default /// @src 74:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                                    {\n                                        /// @src 74:7439:7462  \"ECDSAInvalidSignature()\"\n                                        let _3 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(64)\n                                        /// @src 74:7439:7462  \"ECDSAInvalidSignature()\"\n                                        mstore(_3, shl(224, 0xf645eedf))\n                                        revert(_3, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 4)\n                                    }\n                                }\n                                default /// @src 74:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                                {\n                                    /// @src 74:7327:7334  \"return;\"\n                                    leave\n                                }\n                            }\n                            /// @ast-id 49449 @src 74:5140:6670  \"function tryRecover(...\"\n                            function fun_tryRecover(var_hash, var_v, var_r, var_s) -> var_, var, var_1\n                            {\n                                /// @src 74:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                                if /** @src 74:6186:6265  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ gt(var_s, /** @src 74:6199:6265  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\" */ 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0)\n                                /// @src 74:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                                {\n                                    /// @src 74:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var_ := /** @src 74:6297:6298  \"0\" */ 0x00\n                                    /// @src 74:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var := /** @src 74:6301:6331  \"RecoverError.InvalidSignatureS\" */ 3\n                                    /// @src 74:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                                    var_1 := var_s\n                                    leave\n                                }\n                                /// @src 74:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                let _1 := /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ mload(64)\n                                mstore(_1, var_hash)\n                                mstore(add(_1, 32), and(var_v, 0xff))\n                                mstore(add(_1, 64), var_r)\n                                mstore(add(_1, 96), var_s)\n                                /// @src -1:-1:-1\n                                let _2 := 0\n                                /// @src 74:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                mstore(/** @src -1:-1:-1 */ _2, _2)\n                                /// @src 74:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                if iszero(staticcall(gas(), 1, _1, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 128, /** @src -1:-1:-1 */ _2, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ 32))\n                                /// @src 74:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                {\n                                    /// @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\"\n                                    let pos := mload(64)\n                                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 74:6457:6481  \"ecrecover(hash, v, r, s)\"\n                                let _3 := mload(/** @src -1:-1:-1 */ _2)\n                                /// @src 74:6491:6604  \"if (signer == address(0)) {...\"\n                                if /** @src 74:6495:6515  \"signer == address(0)\" */ iszero(/** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ and(/** @src 74:6495:6515  \"signer == address(0)\" */ _3, /** @src 84:817:4229  \"contract MinimalAccount is IAccount,Ownable {...\" */ sub(shl(160, 1), 1)))\n                                /// @src 74:6491:6604  \"if (signer == address(0)) {...\"\n                                {\n                                    /// @src 74:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var_ := /** @src -1:-1:-1 */ _2\n                                    /// @src 74:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var := /** @src 74:6457:6481  \"ecrecover(hash, v, r, s)\" */ 1\n                                    /// @src 74:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    var_1 := /** @src -1:-1:-1 */ _2\n                                    /// @src 74:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                                    leave\n                                }\n                                /// @src 74:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                                var_ := _3\n                                var := /** @src -1:-1:-1 */ _2\n                                /// @src 74:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                                var_1 := /** @src -1:-1:-1 */ _2\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000818000a\"\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000818000a\"\n            }\n        }\n        /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 83:\"script/SendPackedUserOp.s.sol\"\n        object \"SendPackedUserOp_51692\" {\n            code {\n                {\n                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ not(16711935)), 65537))\n                    let _2 := datasize(\"SendPackedUserOp_51692_deployed\")\n                    codecopy(_1, dataoffset(\"SendPackedUserOp_51692_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 75:\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\", 83:\"script/SendPackedUserOp.s.sol\"\n            object \"SendPackedUserOp_51692_deployed\" {\n                code {\n                    {\n                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                        let _1 := memoryguard(0x80)\n                        mstore(64, _1)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let _2 := 0\n                            switch shr(224, calldataload(_2))\n                            case 0xa6599ac6 {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), 128) { revert(_2, _2) }\n                                let offset := calldataload(4)\n                                let _3 := 0xffffffffffffffff\n                                if gt(offset, _3) { revert(_2, _2) }\n                                if iszero(slt(add(offset, 35), calldatasize())) { revert(_2, _2) }\n                                let _4 := calldataload(add(4, offset))\n                                let _5 := 36\n                                if gt(_4, _3)\n                                {\n                                    mstore(_2, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(_2, _5)\n                                }\n                                let _6 := 0x20\n                                finalize_allocation(_1, add(and(add(_4, 31), not(31)), _6))\n                                mstore(_1, _4)\n                                if gt(add(add(offset, _4), _5), calldatasize()) { revert(_2, _2) }\n                                calldatacopy(add(_1, _6), add(offset, _5), _4)\n                                mstore(add(add(_1, _4), _6), _2)\n                                if slt(add(calldatasize(), not(35)), 64) { revert(_2, _2) }\n                                let memPtr := mload(64)\n                                finalize_allocation_4768(memPtr)\n                                let value := calldataload(_5)\n                                let _7 := sub(shl(160, 1), 1)\n                                if iszero(eq(value, and(value, _7))) { revert(_2, _2) }\n                                mstore(memPtr, value)\n                                let value_1 := calldataload(68)\n                                if iszero(eq(value_1, and(value_1, _7))) { revert(_2, _2) }\n                                let _8 := add(memPtr, _6)\n                                mstore(_8, value_1)\n                                let value_2 := calldataload(100)\n                                let _9 := and(value_2, _7)\n                                if iszero(eq(value_2, _9)) { revert(_2, _2) }\n                                pop(allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                let _10 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                mstore(_10, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x2d0335ab))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ add(_10, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), _9)\n                                let _11 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                let _12 := staticcall(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _11, /** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ _10, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _5, /** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ _10, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6)\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                if iszero(_12)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                let expr := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                if _12\n                                {\n                                    let _13 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6\n                                    /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                    if gt(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6, /** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ returndatasize()) { _13 := returndatasize() }\n                                    finalize_allocation(_10, _13)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    if slt(sub(/** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ add(_10, _13), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _10), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    {\n                                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                        revert(_2, _2)\n                                    }\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let value_3 := mload(_10)\n                                    if iszero(eq(value_3, and(value_3, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _3)))\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    {\n                                        revert(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, _2)\n                                    }\n                                    /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                    expr := value_3\n                                }\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let diff := add(and(expr, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _3), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ not(0))\n                                if gt(diff, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _3)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                {\n                                    mstore(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, shl(224, 0x4e487b71))\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    mstore(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x11)\n                                    revert(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, _5)\n                                }\n                                pop(allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                                let memPtr_1 := mload(64)\n                                finalize_allocation_4794(memPtr_1)\n                                mstore(memPtr_1, _9)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_1, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ and(diff, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _3))\n                                let memPtr_2 := mload(64)\n                                finalize_allocation_10378(memPtr_2)\n                                mstore(memPtr_2, _2)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_1, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64), memPtr_2)\n                                /// @src 83:3424:3876  \"PackedUserOperation({...\"\n                                let _14 := 96\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_1, _14), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _1)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_1, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 128), /** @src 83:3604:3655  \"uint256(verificationGasLimit) << 128 | callGasLimit\" */ 0x0100000000000000000000000000000001000000)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_1, 160), /** @src 83:3245:3253  \"16777216\" */ 0x01000000)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_1, 192), /** @src 83:3743:3794  \"uint256(maxPriorityFeePerGas) << 128 | maxFeePerGas\" */ 0x010000000000000000000000000000000100)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let memPtr_3 := mload(64)\n                                finalize_allocation_10378(memPtr_3)\n                                mstore(memPtr_3, _2)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_1, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 224), memPtr_3)\n                                let memPtr_4 := mload(64)\n                                finalize_allocation_10378(memPtr_4)\n                                mstore(memPtr_4, _2)\n                                /// @src 83:3424:3876  \"PackedUserOperation({...\"\n                                let _15 := add(memPtr_1, /** @src 83:3349:3352  \"256\" */ 0x0100)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(_15, memPtr_4)\n                                let cleaned := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 83:2440:2457  \"config.entryPoint\" */ memPtr), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _7)\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                let _16 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                mstore(_16, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x08b37793))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ add(_16, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), _6)\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                let _17 := staticcall(gas(), cleaned, _16, sub(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ abi_encode_struct_PackedUserOperation(memPtr_1, add(/** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ _16, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _5)), /** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ _16), _16, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6)\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                if iszero(_17)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_1 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_1, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                let expr_1 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                if _17\n                                {\n                                    let _18 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6\n                                    /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                    if gt(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6, /** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ returndatasize()) { _18 := returndatasize() }\n                                    finalize_allocation(_16, _18)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    if slt(sub(/** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ add(_16, _18), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _16), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    {\n                                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                        revert(_2, _2)\n                                    }\n                                    /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                    expr_1 := /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(_16)\n                                }\n                                /// @src 75:1367:1676  \"assembly {...\"\n                                mstore(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 75:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                                mstore(0x1c, expr_1)\n                                let var_digest := keccak256(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 75:1367:1676  \"assembly {...\" */ 0x3c)\n                                /// @src 83:2579:2586  \"uint8 v\"\n                                let var_v := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2597:2606  \"bytes32 r\"\n                                let var_r := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2617:2626  \"bytes32 s\"\n                                let var_s := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2742:2919  \"if (block.chainid == 31337) {...\"\n                                switch /** @src 83:2746:2768  \"block.chainid == 31337\" */ eq(/** @src 83:2746:2759  \"block.chainid\" */ chainid(), /** @src 83:2763:2768  \"31337\" */ 0x7a69)\n                                case /** @src 83:2742:2919  \"if (block.chainid == 31337) {...\" */ 0 {\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    let cleaned_1 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 83:2884:2898  \"config.account\" */ _8), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _7)\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    let _19 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    mstore(_19, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x8c1aa205))\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(/** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ add(_19, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), cleaned_1)\n                                    mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ _19, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _5), var_digest)\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    let _20 := staticcall(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _11, /** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ _19, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68, /** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ _19, /** @src 83:3424:3876  \"PackedUserOperation({...\" */ _14)\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    if iszero(_20)\n                                    {\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        let pos_2 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        returndatacopy(pos_2, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                        revert(pos_2, returndatasize())\n                                    }\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    let expr_component := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    let expr_component_1 := _2\n                                    let expr_component_2 := _2\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    if _20\n                                    {\n                                        let _21 := /** @src 83:3424:3876  \"PackedUserOperation({...\" */ _14\n                                        /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                        if gt(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ _14, /** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ returndatasize()) { _21 := returndatasize() }\n                                        finalize_allocation(_19, _21)\n                                        let expr_component_3, expr_component_4, expr_component_5 := abi_decode_uint8t_bytes32t_bytes32_fromMemory(_19, add(_19, _21))\n                                        expr_component := expr_component_3\n                                        expr_component_1 := expr_component_4\n                                        expr_component_2 := expr_component_5\n                                    }\n                                    /// @src 83:2864:2907  \"(v, r, s) = vm.sign(config.account, digest)\"\n                                    var_s := expr_component_2\n                                    var_r := expr_component_1\n                                    var_v := expr_component\n                                }\n                                default /// @src 83:2742:2919  \"if (block.chainid == 31337) {...\"\n                                {\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    let _22 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    mstore(_22, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x38d07aa9))\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(/** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ add(_22, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), /** @src 83:2665:2731  \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80)\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _22, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _5), var_digest)\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    let _23 := staticcall(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _11, /** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _22, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68, /** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _22, /** @src 83:3424:3876  \"PackedUserOperation({...\" */ _14)\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    if iszero(_23)\n                                    {\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        let pos_3 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        returndatacopy(pos_3, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                        revert(pos_3, returndatasize())\n                                    }\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    let expr_component_6 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    let expr_component_7 := _2\n                                    let expr_component_8 := _2\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    if _23\n                                    {\n                                        let _24 := /** @src 83:3424:3876  \"PackedUserOperation({...\" */ _14\n                                        /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                        if gt(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ _14, /** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ returndatasize()) { _24 := returndatasize() }\n                                        finalize_allocation(_22, _24)\n                                        let expr_component_9, expr_component_10, expr_component_11 := abi_decode_uint8t_bytes32t_bytes32_fromMemory(_22, add(_22, _24))\n                                        expr_component_6 := expr_component_9\n                                        expr_component_7 := expr_component_10\n                                        expr_component_8 := expr_component_11\n                                    }\n                                    /// @src 83:2785:2831  \"(v, r, s) = vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    var_s := expr_component_8\n                                    var_r := expr_component_7\n                                    var_v := expr_component_6\n                                }\n                                /// @src 83:2948:2973  \"abi.encodePacked(r, s, v)\"\n                                let expr_mpos := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                mstore(/** @src 83:2948:2973  \"abi.encodePacked(r, s, v)\" */ add(expr_mpos, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _6), var_r)\n                                mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:2948:2973  \"abi.encodePacked(r, s, v)\" */ expr_mpos, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64), var_s)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                mstore(add(/** @src 83:2948:2973  \"abi.encodePacked(r, s, v)\" */ expr_mpos, /** @src 83:3424:3876  \"PackedUserOperation({...\" */ _14), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ and(shl(248, var_v), shl(248, 255)))\n                                /// @src 83:2948:2973  \"abi.encodePacked(r, s, v)\"\n                                mstore(expr_mpos, 65)\n                                finalize_allocation_10381(expr_mpos)\n                                /// @src 83:2929:2973  \"userOp.signature = abi.encodePacked(r, s, v)\"\n                                mstore(/** @src 83:2929:2945  \"userOp.signature\" */ _15, /** @src 83:2929:2973  \"userOp.signature = abi.encodePacked(r, s, v)\" */ expr_mpos)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let memPos := mload(64)\n                                mstore(memPos, _6)\n                                return(memPos, sub(abi_encode_struct_PackedUserOperation(memPtr_1, add(memPos, _6)), memPos))\n                            }\n                            case 0xc0406226 {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                /// @src 83:1028:1046  \"new HelperConfig()\"\n                                let _25 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1028:1046  \"new HelperConfig()\"\n                                let _26 := datasize(\"HelperConfig_51403\")\n                                let _27 := add(_25, _26)\n                                if or(gt(_27, 0xffffffffffffffff), lt(_27, _25))\n                                {\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(_2, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(_2, 0x24)\n                                }\n                                /// @src 83:1028:1046  \"new HelperConfig()\"\n                                datacopy(_25, dataoffset(\"HelperConfig_51403\"), _26)\n                                let expr_address := create(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 83:1028:1046  \"new HelperConfig()\" */ _25, sub(_27, _25))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_4 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_4, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_4, returndatasize())\n                                }\n                                /// @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\"\n                                let expr_mpos_1 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\"\n                                mstore(add(expr_mpos_1, 0x20), /** @src 83:1250:1273  \"IERC20.approve.selector\" */ shl(224, 0x095ea7b3))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ add(expr_mpos_1, 36), /** @src 83:1275:1317  \"0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC\" */ 0x9ea9b0cc1919def1a3cfaef4f7a66ee3c36f86fc)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(add(/** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ expr_mpos_1, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68), /** @src 83:1319:1323  \"1e18\" */ 0x0de0b6b3a7640000)\n                                /// @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\"\n                                mstore(expr_mpos_1, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68)\n                                /// @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\"\n                                finalize_allocation_10381(expr_mpos_1)\n                                /// @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                let expr_mpos_2 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                mstore(add(expr_mpos_2, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20), /** @src 83:1402:1433  \"MinimalAccount.execute.selector\" */ shl(225, 0x5b0e93fb))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ add(expr_mpos_2, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 36), /** @src 83:1072:1114  \"0xaf88d065e77c8cC2239327C5EDb3A432268e5831\" */ 0xaf88d065e77c8cc2239327c5edb3a432268e5831)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(add(/** @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68), _2)\n                                mstore(add(/** @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 100), 96)\n                                /// @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                let _28 := sub(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ abi_encode_bytes(expr_mpos_1, add(/** @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 132)), /** @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\" */ expr_mpos_2)\n                                mstore(expr_mpos_2, add(_28, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ not(31)))\n                                /// @src 83:1379:1461  \"abi.encodeWithSelector(MinimalAccount.execute.selector, dest, value, functionData)\"\n                                finalize_allocation(expr_mpos_2, _28)\n                                /// @src 83:1567:1591  \"helperConfig.getConfig()\"\n                                let _29 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1567:1591  \"helperConfig.getConfig()\"\n                                mstore(_29, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x30fe4275))\n                                /// @src 83:1567:1591  \"helperConfig.getConfig()\"\n                                let _30 := call(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ and(/** @src 83:1567:1589  \"helperConfig.getConfig\" */ expr_address, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ sub(shl(160, 1), 1)), _2, /** @src 83:1567:1591  \"helperConfig.getConfig()\" */ _29, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4, /** @src 83:1567:1591  \"helperConfig.getConfig()\" */ _29, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64)\n                                /// @src 83:1567:1591  \"helperConfig.getConfig()\"\n                                if iszero(_30)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_5 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_5, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_5, returndatasize())\n                                }\n                                /// @src 83:1567:1591  \"helperConfig.getConfig()\"\n                                let expr_mpos_3 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:1567:1591  \"helperConfig.getConfig()\"\n                                if _30\n                                {\n                                    let _31 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64\n                                    /// @src 83:1567:1591  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64, /** @src 83:1567:1591  \"helperConfig.getConfig()\" */ returndatasize()) { _31 := returndatasize() }\n                                    finalize_allocation(_29, _31)\n                                    expr_mpos_3 := abi_decode_struct_NetworkConfig_fromMemory(_29, add(_29, _31))\n                                }\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                pop(allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                let _32 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                mstore(_32, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x2d0335ab))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ add(_32, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), /** @src 83:1593:1635  \"0x03Ad95a54f02A40180D45D76789C448024145aaF\" */ 0x03ad95a54f02a40180d45d76789c448024145aaf)\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                let _33 := staticcall(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, /** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ _32, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 36, /** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ _32, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                if iszero(_33)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_6 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_6, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_6, returndatasize())\n                                }\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                let expr_2 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                if _33\n                                {\n                                    let _34 := /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20\n                                    /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                    if gt(/** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20, /** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ returndatasize()) { _34 := returndatasize() }\n                                    finalize_allocation(_32, _34)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    if slt(sub(/** @src 83:2218:2245  \"vm.getNonce(minimalAccount)\" */ add(_32, _34), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _32), /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    {\n                                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                        revert(_2, _2)\n                                    }\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let value_4 := mload(_32)\n                                    if iszero(eq(value_4, and(value_4, /** @src 83:1028:1046  \"new HelperConfig()\" */ 0xffffffffffffffff)))\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    {\n                                        revert(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, _2)\n                                    }\n                                    /// @src 83:2218:2245  \"vm.getNonce(minimalAccount)\"\n                                    expr_2 := value_4\n                                }\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                let diff_1 := add(and(expr_2, /** @src 83:1028:1046  \"new HelperConfig()\" */ 0xffffffffffffffff), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ not(0))\n                                if gt(diff_1, /** @src 83:1028:1046  \"new HelperConfig()\" */ 0xffffffffffffffff)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                {\n                                    mstore(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, shl(224, 0x4e487b71))\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    mstore(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ 0x11)\n                                    revert(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 36)\n                                }\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                pop(allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                                let memPtr_5 := mload(64)\n                                finalize_allocation_4794(memPtr_5)\n                                mstore(memPtr_5, /** @src 83:1593:1635  \"0x03Ad95a54f02A40180D45D76789C448024145aaF\" */ 0x03ad95a54f02a40180d45d76789c448024145aaf)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_5, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ and(diff_1, /** @src 83:1028:1046  \"new HelperConfig()\" */ 0xffffffffffffffff))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let memPtr_6 := mload(64)\n                                finalize_allocation_10378(memPtr_6)\n                                mstore(memPtr_6, _2)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_5, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64), memPtr_6)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_5, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96), expr_mpos_2)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_5, /** @src 83:3637:3640  \"128\" */ 0x80), /** @src 83:3604:3655  \"uint256(verificationGasLimit) << 128 | callGasLimit\" */ 0x0100000000000000000000000000000001000000)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_5, 160), /** @src 83:3245:3253  \"16777216\" */ 0x01000000)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_5, 192), /** @src 83:3743:3794  \"uint256(maxPriorityFeePerGas) << 128 | maxFeePerGas\" */ 0x010000000000000000000000000000000100)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let memPtr_7 := mload(64)\n                                finalize_allocation_10378(memPtr_7)\n                                mstore(memPtr_7, _2)\n                                mstore(/** @src 83:3424:3876  \"PackedUserOperation({...\" */ add(memPtr_5, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 224), memPtr_7)\n                                let memPtr_8 := mload(64)\n                                finalize_allocation_10378(memPtr_8)\n                                mstore(memPtr_8, _2)\n                                /// @src 83:3424:3876  \"PackedUserOperation({...\"\n                                let _35 := add(memPtr_5, /** @src 83:3349:3352  \"256\" */ 0x0100)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(_35, memPtr_8)\n                                let cleaned_2 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 83:2440:2457  \"config.entryPoint\" */ expr_mpos_3), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ sub(shl(160, 1), 1))\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                let _36 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                mstore(_36, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x08b37793))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(/** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ add(_36, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                let _37 := staticcall(gas(), cleaned_2, _36, sub(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ abi_encode_struct_PackedUserOperation(memPtr_5, add(/** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ _36, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 36)), /** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ _36), _36, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                if iszero(_37)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_7 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_7, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_7, returndatasize())\n                                }\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                let expr_3 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                if _37\n                                {\n                                    let _38 := /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20\n                                    /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                    if gt(/** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20, /** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ returndatasize()) { _38 := returndatasize() }\n                                    finalize_allocation(_36, _38)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    if slt(sub(/** @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\" */ add(_36, _38), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ _36), /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    {\n                                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                        revert(_2, _2)\n                                    }\n                                    /// @src 83:2428:2480  \"IEntryPoint(config.entryPoint).getUserOpHash(userOp)\"\n                                    expr_3 := /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(_36)\n                                }\n                                /// @src 75:1367:1676  \"assembly {...\"\n                                mstore(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 75:1367:1676  \"assembly {...\" */ \"\\x19Ethereum Signed Message:\\n32\")\n                                mstore(0x1c, expr_3)\n                                let var_digest_1 := keccak256(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 75:1367:1676  \"assembly {...\" */ 0x3c)\n                                /// @src 83:2579:2586  \"uint8 v\"\n                                let var_v_1 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2597:2606  \"bytes32 r\"\n                                let var_r_1 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2617:2626  \"bytes32 s\"\n                                let var_s_1 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                /// @src 83:2742:2919  \"if (block.chainid == 31337) {...\"\n                                switch /** @src 83:2746:2768  \"block.chainid == 31337\" */ eq(/** @src 83:2746:2759  \"block.chainid\" */ chainid(), /** @src 83:2763:2768  \"31337\" */ 0x7a69)\n                                case /** @src 83:2742:2919  \"if (block.chainid == 31337) {...\" */ 0 {\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    let cleaned_3 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 83:2884:2898  \"config.account\" */ add(expr_mpos_3, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ sub(shl(160, 1), 1))\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    let _39 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    mstore(_39, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x8c1aa205))\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(/** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ add(_39, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), cleaned_3)\n                                    mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ _39, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 36), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ var_digest_1)\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    let _40 := staticcall(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, /** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ _39, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68, /** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ _39, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96)\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    if iszero(_40)\n                                    {\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        let pos_8 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        returndatacopy(pos_8, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                        revert(pos_8, returndatasize())\n                                    }\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    let expr_component_12 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    let expr_component_13 := _2\n                                    let expr_component_14 := _2\n                                    /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                    if _40\n                                    {\n                                        let _41 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96\n                                        /// @src 83:2876:2907  \"vm.sign(config.account, digest)\"\n                                        if gt(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96, /** @src 83:2876:2907  \"vm.sign(config.account, digest)\" */ returndatasize()) { _41 := returndatasize() }\n                                        finalize_allocation(_39, _41)\n                                        let expr_component_15, expr_component_16, expr_component_17 := abi_decode_uint8t_bytes32t_bytes32_fromMemory(_39, add(_39, _41))\n                                        expr_component_12 := expr_component_15\n                                        expr_component_13 := expr_component_16\n                                        expr_component_14 := expr_component_17\n                                    }\n                                    /// @src 83:2864:2907  \"(v, r, s) = vm.sign(config.account, digest)\"\n                                    var_s_1 := expr_component_14\n                                    var_r_1 := expr_component_13\n                                    var_v_1 := expr_component_12\n                                }\n                                default /// @src 83:2742:2919  \"if (block.chainid == 31337) {...\"\n                                {\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    let _42 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    mstore(_42, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x38d07aa9))\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(/** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ add(_42, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), /** @src 83:2665:2731  \"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\" */ 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80)\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _42, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 36), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ var_digest_1)\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    let _43 := staticcall(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, /** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _42, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68, /** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ _42, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96)\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    if iszero(_43)\n                                    {\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        let pos_9 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                        returndatacopy(pos_9, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                        revert(pos_9, returndatasize())\n                                    }\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    let expr_component_18 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2\n                                    let expr_component_19 := _2\n                                    let expr_component_20 := _2\n                                    /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    if _43\n                                    {\n                                        let _44 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96\n                                        /// @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                        if gt(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96, /** @src 83:2797:2831  \"vm.sign(ANVIL_DEFAULT_KEY, digest)\" */ returndatasize()) { _44 := returndatasize() }\n                                        finalize_allocation(_42, _44)\n                                        let expr_component_21, expr_component_22, expr_component_23 := abi_decode_uint8t_bytes32t_bytes32_fromMemory(_42, add(_42, _44))\n                                        expr_component_18 := expr_component_21\n                                        expr_component_19 := expr_component_22\n                                        expr_component_20 := expr_component_23\n                                    }\n                                    /// @src 83:2785:2831  \"(v, r, s) = vm.sign(ANVIL_DEFAULT_KEY, digest)\"\n                                    var_s_1 := expr_component_20\n                                    var_r_1 := expr_component_19\n                                    var_v_1 := expr_component_18\n                                }\n                                /// @src 83:2948:2973  \"abi.encodePacked(r, s, v)\"\n                                let expr_mpos_4 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                mstore(/** @src 83:2948:2973  \"abi.encodePacked(r, s, v)\" */ add(expr_mpos_4, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ var_r_1)\n                                mstore(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ add(/** @src 83:2948:2973  \"abi.encodePacked(r, s, v)\" */ expr_mpos_4, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64), var_s_1)\n                                /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                mstore(add(/** @src 83:2948:2973  \"abi.encodePacked(r, s, v)\" */ expr_mpos_4, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 96), /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ and(shl(248, var_v_1), shl(248, 255)))\n                                /// @src 83:2948:2973  \"abi.encodePacked(r, s, v)\"\n                                mstore(expr_mpos_4, 65)\n                                finalize_allocation_10381(expr_mpos_4)\n                                /// @src 83:2929:2973  \"userOp.signature = abi.encodePacked(r, s, v)\"\n                                mstore(/** @src 83:2929:2945  \"userOp.signature\" */ _35, /** @src 83:2929:2973  \"userOp.signature = abi.encodePacked(r, s, v)\" */ expr_mpos_4)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let memPtr_9 := mload(64)\n                                finalize_allocation_4768(memPtr_9)\n                                /// @src 83:1718:1719  \"1\"\n                                let _45 := 0x01\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(memPtr_9, /** @src 83:1718:1719  \"1\" */ 0x01)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let i := _2\n                                for { }\n                                lt(i, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                {\n                                    i := add(i, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                }\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                {\n                                    mstore(add(add(memPtr_9, i), /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ allocate_and_zero_memory_struct_struct_PackedUserOperation())\n                                }\n                                /// @src 83:1731:1746  \"ops[0] = userOp\"\n                                mstore(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr_9), memPtr_5)\n                                pop(memory_array_index_access_struct_PackedUserOperation_dyn(memPtr_9))\n                                /// @src 83:1759:1778  \"vm.startBroadcast()\"\n                                if iszero(extcodesize(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d))\n                                /// @src 83:1759:1778  \"vm.startBroadcast()\"\n                                {\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    revert(_2, _2)\n                                }\n                                /// @src 83:1759:1778  \"vm.startBroadcast()\"\n                                let _46 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1759:1778  \"vm.startBroadcast()\"\n                                mstore(_46, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x7fb5297f))\n                                /// @src 83:1759:1778  \"vm.startBroadcast()\"\n                                let _47 := call(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, _2, /** @src 83:1759:1778  \"vm.startBroadcast()\" */ _46, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4, /** @src 83:1759:1778  \"vm.startBroadcast()\" */ _46, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2)\n                                /// @src 83:1759:1778  \"vm.startBroadcast()\"\n                                if iszero(_47)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_10 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_10, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_10, returndatasize())\n                                }\n                                /// @src 83:1759:1778  \"vm.startBroadcast()\"\n                                if _47\n                                {\n                                    finalize_allocation_4777(_46)\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    _2 := _2\n                                }\n                                /// @src 83:1801:1825  \"helperConfig.getConfig()\"\n                                let _48 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1801:1825  \"helperConfig.getConfig()\"\n                                mstore(_48, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x30fe4275))\n                                /// @src 83:1801:1825  \"helperConfig.getConfig()\"\n                                let _49 := call(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ and(/** @src 83:1567:1589  \"helperConfig.getConfig\" */ expr_address, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ sub(shl(160, 1), 1)), _2, /** @src 83:1801:1825  \"helperConfig.getConfig()\" */ _48, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4, /** @src 83:1801:1825  \"helperConfig.getConfig()\" */ _48, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64)\n                                /// @src 83:1801:1825  \"helperConfig.getConfig()\"\n                                if iszero(_49)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_11 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_11, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_11, returndatasize())\n                                }\n                                /// @src 83:1801:1825  \"helperConfig.getConfig()\"\n                                let expr_mpos_5 := _2\n                                if _49\n                                {\n                                    let _50 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64\n                                    /// @src 83:1801:1825  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64, /** @src 83:1801:1825  \"helperConfig.getConfig()\" */ returndatasize()) { _50 := returndatasize() }\n                                    finalize_allocation(_48, _50)\n                                    expr_mpos_5 := abi_decode_struct_NetworkConfig_fromMemory(_48, add(_48, _50))\n                                }\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let cleaned_4 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 83:1801:1836  \"helperConfig.getConfig().entryPoint\" */ expr_mpos_5), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ sub(shl(160, 1), 1))\n                                /// @src 83:1861:1885  \"helperConfig.getConfig()\"\n                                let _51 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1861:1885  \"helperConfig.getConfig()\"\n                                mstore(_51, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(226, 0x30fe4275))\n                                /// @src 83:1861:1885  \"helperConfig.getConfig()\"\n                                let _52 := call(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ and(/** @src 83:1567:1589  \"helperConfig.getConfig\" */ expr_address, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ sub(shl(160, 1), 1)), _2, /** @src 83:1861:1885  \"helperConfig.getConfig()\" */ _51, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4, /** @src 83:1861:1885  \"helperConfig.getConfig()\" */ _51, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64)\n                                /// @src 83:1861:1885  \"helperConfig.getConfig()\"\n                                if iszero(_52)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_12 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_12, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_12, returndatasize())\n                                }\n                                /// @src 83:1861:1885  \"helperConfig.getConfig()\"\n                                let expr_mpos_6 := _2\n                                if _52\n                                {\n                                    let _53 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64\n                                    /// @src 83:1861:1885  \"helperConfig.getConfig()\"\n                                    if gt(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 64, /** @src 83:1861:1885  \"helperConfig.getConfig()\" */ returndatasize()) { _53 := returndatasize() }\n                                    finalize_allocation(_51, _53)\n                                    expr_mpos_6 := abi_decode_struct_NetworkConfig_fromMemory(_51, add(_51, _53))\n                                }\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let cleaned_5 := and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ mload(/** @src 83:1861:1893  \"helperConfig.getConfig().account\" */ add(expr_mpos_6, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ sub(shl(160, 1), 1))\n                                /// @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                if iszero(extcodesize(cleaned_4))\n                                {\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    revert(_2, _2)\n                                }\n                                /// @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                let _54 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                mstore(_54, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(224, 0x765e827f))\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let tail := add(/** @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _54, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 68)\n                                mstore(/** @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ add(_54, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4), 64)\n                                let pos_13 := tail\n                                let length := mload(memPtr_9)\n                                mstore(tail, length)\n                                pos_13 := add(/** @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _54, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 100)\n                                let tail_1 := add(add(/** @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _54, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ shl(5, length)), 100)\n                                let srcPtr := add(memPtr_9, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                let i_1 := _2\n                                for { }\n                                lt(i_1, length)\n                                {\n                                    i_1 := add(i_1, /** @src 83:1718:1719  \"1\" */ _45)\n                                }\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                {\n                                    mstore(pos_13, add(sub(tail_1, /** @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _54), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ not(99)))\n                                    tail_1 := abi_encode_struct_PackedUserOperation(mload(srcPtr), tail_1)\n                                    srcPtr := add(srcPtr, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    pos_13 := add(pos_13, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 0x20)\n                                }\n                                /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                mstore(add(/** @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _54, /** @src 83:1227:1324  \"abi.encodeWithSelector(IERC20.approve.selector, 0x9EA9b0cc1919def1A3CfAEF4F7A66eE3c36F86fC, 1e18)\" */ 36), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ cleaned_5)\n                                /// @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                let _55 := call(gas(), cleaned_4, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\" */ _54, sub(tail_1, _54), _54, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2)\n                                /// @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                if iszero(_55)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_14 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_14, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_14, returndatasize())\n                                }\n                                /// @src 83:1789:1895  \"IEntryPoint(helperConfig.getConfig().entryPoint).handleOps(ops, payable(helperConfig.getConfig().account))\"\n                                if _55\n                                {\n                                    finalize_allocation_4777(_54)\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    if _2 { revert(_2, _2) }\n                                }\n                                /// @src 83:1906:1924  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d))\n                                /// @src 83:1906:1924  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    revert(_2, _2)\n                                }\n                                /// @src 83:1906:1924  \"vm.stopBroadcast()\"\n                                let _56 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                /// @src 83:1906:1924  \"vm.stopBroadcast()\"\n                                mstore(_56, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ shl(225, 0x3b756e9b))\n                                /// @src 83:1906:1924  \"vm.stopBroadcast()\"\n                                let _57 := call(gas(), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d, _2, /** @src 83:1906:1924  \"vm.stopBroadcast()\" */ _56, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 4, /** @src 83:1906:1924  \"vm.stopBroadcast()\" */ _56, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2)\n                                /// @src 83:1906:1924  \"vm.stopBroadcast()\"\n                                if iszero(_57)\n                                {\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    let pos_15 := /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ mload(64)\n                                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                                    returndatacopy(pos_15, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ _2, /** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ returndatasize())\n                                    revert(pos_15, returndatasize())\n                                }\n                                /// @src 83:1906:1924  \"vm.stopBroadcast()\"\n                                if _57\n                                {\n                                    finalize_allocation_4777(_56)\n                                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                                    if _2 { revert(_2, _2) }\n                                }\n                                return(_2, _2)\n                            }\n                            case 0xf8ccbf47 {\n                                if callvalue() { revert(_2, _2) }\n                                if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                let value_5 := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0xff)\n                                let memPos_1 := mload(64)\n                                mstore(memPos_1, iszero(iszero(value_5)))\n                                return(memPos_1, 32)\n                            }\n                        }\n                        revert(0, 0)\n                    }\n                    function finalize_allocation_4768(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 64)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation_4777(memPtr)\n                    {\n                        if gt(memPtr, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, memPtr)\n                    }\n                    function finalize_allocation_4794(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 288)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation_10378(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 0x20)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation_10381(memPtr)\n                    {\n                        let newFreePtr := add(memPtr, 128)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                    }\n                    function abi_encode_bytes(value, pos) -> end\n                    {\n                        let length := mload(value)\n                        mstore(pos, length)\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 0x20) }\n                        {\n                            let _1 := 0x20\n                            mstore(add(add(pos, i), _1), mload(add(add(value, i), _1)))\n                        }\n                        mstore(add(add(pos, length), 0x20), 0)\n                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                    }\n                    function abi_encode_struct_PackedUserOperation(value, pos) -> end\n                    {\n                        let _1 := 0x0120\n                        mstore(pos, and(mload(value), sub(shl(160, 1), 1)))\n                        mstore(add(pos, 0x20), mload(add(value, 0x20)))\n                        let memberValue0 := mload(add(value, 0x40))\n                        mstore(add(pos, 0x40), _1)\n                        let tail := abi_encode_bytes(memberValue0, add(pos, _1))\n                        let memberValue0_1 := mload(add(value, 0x60))\n                        mstore(add(pos, 0x60), sub(tail, pos))\n                        let tail_1 := abi_encode_bytes(memberValue0_1, tail)\n                        mstore(add(pos, 0x80), mload(add(value, 0x80)))\n                        mstore(add(pos, 0xa0), mload(add(value, 0xa0)))\n                        mstore(add(pos, 0xc0), mload(add(value, 0xc0)))\n                        let memberValue0_2 := mload(add(value, 0xe0))\n                        mstore(add(pos, 0xe0), sub(tail_1, pos))\n                        let tail_2 := abi_encode_bytes(memberValue0_2, tail_1)\n                        let _2 := 0x0100\n                        let memberValue0_3 := mload(add(value, _2))\n                        mstore(add(pos, _2), sub(tail_2, pos))\n                        end := abi_encode_bytes(memberValue0_3, tail_2)\n                    }\n                    function allocate_and_zero_memory_struct_struct_PackedUserOperation() -> memPtr\n                    {\n                        let memPtr_1 := mload(64)\n                        finalize_allocation_4794(memPtr_1)\n                        memPtr := memPtr_1\n                        mstore(memPtr_1, /** @src -1:-1:-1 */ 0)\n                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 32), /** @src -1:-1:-1 */ 0)\n                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 64), 96)\n                        mstore(add(memPtr_1, 96), 96)\n                        mstore(add(memPtr_1, 128), /** @src -1:-1:-1 */ 0)\n                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 160), /** @src -1:-1:-1 */ 0)\n                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 192), /** @src -1:-1:-1 */ 0)\n                        /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                        mstore(add(memPtr_1, 224), 96)\n                        mstore(add(memPtr_1, 256), 96)\n                    }\n                    /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                    function abi_decode_uint8t_bytes32t_bytes32_fromMemory(headStart, dataEnd) -> value0, value1, value2\n                    {\n                        if slt(sub(dataEnd, headStart), 96)\n                        {\n                            /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                            revert(0, 0)\n                        }\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        let value := mload(headStart)\n                        if iszero(eq(value, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ and(/** @src 15:1590:1604  \"Vm(VM_ADDRESS)\" */ value, /** @src 83:725:3887  \"contract SendPackedUserOp is Script {...\" */ 0xff)))\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        {\n                            revert(/** @src -1:-1:-1 */ 0, 0)\n                        }\n                        /// @src 15:1590:1604  \"Vm(VM_ADDRESS)\"\n                        value0 := value\n                        value1 := mload(add(headStart, 32))\n                        value2 := mload(add(headStart, 64))\n                    }\n                    /// @src 83:725:3887  \"contract SendPackedUserOp is Script {...\"\n                    function abi_decode_address_fromMemory(offset) -> value\n                    {\n                        value := mload(offset)\n                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                    }\n                    function abi_decode_struct_NetworkConfig_fromMemory(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n                        let memPtr := mload(64)\n                        finalize_allocation_4768(memPtr)\n                        mstore(memPtr, abi_decode_address_fromMemory(headStart))\n                        mstore(add(memPtr, 32), abi_decode_address_fromMemory(add(headStart, 32)))\n                        value0 := memPtr\n                    }\n                    function memory_array_index_access_struct_PackedUserOperation_dyn(baseRef) -> addr\n                    {\n                        if iszero(mload(baseRef))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x32)\n                            revert(0, 0x24)\n                        }\n                        addr := add(baseRef, 32)\n                    }\n                }\n                /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 18:\"lib/forge-std/src/StdChains.sol\", 19:\"lib/forge-std/src/StdCheats.sol\", 27:\"lib/forge-std/src/StdUtils.sol\", 82:\"script/HelperConfig.s.sol\"\n                object \"HelperConfig_51403\" {\n                    code {\n                        {\n                            /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                            mstore(64, memoryguard(0x80))\n                            if callvalue() { revert(0, 0) }\n                            sstore(/** @src 18:3166:3170  \"true\" */ 0x0c, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ or(and(sload(/** @src 18:3166:3170  \"true\" */ 0x0c), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ not(16711935)), 65537))\n                            let memPtr := allocate_memory()\n                            mstore(memPtr, 0)\n                            mstore(add(memPtr, 32), 0)\n                            /// @src 82:1670:1765  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let expr_mpos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ allocate_memory()\n                            /// @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\"\n                            mstore(expr_mpos, /** @src 82:1697:1739  \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" */ 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789)\n                            /// @src 82:1670:1765  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\"\n                            let _1 := add(expr_mpos, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32)\n                            /// @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\"\n                            mstore(_1, 0x643315c9be056cdea171f4e7b2222a4ddab9f88d)\n                            /// @src 82:466:474  \"11155111\"\n                            mstore(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0, /** @src 82:466:474  \"11155111\" */ 0xaa36a7)\n                            mstore(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32, /** @src 82:991:1005  \"networkConfigs\" */ 0x0f)\n                            /// @src 82:466:474  \"11155111\"\n                            let dataSlot := keccak256(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0, 64)\n                            /// @src 82:466:474  \"11155111\"\n                            let _2 := sub(shl(160, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 1), 1)\n                            /// @src 82:466:474  \"11155111\"\n                            let _3 := and(mload(expr_mpos), _2)\n                            let _4 := not(sub(shl(160, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 1), 1))\n                            /// @src 82:466:474  \"11155111\"\n                            sstore(dataSlot, or(and(sload(dataSlot), _4), _3))\n                            let memberSlot := add(dataSlot, /** @src 18:3166:3170  \"true\" */ 0x01)\n                            /// @src 82:466:474  \"11155111\"\n                            sstore(memberSlot, or(and(sload(memberSlot), _4), and(mload(_1), _2)))\n                            /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                            let _5 := mload(64)\n                            let _6 := datasize(\"HelperConfig_51403_deployed\")\n                            codecopy(_5, dataoffset(\"HelperConfig_51403_deployed\"), _6)\n                            return(_5, _6)\n                        }\n                        function allocate_memory() -> memPtr\n                        {\n                            memPtr := mload(64)\n                            let newFreePtr := add(memPtr, 64)\n                            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr))\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x41)\n                                revert(0, 0x24)\n                            }\n                            mstore(64, newFreePtr)\n                        }\n                    }\n                    /// @use-src 15:\"lib/forge-std/src/Base.sol\", 16:\"lib/forge-std/src/Script.sol\", 82:\"script/HelperConfig.s.sol\"\n                    object \"HelperConfig_51403_deployed\" {\n                        code {\n                            {\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                mstore(_1, memoryguard(0x80))\n                                if iszero(lt(calldatasize(), 4))\n                                {\n                                    let _2 := 0\n                                    switch shr(224, calldataload(_2))\n                                    case 0x12900da8 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let ret := fun_getOrCreateAnvilEthConfig()\n                                        let memPos := mload(_1)\n                                        return(memPos, sub(abi_encode_struct_NetworkConfig(memPos, ret), memPos))\n                                    }\n                                    case 0x209c25eb {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                        let ret_1 := fun_getConfigByChainId(calldataload(4))\n                                        let memPos_1 := mload(_1)\n                                        return(memPos_1, sub(abi_encode_struct_NetworkConfig(memPos_1, ret_1), memPos_1))\n                                    }\n                                    case 0x7b99b603 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                        mstore(_2, calldataload(4))\n                                        mstore(32, /** @src 82:894:957  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ 15)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let dataSlot := keccak256(_2, _1)\n                                        let _3 := sub(shl(160, 1), 1)\n                                        let cleaned := and(sload(/** @src 82:894:957  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ dataSlot), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _3)\n                                        let cleaned_1 := and(sload(/** @src 82:894:957  \"mapping(uint256 chainId => NetworkConfig) public networkConfigs\" */ add(dataSlot, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 1)), _3)\n                                        let memPos_2 := mload(_1)\n                                        return(memPos_2, sub(abi_encode_address_address(memPos_2, cleaned, cleaned_1), memPos_2))\n                                    }\n                                    case 0xa60f7516 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let _4 := sub(shl(160, 1), 1)\n                                        let cleaned_2 := and(sload(/** @src 82:848:887  \"NetworkConfig public localNetworkConfig\" */ 13), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _4)\n                                        let cleaned_3 := and(sload(/** @src 82:848:887  \"NetworkConfig public localNetworkConfig\" */ 14), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _4)\n                                        let memPos_3 := mload(_1)\n                                        return(memPos_3, sub(abi_encode_address_address(memPos_3, cleaned_2, cleaned_3), memPos_3))\n                                    }\n                                    case 0xba3ec354 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr := mload(_1)\n                                        finalize_allocation(memPtr)\n                                        mstore(memPtr, _2)\n                                        mstore(add(memPtr, 32), _2)\n                                        let memPtr_1 := mload(_1)\n                                        finalize_allocation(memPtr_1)\n                                        mstore(memPtr_1, _2)\n                                        mstore(/** @src 82:1876:1939  \"NetworkConfig({entryPoint: address(0), account: BURNER_WALLET})\" */ add(memPtr_1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32), /** @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\" */ 0x643315c9be056cdea171f4e7b2222a4ddab9f88d)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let memPos_4 := mload(_1)\n                                        return(memPos_4, sub(abi_encode_struct_NetworkConfig(memPos_4, memPtr_1), memPos_4))\n                                    }\n                                    case 0xc28975d1 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr_2 := mload(_1)\n                                        finalize_allocation(memPtr_2)\n                                        mstore(memPtr_2, _2)\n                                        mstore(add(memPtr_2, 32), _2)\n                                        let memPtr_3 := mload(_1)\n                                        finalize_allocation(memPtr_3)\n                                        mstore(memPtr_3, /** @src 82:1697:1739  \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\" */ 0x5ff137d4b0fdcd49dca30c7cf57e578a026d2789)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        mstore(/** @src 82:1670:1765  \"NetworkConfig({entryPoint: 0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789, account: BURNER_WALLET})\" */ add(memPtr_3, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32), /** @src 82:613:655  \"0x643315C9Be056cDEA171F4e7b2222a4ddaB9F88D\" */ 0x643315c9be056cdea171f4e7b2222a4ddab9f88d)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let memPos_5 := mload(_1)\n                                        return(memPos_5, sub(abi_encode_struct_NetworkConfig(memPos_5, memPtr_3), memPos_5))\n                                    }\n                                    case 0xc3f909d4 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let memPtr_4 := mload(_1)\n                                        finalize_allocation(memPtr_4)\n                                        mstore(memPtr_4, _2)\n                                        mstore(add(memPtr_4, 32), _2)\n                                        /// @src 82:1137:1177  \"return getConfigByChainId(block.chainid)\"\n                                        let var_mpos := /** @src 82:1144:1177  \"getConfigByChainId(block.chainid)\" */ fun_getConfigByChainId(/** @src 82:1163:1176  \"block.chainid\" */ chainid())\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let memPos_6 := mload(_1)\n                                        return(memPos_6, sub(abi_encode_struct_NetworkConfig(memPos_6, var_mpos), memPos_6))\n                                    }\n                                    case 0xf8ccbf47 {\n                                        if callvalue() { revert(_2, _2) }\n                                        if slt(add(calldatasize(), not(3)), _2) { revert(_2, _2) }\n                                        let value := and(shr(16, sload(/** @src 16:800:828  \"bool public IS_SCRIPT = true\" */ 12)), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0xff)\n                                        let memPos_7 := mload(_1)\n                                        mstore(memPos_7, iszero(iszero(value)))\n                                        return(memPos_7, 32)\n                                    }\n                                }\n                                revert(0, 0)\n                            }\n                            function abi_encode_struct_NetworkConfig(headStart, value0) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(mload(value0), _1))\n                                mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), _1))\n                            }\n                            function abi_encode_address_address(headStart, value0, value1) -> tail\n                            {\n                                tail := add(headStart, 64)\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(headStart, and(value0, _1))\n                                mstore(add(headStart, 32), and(value1, _1))\n                            }\n                            function finalize_allocation(memPtr)\n                            {\n                                let newFreePtr := add(memPtr, 64)\n                                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, newFreePtr)\n                            }\n                            function finalize_allocation_1694(memPtr)\n                            {\n                                if gt(memPtr, 0xffffffffffffffff)\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x41)\n                                    revert(0, 0x24)\n                                }\n                                mstore(64, memPtr)\n                            }\n                            function read_from_storage_reference_type_struct_NetworkConfig() -> value\n                            {\n                                let memPtr := mload(64)\n                                finalize_allocation(memPtr)\n                                value := memPtr\n                                let _1 := sub(shl(160, 1), 1)\n                                mstore(memPtr, and(sload(/** @src 82:2045:2063  \"localNetworkConfig\" */ 0x0d), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _1))\n                                mstore(add(memPtr, 32), and(sload(14), _1))\n                            }\n                            /// @ast-id 51402 @src 82:1955:2504  \"function getOrCreateAnvilEthConfig() public returns (NetworkConfig memory) {...\"\n                            function fun_getOrCreateAnvilEthConfig() -> var__mpos\n                            {\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _1 := 64\n                                let memPtr := mload(_1)\n                                finalize_allocation(memPtr)\n                                /// @src -1:-1:-1\n                                let _2 := 0\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(memPtr, /** @src -1:-1:-1 */ _2)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(add(memPtr, 32), /** @src -1:-1:-1 */ _2)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _3 := sload(/** @src 82:2045:2071  \"localNetworkConfig.account\" */ 14)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let cleaned := /** @src -1:-1:-1 */ _2\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _4 := sub(shl(160, 1), 1)\n                                /// @src 82:2041:2139  \"if (localNetworkConfig.account != address(0)) {...\"\n                                if /** @src 82:2045:2085  \"localNetworkConfig.account != address(0)\" */ iszero(iszero(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ and(_3, _4)))\n                                /// @src 82:2041:2139  \"if (localNetworkConfig.account != address(0)) {...\"\n                                {\n                                    /// @src 82:2102:2127  \"return localNetworkConfig\"\n                                    var__mpos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                                    /// @src 82:2102:2127  \"return localNetworkConfig\"\n                                    leave\n                                }\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _5 := 0x7109709ecfa91a80626ff3989d68f67f5b1dd12d\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                if iszero(extcodesize(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5))\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src -1:-1:-1 */ _2, _2)\n                                }\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                let _6 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                mstore(_6, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(224, 0x7fec2a8d))\n                                let _7 := 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(/** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ add(_6, 4), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _7)\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                let _8 := call(gas(), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5, /** @src -1:-1:-1 */ _2, /** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ _6, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ 36, /** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ _6, /** @src -1:-1:-1 */ _2)\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                if iszero(_8)\n                                {\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos, /** @src -1:-1:-1 */ _2, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos, returndatasize())\n                                }\n                                /// @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\"\n                                if _8\n                                {\n                                    finalize_allocation_1694(_6)\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    cleaned := /** @src -1:-1:-1 */ _2\n                                }\n                                /// @src 82:2299:2315  \"new EntryPoint()\"\n                                let _9 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 82:2299:2315  \"new EntryPoint()\"\n                                let _10 := datasize(\"EntryPoint_2097\")\n                                let _11 := add(_9, _10)\n                                if or(gt(_11, 0xffffffffffffffff), lt(_11, _9))\n                                {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ shl(224, 0x4e487b71))\n                                    mstore(/** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ 4, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 0x41)\n                                    revert(/** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ 36)\n                                }\n                                /// @src 82:2299:2315  \"new EntryPoint()\"\n                                datacopy(_9, dataoffset(\"EntryPoint_2097\"), _10)\n                                let expr_address := create(/** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:2299:2315  \"new EntryPoint()\" */ _9, sub(_11, _9))\n                                if iszero(expr_address)\n                                {\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_1 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_1, /** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_1, returndatasize())\n                                }\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                if iszero(extcodesize(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5))\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    revert(/** @src 82:2083:2084  \"0\" */ cleaned, cleaned)\n                                }\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                let _12 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                mstore(_12, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ shl(225, 0x3b756e9b))\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                let _13 := call(gas(), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _5, /** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:2326:2344  \"vm.stopBroadcast()\" */ _12, /** @src 82:2224:2264  \"vm.startBroadcast(ANVIL_DEFAULT_ACCOUNT)\" */ 4, /** @src 82:2326:2344  \"vm.stopBroadcast()\" */ _12, /** @src 82:2083:2084  \"0\" */ cleaned)\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                if iszero(_13)\n                                {\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    let pos_2 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(_1)\n                                    /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                    returndatacopy(pos_2, /** @src 82:2083:2084  \"0\" */ cleaned, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ returndatasize())\n                                    revert(pos_2, returndatasize())\n                                }\n                                /// @src 82:2326:2344  \"vm.stopBroadcast()\"\n                                if _13\n                                {\n                                    finalize_allocation_1694(_12)\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    if cleaned\n                                    {\n                                        revert(/** @src 82:2083:2084  \"0\" */ cleaned, cleaned)\n                                    }\n                                }\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let _14 := and(/** @src 82:2405:2424  \"address(entryPoint)\" */ expr_address, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _4)\n                                let memPtr_1 := mload(_1)\n                                finalize_allocation(memPtr_1)\n                                mstore(memPtr_1, _14)\n                                mstore(/** @src 82:2378:2458  \"NetworkConfig({entryPoint: address(entryPoint), account: ANVIL_DEFAULT_ACCOUNT})\" */ add(memPtr_1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 32), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _7)\n                                let _15 := shl(160, 0xffffffffffffffffffffffff)\n                                sstore(/** @src 82:2045:2063  \"localNetworkConfig\" */ 0x0d, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 82:2045:2063  \"localNetworkConfig\" */ 0x0d), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _15), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _14))\n                                /// @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\"\n                                sstore(/** @src 82:2045:2071  \"localNetworkConfig.account\" */ 14, /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ or(and(sload(/** @src 82:2045:2071  \"localNetworkConfig.account\" */ 14), /** @src 82:797:839  \"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\" */ _15), _7))\n                                /// @src 82:2471:2496  \"return localNetworkConfig\"\n                                var__mpos := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ read_from_storage_reference_type_struct_NetworkConfig()\n                            }\n                            /// @ast-id 51326 @src 82:1193:1570  \"function getConfigByChainId(uint256 chainId) public returns (NetworkConfig memory) {...\"\n                            function fun_getConfigByChainId(var_chainId) -> var_mpos\n                            {\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                let memPtr := mload(64)\n                                finalize_allocation(memPtr)\n                                /// @src -1:-1:-1\n                                let _1 := 0\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(memPtr, /** @src -1:-1:-1 */ _1)\n                                /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                mstore(add(memPtr, 32), /** @src -1:-1:-1 */ _1)\n                                /// @src 82:1287:1563  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                switch /** @src 82:1291:1316  \"chainId == LOCAL_CHAIN_ID\" */ eq(var_chainId, /** @src 82:568:573  \"31337\" */ 0x7a69)\n                                case /** @src 82:1287:1563  \"if (chainId == LOCAL_CHAIN_ID) {...\" */ 0 {\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    mstore(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ var_chainId)\n                                    mstore(32, /** @src 82:1389:1403  \"networkConfigs\" */ 0x0f)\n                                    /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                    let _2 := sub(shl(160, 1), 1)\n                                    /// @src 82:1385:1563  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    switch /** @src 82:1389:1434  \"networkConfigs[chainId].account != address(0)\" */ iszero(iszero(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ and(sload(/** @src 82:1389:1420  \"networkConfigs[chainId].account\" */ add(/** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ keccak256(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 64), /** @src 82:1389:1420  \"networkConfigs[chainId].account\" */ 1)), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _2)))\n                                    case /** @src 82:1385:1563  \"if (networkConfigs[chainId].account != address(0)) {...\" */ 0 {\n                                        /// @src 82:1521:1551  \"HelperConfig__InvalidChainId()\"\n                                        let _3 := /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ mload(64)\n                                        /// @src 82:1521:1551  \"HelperConfig__InvalidChainId()\"\n                                        mstore(_3, shl(225, 0x64780a77))\n                                        revert(_3, 4)\n                                    }\n                                    default /// @src 82:1385:1563  \"if (networkConfigs[chainId].account != address(0)) {...\"\n                                    {\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        mstore(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ var_chainId)\n                                        mstore(32, /** @src 82:1389:1403  \"networkConfigs\" */ 0x0f)\n                                        /// @src 82:250:2507  \"contract HelperConfig is Script {...\"\n                                        let _4 := keccak256(/** @src -1:-1:-1 */ _1, /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ 64)\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation(memPtr_1)\n                                        mstore(memPtr_1, and(sload(_4), _2))\n                                        mstore(add(memPtr_1, 32), and(sload(add(_4, /** @src 82:1389:1420  \"networkConfigs[chainId].account\" */ 1)), /** @src 82:250:2507  \"contract HelperConfig is Script {...\" */ _2))\n                                        /// @src 82:1451:1481  \"return networkConfigs[chainId]\"\n                                        var_mpos := memPtr_1\n                                        leave\n                                    }\n                                }\n                                default /// @src 82:1287:1563  \"if (chainId == LOCAL_CHAIN_ID) {...\"\n                                {\n                                    /// @src 82:1333:1367  \"return getOrCreateAnvilEthConfig()\"\n                                    var_mpos := /** @src 82:1340:1367  \"getOrCreateAnvilEthConfig()\" */ fun_getOrCreateAnvilEthConfig()\n                                    /// @src 82:1333:1367  \"return getOrCreateAnvilEthConfig()\"\n                                    leave\n                                }\n                            }\n                        }\n                        /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 9:\"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol\", 10:\"lib/account-abstraction/contracts/interfaces/INonceManager.sol\", 12:\"lib/account-abstraction/contracts/interfaces/IStakeManager.sol\", 72:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 77:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\", 78:\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\"\n                        object \"EntryPoint_2097\" {\n                            code {\n                                {\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _1 := memoryguard(0xa0)\n                                    mstore(64, _1)\n                                    if callvalue() { revert(0, 0) }\n                                    /// @src 72:1713:1714  \"1\"\n                                    sstore(/** @src 72:1917:1938  \"_status = NOT_ENTERED\" */ 0x02, /** @src 72:1713:1714  \"1\" */ 0x01)\n                                    /// @src 0:986:1005  \"new SenderCreator()\"\n                                    let _2 := datasize(\"SenderCreator_2414\")\n                                    let _3 := add(_1, _2)\n                                    if or(gt(_3, sub(shl(64, 1), 1)), lt(_3, _1))\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                        mstore(4, 0x41)\n                                        revert(/** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                    }\n                                    /// @src 0:986:1005  \"new SenderCreator()\"\n                                    datacopy(_1, dataoffset(\"SenderCreator_2414\"), _2)\n                                    let expr_address := create(/** @src -1:-1:-1 */ 0, /** @src 0:986:1005  \"new SenderCreator()\" */ _1, sub(_3, _1))\n                                    if iszero(expr_address)\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let pos := mload(64)\n                                        returndatacopy(pos, /** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        revert(pos, returndatasize())\n                                    }\n                                    /// @src 0:986:1005  \"new SenderCreator()\"\n                                    mstore(128, expr_address)\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    let _4 := mload(64)\n                                    let _5 := datasize(\"EntryPoint_2097_deployed\")\n                                    codecopy(_4, dataoffset(\"EntryPoint_2097_deployed\"), _5)\n                                    setimmutable(_4, \"35\", mload(/** @src 0:986:1005  \"new SenderCreator()\" */ 128))\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    return(_4, _5)\n                                }\n                            }\n                            /// @use-src 0:\"lib/account-abstraction/contracts/core/EntryPoint.sol\", 1:\"lib/account-abstraction/contracts/core/Helpers.sol\", 2:\"lib/account-abstraction/contracts/core/NonceManager.sol\", 4:\"lib/account-abstraction/contracts/core/StakeManager.sol\", 5:\"lib/account-abstraction/contracts/core/UserOperationLib.sol\", 14:\"lib/account-abstraction/contracts/utils/Exec.sol\", 72:\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\", 77:\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\"\n                            object \"EntryPoint_2097_deployed\" {\n                                code {\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(64, memoryguard(0x80))\n                                        if iszero(lt(calldatasize(), 4))\n                                        {\n                                            switch shr(224, calldataload(0))\n                                            case 0x0042dc53 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 512) { revert(0, 0) }\n                                                let offset := calldataload(4)\n                                                let _1 := 0xffffffffffffffff\n                                                if gt(offset, _1) { revert(0, 0) }\n                                                if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                                                let array := abi_decode_available_length_bytes(add(offset, 36), calldataload(add(4, offset)), calldatasize())\n                                                let _2 := add(calldatasize(), not(35))\n                                                if slt(_2, 0x01c0) { revert(0, 0) }\n                                                let memPtr := mload(64)\n                                                finalize_allocation_26259(memPtr)\n                                                if slt(_2, 0x0140) { revert(0, 0) }\n                                                let memPtr_1 := mload(64)\n                                                finalize_allocation_26260(memPtr_1)\n                                                let value := calldataload(36)\n                                                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(memPtr_1, value)\n                                                let _3 := 0x20\n                                                mstore(add(memPtr_1, _3), calldataload(68))\n                                                mstore(add(memPtr_1, 64), calldataload(100))\n                                                mstore(add(memPtr_1, 96), calldataload(132))\n                                                mstore(add(memPtr_1, 128), calldataload(164))\n                                                mstore(add(memPtr_1, 0xa0), calldataload(196))\n                                                mstore(add(memPtr_1, 192), calldataload(228))\n                                                let value_1 := calldataload(260)\n                                                if iszero(eq(value_1, and(value_1, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                                mstore(add(memPtr_1, 224), value_1)\n                                                mstore(add(memPtr_1, 256), calldataload(292))\n                                                mstore(add(memPtr_1, 288), calldataload(324))\n                                                mstore(memPtr, memPtr_1)\n                                                mstore(add(memPtr, _3), calldataload(356))\n                                                mstore(add(memPtr, 64), calldataload(388))\n                                                mstore(add(memPtr, 96), calldataload(420))\n                                                mstore(add(memPtr, 128), calldataload(452))\n                                                let offset_1 := calldataload(484)\n                                                if gt(offset_1, _1) { revert(0, 0) }\n                                                let value2, value3 := abi_decode_bytes_calldata(add(4, offset_1), calldatasize())\n                                                /// @src 0:11732:11741  \"gasleft()\"\n                                                let expr := gas()\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(/** @src 0:11759:11786  \"msg.sender == address(this)\" */ eq(/** @src 0:11759:11769  \"msg.sender\" */ caller(), /** @src 0:11781:11785  \"this\" */ address()))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_2 := mload(64)\n                                                    mstore(memPtr_2, shl(229, 4594637))\n                                                    mstore(add(memPtr_2, 4), _3)\n                                                    mstore(add(memPtr_2, 36), 23)\n                                                    mstore(add(memPtr_2, 68), \"AA92 internal call only\")\n                                                    revert(memPtr_2, 100)\n                                                }\n                                                /// @src 0:11854:11868  \"opInfo.mUserOp\"\n                                                let _mpos := mload(memPtr)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _4 := mload(/** @src 0:11902:11922  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let r := shr(6, mul(/** @src 0:12058:12067  \"gasleft()\" */ gas(), /** @src 0:12070:12072  \"63\" */ 0x3f))\n                                                /// @src 0:12037:12368  \"if (...\"\n                                                if /** @src 0:12058:12195  \"gasleft() * 63 / 64 <...\" */ lt(r, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(add(_4, mload(/** @src 0:12127:12158  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))), /** @src 0:1297:1302  \"10000\" */ 0x2710))\n                                                /// @src 0:12037:12368  \"if (...\"\n                                                {\n                                                    /// @src 0:12228:12354  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:12228:12354  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                                    revert(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, _3)\n                                                }\n                                                /// @src 0:12388:12450  \"IPaymaster.PostOpMode mode = IPaymaster.PostOpMode.opSucceeded\"\n                                                let var_mode := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:12464:12479  \"callData.length\"\n                                                let expr_1 := /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12464:12479  \"callData.length\" */ array)\n                                                /// @src 0:12460:13044  \"if (callData.length > 0) {...\"\n                                                if /** @src 0:12464:12483  \"callData.length > 0\" */ iszero(iszero(expr_1))\n                                                /// @src 0:12460:13044  \"if (callData.length > 0) {...\"\n                                                {\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12524:12538  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:12580:13034  \"if (!success) {...\"\n                                                    if /** @src 0:12584:12592  \"!success\" */ iszero(/** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ call(_4, cleaned, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ add(array, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src 14:378:496  \"assembly (\\\"memory-safe\\\") {...\" */ expr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0))\n                                                    /// @src 0:12580:13034  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$len := returndatasize()\n                                                        /// @src 0:1543:1547  \"2048\"\n                                                        let _5 := 0x0800\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        if gt(usr$len, /** @src 0:1543:1547  \"2048\" */ _5)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        {\n                                                            usr$len := /** @src 0:1543:1547  \"2048\" */ _5\n                                                        }\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        let usr$ptr := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                        /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(usr$ptr, usr$len)\n                                                        returndatacopy(add(usr$ptr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                        /// @src 0:12693:12963  \"if (result.length > 0) {...\"\n                                                        if /** @src 0:12697:12714  \"result.length > 0\" */ iszero(iszero(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12697:12710  \"result.length\" */ usr$ptr)))\n                                                        /// @src 0:12693:12963  \"if (result.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:1543:1547  \"2048\"\n                                                            let _6 := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                            let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:12837:12851  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                            let _7 := mload(/** @src 0:12877:12890  \"mUserOp.nonce\" */ add(_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                            /// @src 0:12743:12944  \"UserOperationRevertReason(...\"\n                                                            let _8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            mstore(_8, _7)\n                                                            /// @src 0:1543:1547  \"2048\"\n                                                            mstore(add(_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), 64)\n                                                            /// @src 0:12743:12944  \"UserOperationRevertReason(...\"\n                                                            log3(_8, sub(/** @src 0:1543:1547  \"2048\" */ abi_encode_bytes(usr$ptr, add(_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)), /** @src 0:12743:12944  \"UserOperationRevertReason(...\" */ _8), 0x1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201, _6, cleaned_1)\n                                                        }\n                                                        /// @src 0:12980:13019  \"mode = IPaymaster.PostOpMode.opReverted\"\n                                                        var_mode := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1\n                                                    }\n                                                }\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let diff := sub(expr, /** @src 0:13107:13116  \"gasleft()\" */ gas())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _9 := add(diff, mload(add(memPtr, 128)))\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let _10 := abi_decode_available_length_bytes(/** @src 0:13155:13203  \"_postExecution(mode, opInfo, context, actualGas)\" */ value2, value3, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldatasize())\n                                                /// @src 0:13155:13203  \"_postExecution(mode, opInfo, context, actualGas)\"\n                                                let var_actualGas := _9\n                                                let var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:26799:26808  \"gasleft()\"\n                                                let expr_2 := gas()\n                                                /// @src 0:26842:26863  \"address refundAddress\"\n                                                let var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:26842:26863  \"address refundAddress\"\n                                                let var_refundAddress_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:26907:26921  \"opInfo.mUserOp\"\n                                                let _mpos_1 := mload(memPtr)\n                                                /// @src 0:26954:26980  \"getUserOpGasPrice(mUserOp)\"\n                                                let expr_3 := fun_getUserOpGasPrice(_mpos_1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let cleaned_2 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27015:27032  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                switch /** @src 0:27050:27073  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                                case /** @src 0:27046:27885  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                    /// @src 0:27162:27187  \"refundAddress = paymaster\"\n                                                    var_refundAddress := cleaned_2\n                                                    /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                    if /** @src 0:27209:27227  \"context.length > 0\" */ iszero(iszero(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27209:27223  \"context.length\" */ _10)))\n                                                    /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                    {\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if iszero(lt(var_mode, 3))\n                                                        {\n                                                            mstore(0, shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(0, 36)\n                                                        }\n                                                        /// @src 0:27309:27853  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        if /** @src 0:27313:27357  \"mode != IPaymaster.PostOpMode.postOpReverted\" */ iszero(eq(var_mode, /** @src 0:27321:27357  \"IPaymaster.PostOpMode.postOpReverted\" */ 2))\n                                                        /// @src 0:27309:27853  \"if (mode != IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                        {\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            let _11 := mload(/** @src 0:27452:27483  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0))\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            if iszero(extcodesize(cleaned_2))\n                                                            {\n                                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                revert(0, 0)\n                                                            }\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            let _12 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            mstore(_12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x7c627b21))\n                                                            mstore(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ add(_12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_mode)\n                                                            mstore(add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 128)\n                                                            let tail := abi_encode_bytes(_10, add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132))\n                                                            mstore(add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), mul(/** @src 0:27267:27287  \"actualGas * gasPrice\" */ _9, expr_3))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(add(/** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), expr_3)\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            let trySuccessCondition := call(_11, cleaned_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\" */ _12, sub(tail, _12), _12, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                            /// @src 0:27389:27549  \"IPaymaster(paymaster).postOp{...\"\n                                                            if trySuccessCondition\n                                                            {\n                                                                finalize_allocation_26283(_12)\n                                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                var_refundAddress_1 := 0\n                                                            }\n                                                            /// @src 0:27385:27831  \"try IPaymaster(paymaster).postOp{...\"\n                                                            switch iszero(trySuccessCondition)\n                                                            case 0 { }\n                                                            default {\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$len_1 := returndatasize()\n                                                                /// @src 0:1543:1547  \"2048\"\n                                                                let _13 := 0x0800\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                if gt(usr$len_1, /** @src 0:1543:1547  \"2048\" */ _13)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                {\n                                                                    usr$len_1 := /** @src 0:1543:1547  \"2048\" */ _13\n                                                                }\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                let usr$ptr_1 := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                                mstore(usr$ptr_1, usr$len_1)\n                                                                returndatacopy(add(usr$ptr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), /** @src -1:-1:-1 */ var_refundAddress_1, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                                /// @src 0:27782:27804  \"PostOpReverted(reason)\"\n                                                                let _14 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                                /// @src 0:27782:27804  \"PostOpReverted(reason)\"\n                                                                mstore(_14, shl(226, 0x2b5e552f))\n                                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                                mstore(/** @src 0:27782:27804  \"PostOpReverted(reason)\" */ add(_14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _3)\n                                                                /// @src 0:27782:27804  \"PostOpReverted(reason)\"\n                                                                revert(_14, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:27782:27804  \"PostOpReverted(reason)\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:27782:27804  \"PostOpReverted(reason)\" */ _14))\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                                default /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                {\n                                                    /// @src 0:27093:27123  \"refundAddress = mUserOp.sender\"\n                                                    var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27109:27123  \"mUserOp.sender\" */ _mpos_1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                }\n                                                /// @src 0:27898:27929  \"actualGas += preGas - gasleft()\"\n                                                var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(_9, /** @src 0:1543:1547  \"2048\" */ sub(expr_2, /** @src 0:27920:27929  \"gasleft()\" */ gas()))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _15 := mload(/** @src 0:28052:28072  \"mUserOp.callGasLimit\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 96))\n                                                let sum := add(_15, mload(/** @src 0:28075:28106  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xa0)))\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let diff_1 := sub(var_actualGas, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(add(memPtr, 128)))\n                                                /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                if /** @src 0:28316:28352  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff_1)\n                                                /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                {\n                                                    /// @src 0:28538:28567  \"actualGas += unusedGasPenalty\"\n                                                    var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:28396:28432  \"executionGasLimit - executionGasUsed\" */ sum, diff_1), /** @src 0:1596:1598  \"10\" */ 0x0a), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                                }\n                                                /// @src 0:28614:28650  \"actualGasCost = actualGas * gasPrice\"\n                                                var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:28630:28650  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _16 := mload(add(memPtr, 64))\n                                                /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                switch /** @src 0:28714:28737  \"prefund < actualGasCost\" */ lt(_16, var_actualGasCost)\n                                                case /** @src 0:28710:29503  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                    /// @src 0:29291:29331  \"_incrementDeposit(refundAddress, refund)\"\n                                                    pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:29250:29273  \"prefund - actualGasCost\" */ _16, var_actualGasCost)))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let _17 := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr, _3))\n                                                    /// @src 0:6324:6338  \"opInfo.mUserOp\"\n                                                    let _mpos_2 := mload(memPtr)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_3 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6324:6345  \"opInfo.mUserOp.sender\" */ _mpos_2), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    let cleaned_4 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6359:6383  \"opInfo.mUserOp.paymaster\" */ add(_mpos_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 224)), sub(shl(160, 1), 1))\n                                                    let _18 := mload(/** @src 0:6397:6417  \"opInfo.mUserOp.nonce\" */ add(_mpos_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                                    /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                                    let _19 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                    mstore(_19, _18)\n                                                    mstore(add(_19, _3), /** @src 0:29364:29405  \"mode == IPaymaster.PostOpMode.opSucceeded\" */ iszero(var_mode))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(add(_19, 64), var_actualGasCost)\n                                                    mstore(add(_19, 96), var_actualGas)\n                                                    /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                                    log4(_19, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6261:6498  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _17, cleaned_3, cleaned_4)\n                                                }\n                                                default /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                {\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if iszero(lt(var_mode, 3))\n                                                    {\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                        mstore(4, 0x21)\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                    }\n                                                    /// @src 0:28757:29195  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    switch /** @src 0:28761:28805  \"mode == IPaymaster.PostOpMode.postOpReverted\" */ eq(var_mode, /** @src 0:28769:28805  \"IPaymaster.PostOpMode.postOpReverted\" */ 2)\n                                                    case /** @src 0:28757:29195  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\" */ 0 {\n                                                        /// @src 0:29031:29177  \"assembly (\\\"memory-safe\\\") {...\"\n                                                        mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:29031:29177  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                        revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                                    }\n                                                    default /// @src 0:28757:29195  \"if (mode == IPaymaster.PostOpMode.postOpReverted) {...\"\n                                                    {\n                                                        /// @src 0:28829:28852  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _16\n                                                        /// @src 0:28892:28898  \"opInfo\"\n                                                        fun_emitPrefundTooLow(memPtr)\n                                                        /// @src 0:28974:28983  \"actualGas\"\n                                                        fun_emitUserOperationEvent(memPtr, _16, var_actualGas)\n                                                    }\n                                                }\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos := mload(64)\n                                                mstore(memPos, var_actualGasCost)\n                                                return(memPos, _3)\n                                            }\n                                            case 0x01ffc9a7 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_2 := calldataload(4)\n                                                let _20 := and(value_2, shl(224, 0xffffffff))\n                                                if iszero(eq(value_2, _20)) { revert(0, 0) }\n                                                /// @src 0:1860:2034  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_4 := /** @src 0:1860:1974  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId)\" */ eq(_20, /** @src 0:1876:1973  \"type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId\" */ shl(225, 0x307e35b7))\n                                                /// @src 0:1860:2034  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_4 := /** @src 0:1990:2034  \"interfaceId == type(IEntryPoint).interfaceId\" */ eq(_20, /** @src 0:1876:1905  \"type(IEntryPoint).interfaceId\" */ shl(227, 0x122a0e9b))\n                                                }\n                                                /// @src 0:1860:2096  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_5 := expr_4\n                                                if iszero(expr_4)\n                                                {\n                                                    expr_5 := /** @src 0:2050:2096  \"interfaceId == type(IStakeManager).interfaceId\" */ eq(_20, /** @src 0:1908:1939  \"type(IStakeManager).interfaceId\" */ shl(224, 0xcf28ef97))\n                                                }\n                                                /// @src 0:1860:2158  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_6 := expr_5\n                                                if iszero(expr_5)\n                                                {\n                                                    expr_6 := /** @src 0:2112:2158  \"interfaceId == type(INonceManager).interfaceId\" */ eq(_20, /** @src 0:1942:1973  \"type(INonceManager).interfaceId\" */ shl(224, 0x3e84f021))\n                                                }\n                                                /// @src 0:1860:2210  \"interfaceId == (type(IEntryPoint).interfaceId ^ type(IStakeManager).interfaceId ^ type(INonceManager).interfaceId) ||...\"\n                                                let expr_7 := expr_6\n                                                if iszero(expr_6)\n                                                {\n                                                    expr_7 := /** @src 77:861:901  \"interfaceId == type(IERC165).interfaceId\" */ eq(_20, /** @src 77:876:901  \"type(IERC165).interfaceId\" */ shl(224, 0x01ffc9a7))\n                                                }\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_1 := mload(64)\n                                                mstore(memPos_1, iszero(iszero(expr_7)))\n                                                return(memPos_1, 32)\n                                            }\n                                            case 0x0396cb60 {\n                                                let _21 := 32\n                                                if slt(add(calldatasize(), not(3)), _21) { revert(0, 0) }\n                                                let value_3 := calldataload(4)\n                                                let _22 := 0xffffffff\n                                                let _23 := and(value_3, _22)\n                                                if iszero(eq(value_3, _23)) { revert(0, 0) }\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot := keccak256(0, 64)\n                                                if /** @src 4:2457:2476  \"unstakeDelaySec > 0\" */ iszero(_23)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_3 := mload(64)\n                                                    mstore(memPtr_3, shl(229, 4594637))\n                                                    mstore(add(memPtr_3, 4), _21)\n                                                    mstore(add(memPtr_3, 36), 26)\n                                                    mstore(add(memPtr_3, 68), \"must specify unstake delay\")\n                                                    revert(memPtr_3, 100)\n                                                }\n                                                let _24 := sload(/** @src 4:2557:2577  \"info.unstakeDelaySec\" */ add(dataSlot, 1))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2538:2577  \"unstakeDelaySec >= info.unstakeDelaySec\" */ lt(_23, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(120, _24), _22))\n                                                {\n                                                    let memPtr_4 := mload(64)\n                                                    mstore(memPtr_4, shl(229, 4594637))\n                                                    mstore(add(memPtr_4, 4), _21)\n                                                    mstore(add(memPtr_4, 36), 28)\n                                                    mstore(add(memPtr_4, 68), \"cannot decrease unstake time\")\n                                                    revert(memPtr_4, 100)\n                                                }\n                                                let _25 := 0xffffffffffffffffffffffffffff\n                                                /// @src 4:2657:2679  \"info.stake + msg.value\"\n                                                let expr_8 := checked_add_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(8, _24), _25), /** @src 4:2670:2679  \"msg.value\" */ callvalue())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:2697:2706  \"stake > 0\" */ iszero(expr_8)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_5 := mload(64)\n                                                    mstore(memPtr_5, shl(229, 4594637))\n                                                    mstore(add(memPtr_5, 4), _21)\n                                                    mstore(add(memPtr_5, 36), 18)\n                                                    mstore(add(memPtr_5, 68), \"no stake specified\")\n                                                    revert(memPtr_5, 100)\n                                                }\n                                                if /** @src 4:2747:2773  \"stake <= type(uint112).max\" */ gt(expr_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25)\n                                                {\n                                                    let memPtr_6 := mload(64)\n                                                    mstore(memPtr_6, shl(229, 4594637))\n                                                    mstore(add(memPtr_6, 4), _21)\n                                                    mstore(add(memPtr_6, 36), 14)\n                                                    mstore(add(memPtr_6, 68), \"stake overflow\")\n                                                    revert(memPtr_6, 100)\n                                                }\n                                                let _26 := sload(/** @src 4:2850:2862  \"info.deposit\" */ dataSlot)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPtr_7 := mload(64)\n                                                finalize_allocation_26259(memPtr_7)\n                                                mstore(memPtr_7, _26)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _27 := add(memPtr_7, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21)\n                                                mstore(_27, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _28 := add(memPtr_7, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64)\n                                                mstore(_28, and(/** @src 4:2894:2908  \"uint112(stake)\" */ expr_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _25))\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _29 := add(memPtr_7, 96)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_29, _23)\n                                                /// @src 4:2825:2962  \"DepositInfo(...\"\n                                                let _30 := add(memPtr_7, 128)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_30, 0)\n                                                mstore(0, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_21, 0)\n                                                let dataSlot_1 := keccak256(0, 64)\n                                                sstore(dataSlot_1, mload(memPtr_7))\n                                                let memberSlot := add(dataSlot_1, /** @src 4:2557:2577  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _31 := iszero(iszero(mload(_27)))\n                                                let _32 := sload(memberSlot)\n                                                let _33 := and(shl(8, mload(_28)), 0xffffffffffffffffffffffffffff00)\n                                                sstore(memberSlot, or(or(_33, or(and(_32, shl(152, 0xffffffffffffffffffffffffff)), and(_31, 255))), and(shl(120, mload(_29)), shl(120, 0xffffffff))))\n                                                update_storage_value_offsett_uint48_to_uint48(memberSlot, and(mload(_30), 0xffffffffffff))\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                let _34 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_34, expr_8)\n                                                mstore(add(_34, _21), _23)\n                                                /// @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\"\n                                                log2(_34, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64, /** @src 4:2977:3024  \"StakeLocked(msg.sender, stake, unstakeDelaySec)\" */ 0xa5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01, /** @src 4:2428:2438  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x0bd28e3b {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value_4 := calldataload(4)\n                                                let _35 := and(value_4, sub(shl(192, 1), 1))\n                                                if iszero(eq(value_4, _35)) { revert(0, 0) }\n                                                mstore(0, /** @src 2:913:923  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, /** @src 2:893:912  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _36 := keccak256(0, 64)\n                                                mstore(0, _35)\n                                                mstore(32, _36)\n                                                let dataSlot_2 := keccak256(0, 64)\n                                                sstore(dataSlot_2, /** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ increment_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 2:893:931  \"nonceSequenceNumber[msg.sender][key]++\" */ dataSlot_2)))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0x1b2e01b8 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0 := abi_decode_address()\n                                                let value1 := abi_decode_uint192()\n                                                mstore(0, and(value0, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:279:353  \"mapping(address => mapping(uint192 => uint256)) public nonceSequenceNumber\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _37 := keccak256(0, 64)\n                                                mstore(0, and(value1, sub(shl(192, 1), 1)))\n                                                mstore(32, _37)\n                                                let _38 := sload(keccak256(0, 64))\n                                                let memPos_2 := mload(64)\n                                                mstore(memPos_2, _38)\n                                                return(memPos_2, 32)\n                                            }\n                                            case 0x205c2878 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_1 := abi_decode_address()\n                                                let value_5 := calldataload(36)\n                                                mstore(0, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(32, 0)\n                                                let dataSlot_3 := keccak256(0, 64)\n                                                let _39 := sload(/** @src 4:4852:4864  \"info.deposit\" */ dataSlot_3)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if /** @src 4:4834:4864  \"withdrawAmount <= info.deposit\" */ gt(value_5, _39)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_8 := mload(64)\n                                                    mstore(memPtr_8, shl(229, 4594637))\n                                                    mstore(add(memPtr_8, 4), 32)\n                                                    mstore(add(memPtr_8, 36), 25)\n                                                    mstore(add(memPtr_8, 68), \"Withdraw amount too large\")\n                                                    revert(memPtr_8, 100)\n                                                }\n                                                sstore(dataSlot_3, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ checked_sub_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _39, /** @src 4:4919:4948  \"info.deposit - withdrawAmount\" */ value_5))\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                let _40 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4963:5017  \"Withdrawn(msg.sender, withdrawAddress, withdrawAmount)\"\n                                                log2(_40, sub(abi_encode_address_payable_uint256(_40, value0_1, value_5), _40), 0xd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb, /** @src 4:4805:4815  \"msg.sender\" */ caller())\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                let expr_component := call(gas(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:5045:5065  \"withdrawAddress.call\" */ value0_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\" */ value_5, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:5045:5092  \"withdrawAddress.call{value: withdrawAmount}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component)\n                                                {\n                                                    let memPtr_9 := mload(64)\n                                                    mstore(memPtr_9, shl(229, 4594637))\n                                                    mstore(add(memPtr_9, 4), 32)\n                                                    mstore(add(memPtr_9, 36), 18)\n                                                    mstore(add(memPtr_9, 68), \"failed to withdraw\")\n                                                    revert(memPtr_9, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0x22cdde4c {\n                                                if callvalue() { revert(0, 0) }\n                                                let _41 := not(3)\n                                                if slt(add(calldatasize(), _41), 32) { revert(0, 0) }\n                                                let offset_2 := calldataload(4)\n                                                if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n                                                if slt(add(sub(calldatasize(), offset_2), _41), 288) { revert(0, 0) }\n                                                let ret := fun_getUserOpHash(add(4, offset_2))\n                                                let memPos_3 := mload(64)\n                                                mstore(memPos_3, ret)\n                                                return(memPos_3, 32)\n                                            }\n                                            case 0x35567e1a {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_2 := abi_decode_address()\n                                                let value1_1 := abi_decode_uint192()\n                                                mstore(0, and(value0_2, sub(shl(160, 1), 1)))\n                                                mstore(32, /** @src 2:507:526  \"nonceSequenceNumber\" */ 0x01)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _42 := keccak256(0, 64)\n                                                mstore(0, and(value1_1, sub(shl(192, 1), 1)))\n                                                mstore(32, _42)\n                                                let _43 := sload(keccak256(0, 64))\n                                                let memPos_4 := mload(64)\n                                                mstore(memPos_4, /** @src 2:507:562  \"nonceSequenceNumber[sender][key] | (uint256(key) << 64)\" */ or(_43, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shl(64, /** @src 2:543:555  \"uint256(key)\" */ value1_1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(0xffffffffffffffff))))\n                                                return(memPos_4, 32)\n                                            }\n                                            case 0x5287ce12 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let value0_3 := abi_decode_address()\n                                                let memPtr_10 := mload(64)\n                                                finalize_allocation_26259(memPtr_10)\n                                                mstore(memPtr_10, 0)\n                                                mstore(add(memPtr_10, 32), 0)\n                                                mstore(add(memPtr_10, 64), 0)\n                                                mstore(add(memPtr_10, 96), 0)\n                                                mstore(add(memPtr_10, 128), 0)\n                                                mstore(0, and(value0_3, sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_4 := keccak256(0, 64)\n                                                let memPtr_11 := mload(64)\n                                                finalize_allocation_26259(memPtr_11)\n                                                let _44 := sload(dataSlot_4)\n                                                mstore(memPtr_11, _44)\n                                                let _45 := sload(add(dataSlot_4, 1))\n                                                let _46 := add(memPtr_11, 32)\n                                                mstore(_46, iszero(iszero(and(_45, 0xff))))\n                                                let _47 := 0xffffffffffffffffffffffffffff\n                                                let _48 := add(memPtr_11, 64)\n                                                mstore(_48, and(shr(8, _45), _47))\n                                                let _49 := 0xffffffff\n                                                let _50 := add(memPtr_11, 96)\n                                                mstore(_50, and(shr(120, _45), _49))\n                                                let _51 := 0xffffffffffff\n                                                let _52 := add(memPtr_11, 128)\n                                                mstore(_52, and(shr(152, _45), _51))\n                                                let memPos_5 := mload(64)\n                                                mstore(memPos_5, _44)\n                                                mstore(add(memPos_5, 32), iszero(iszero(mload(_46))))\n                                                mstore(add(memPos_5, 64), and(mload(_48), _47))\n                                                mstore(add(memPos_5, 96), and(mload(_50), _49))\n                                                mstore(add(memPos_5, 128), and(mload(_52), _51))\n                                                return(memPos_5, 160)\n                                            }\n                                            case 0x70a08231 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let _53 := sload(keccak256(0, 64))\n                                                let memPos_6 := mload(64)\n                                                mstore(memPos_6, _53)\n                                                return(memPos_6, 32)\n                                            }\n                                            case 0x765e827f {\n                                                if callvalue() { revert(0, 0) }\n                                                let param, param_1, param_2 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 72:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:6980:7004  \"new UserOpInfo[](opslen)\"\n                                                let expr_mpos := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(param_1)\n                                                /// @src 0:7044:7057  \"uint256 i = 0\"\n                                                let var_i := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7039:7520  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7059:7069  \"i < opslen\" */ lt(var_i, param_1)\n                                                /// @src 0:7044:7057  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7071:7074  \"i++\"\n                                                    var_i := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7071:7074  \"i++\" */ var_i, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:7071:7074  \"i++\"\n                                                {\n                                                    /// @src 0:7260:7298  \"_validatePrepayment(i, ops[i], opInfo)\"\n                                                    let expr_component_1, expr_component_2 := fun_validatePrepayment(var_i, /** @src 0:7283:7289  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i), /** @src 0:7121:7131  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i)))\n                                                    /// @src 0:21736:21792  \"_getValidationData(...\"\n                                                    let expr_component_3, expr_component_4 := fun_getValidationData(expr_component_1)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _54 := sub(shl(160, 1), 1)\n                                                    /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                    if /** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ expr_component_3, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                    {\n                                                        /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        let _55 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        mstore(_55, shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                        /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                        revert(_55, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:21922:22018  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_4\n                                                    {\n                                                        /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        let _56 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        mstore(_56, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                        mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                        /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                        revert(_56, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:22320:22385  \"_getValidationData(...\"\n                                                    let expr_component_5, expr_component_6 := fun_getValidationData(expr_component_2)\n                                                    /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                    if /** @src 0:22399:22425  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:22399:22425  \"pmAggregator != address(0)\" */ expr_component_5, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _54)))\n                                                    /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        let _57 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        mstore(_57, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                        mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                        /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                        revert(_57, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                    }\n                                                    /// @src 0:22509:22615  \"if (outOfTimeRange) {...\"\n                                                    if expr_component_6\n                                                    {\n                                                        /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        let _58 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        mstore(_58, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i)\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                        mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                        /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                        revert(_58, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                    }\n                                                }\n                                                /// @src 0:7534:7555  \"uint256 collected = 0\"\n                                                let var_collected := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7574:7591  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:7574:7591  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:7611:7624  \"uint256 i = 0\"\n                                                let var_i_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:7606:7726  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                for { }\n                                                /** @src 0:7626:7636  \"i < opslen\" */ lt(var_i_1, param_1)\n                                                /// @src 0:7611:7624  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:7638:7641  \"i++\"\n                                                    var_i_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:7638:7641  \"i++\" */ var_i_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                }\n                                                /// @src 0:7638:7641  \"i++\"\n                                                {\n                                                    /// @src 0:7692:7698  \"ops[i]\"\n                                                    let expr_offset := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(param, param_1, var_i_1)\n                                                    /// @src 0:7661:7711  \"collected += _executeUserOp(i, ops[i], opInfos[i])\"\n                                                    var_collected := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_collected, /** @src 0:7674:7711  \"_executeUserOp(i, ops[i], opInfos[i])\" */ fun_executeUserOp(var_i_1, expr_offset, /** @src 0:7700:7710  \"opInfos[i]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos, var_i_1))))\n                                                }\n                                                /// @src 0:7765:7774  \"collected\"\n                                                fun_compensate(param_2, var_collected)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 72:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                                return(0, 0)\n                                            }\n                                            case 0x850aaf62 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                                                let value0_4 := abi_decode_address()\n                                                let offset_3 := calldataload(36)\n                                                if gt(offset_3, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value1_2, value2_1 := abi_decode_bytes_calldata(add(4, offset_3), calldatasize())\n                                                /// @src 0:31052:31077  \"target.delegatecall(data)\"\n                                                let _59 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                calldatacopy(_59, value1_2, value2_1)\n                                                let _60 := add(_59, value2_1)\n                                                mstore(_60, 0)\n                                                /// @src 0:31052:31077  \"target.delegatecall(data)\"\n                                                let expr_component_7 := delegatecall(gas(), value0_4, _59, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _60, /** @src 0:31052:31077  \"target.delegatecall(data)\" */ _59), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0)\n                                                /// @src 0:31052:31077  \"target.delegatecall(data)\"\n                                                let expr_component_mpos := extract_returndata()\n                                                /// @src 0:31094:31125  \"DelegateAndRevert(success, ret)\"\n                                                let _61 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:31094:31125  \"DelegateAndRevert(success, ret)\"\n                                                mstore(_61, shl(226, 0x26504155))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ add(_61, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), iszero(iszero(expr_component_7)))\n                                                mstore(add(/** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                /// @src 0:31094:31125  \"DelegateAndRevert(success, ret)\"\n                                                revert(_61, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(expr_component_mpos, add(/** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ _61, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)), /** @src 0:31094:31125  \"DelegateAndRevert(success, ret)\" */ _61))\n                                            }\n                                            case /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x9b249f69 {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                let offset_4 := calldataload(4)\n                                                if gt(offset_4, 0xffffffffffffffff) { revert(0, 0) }\n                                                let value0_5, value1_3 := abi_decode_bytes_calldata(add(4, offset_4), calldatasize())\n                                                let _62 := sub(shl(160, 1), 1)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                let _63 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                mstore(_63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                                mstore(/** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ add(_63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 32)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                let _64 := call(gas(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1100:1114  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _62), 0, /** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ _63, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(value0_5, value1_3, add(/** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ _63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ _63), _63, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32)\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                if iszero(_64)\n                                                {\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let pos := mload(64)\n                                                    returndatacopy(pos, 0, returndatasize())\n                                                    revert(pos, returndatasize())\n                                                }\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                let expr_9 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                if _64\n                                                {\n                                                    let _65 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32\n                                                    /// @src 0:16867:16905  \"senderCreator().createSender(initCode)\"\n                                                    if gt(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 0:16867:16905  \"senderCreator().createSender(initCode)\" */ returndatasize()) { _65 := returndatasize() }\n                                                    finalize_allocation(_63, _65)\n                                                    expr_9 := abi_decode_address_fromMemory(_63, add(_63, _65))\n                                                }\n                                                /// @src 0:16922:16949  \"SenderAddressResult(sender)\"\n                                                let _66 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 0:16922:16949  \"SenderAddressResult(sender)\"\n                                                mstore(_66, shl(225, 0x3653dc03))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16922:16949  \"SenderAddressResult(sender)\" */ add(_66, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), and(expr_9, _62))\n                                                /// @src 0:16922:16949  \"SenderAddressResult(sender)\"\n                                                revert(_66, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                            }\n                                            case 0xb760faf9 {\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                fun_depositTo(abi_decode_address())\n                                                return(0, 0)\n                                            }\n                                            case 0xbb9fe6bf {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                                                mstore(0, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(0x20, 0)\n                                                /// @src 4:3277:3297  \"info.unstakeDelaySec\"\n                                                let _67 := add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3277:3297  \"info.unstakeDelaySec\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _68 := sload(/** @src 4:3277:3297  \"info.unstakeDelaySec\" */ _67)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_6 := and(shr(120, _68), 0xffffffff)\n                                                if /** @src 4:3277:3302  \"info.unstakeDelaySec != 0\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_6)\n                                                {\n                                                    let memPtr_12 := mload(64)\n                                                    mstore(memPtr_12, shl(229, 4594637))\n                                                    mstore(add(memPtr_12, 4), 0x20)\n                                                    mstore(add(memPtr_12, 36), 10)\n                                                    mstore(add(memPtr_12, 68), \"not staked\")\n                                                    revert(memPtr_12, 100)\n                                                }\n                                                if iszero(and(_68, 0xff))\n                                                {\n                                                    let memPtr_13 := mload(64)\n                                                    mstore(memPtr_13, shl(229, 4594637))\n                                                    mstore(add(memPtr_13, 4), 0x20)\n                                                    mstore(add(memPtr_13, 36), 17)\n                                                    mstore(add(memPtr_13, 68), \"already unstaking\")\n                                                    revert(memPtr_13, 100)\n                                                }\n                                                let _69 := 0xffffffffffff\n                                                let sum_1 := add(and(/** @src 4:3407:3422  \"block.timestamp\" */ timestamp(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _69), value_6)\n                                                if gt(sum_1, _69)\n                                                {\n                                                    mstore(0, shl(224, 0x4e487b71))\n                                                    mstore(4, 0x11)\n                                                    revert(0, 0x24)\n                                                }\n                                                /// @src 4:3456:3488  \"info.withdrawTime = withdrawTime\"\n                                                update_storage_value_offsett_uint48_to_uint48(_67, sum_1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(_67, and(sload(_67), not(255)))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                let _70 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                mstore(_70, and(sum_1, _69))\n                                                /// @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\"\n                                                log2(_70, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20, /** @src 4:3532:3571  \"StakeUnlocked(msg.sender, withdrawTime)\" */ 0xfa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a, /** @src 4:3248:3258  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xc23a5cea {\n                                                if callvalue() { revert(0, 0) }\n                                                let _71 := 32\n                                                if slt(add(calldatasize(), not(3)), _71) { revert(0, 0) }\n                                                let value0_6 := abi_decode_address()\n                                                mstore(0, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(_71, 0)\n                                                /// @src 4:3934:3944  \"info.stake\"\n                                                let _72 := add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ keccak256(0, 64), /** @src 4:3934:3944  \"info.stake\" */ 1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _73 := sload(/** @src 4:3934:3944  \"info.stake\" */ _72)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let value_7 := and(shr(8, _73), 0xffffffffffffffffffffffffffff)\n                                                if /** @src 4:3962:3971  \"stake > 0\" */ iszero(value_7)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_14 := mload(64)\n                                                    mstore(memPtr_14, shl(229, 4594637))\n                                                    mstore(add(memPtr_14, 4), _71)\n                                                    mstore(add(memPtr_14, 36), 20)\n                                                    mstore(add(memPtr_14, 68), \"No stake to withdraw\")\n                                                    revert(memPtr_14, 100)\n                                                }\n                                                let value_8 := and(shr(152, _73), 0xffffffffffff)\n                                                if /** @src 4:4014:4035  \"info.withdrawTime > 0\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8)\n                                                {\n                                                    let memPtr_15 := mload(64)\n                                                    mstore(memPtr_15, shl(229, 4594637))\n                                                    mstore(add(memPtr_15, 4), _71)\n                                                    mstore(add(memPtr_15, 36), 29)\n                                                    mstore(add(memPtr_15, 68), \"must call unlockStake() first\")\n                                                    revert(memPtr_15, 100)\n                                                }\n                                                if /** @src 4:4100:4136  \"info.withdrawTime <= block.timestamp\" */ gt(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ value_8, /** @src 4:4121:4136  \"block.timestamp\" */ timestamp())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                {\n                                                    let memPtr_16 := mload(64)\n                                                    mstore(memPtr_16, shl(229, 4594637))\n                                                    mstore(add(memPtr_16, 4), _71)\n                                                    mstore(add(memPtr_16, 36), 27)\n                                                    mstore(add(memPtr_16, 68), \"Stake withdrawal is not due\")\n                                                    revert(memPtr_16, 100)\n                                                }\n                                                sstore(_72, and(_73, not(sub(shl(200, 1), 256))))\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                let _74 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                /// @src 4:4293:4343  \"StakeWithdrawn(msg.sender, withdrawAddress, stake)\"\n                                                log2(_74, sub(abi_encode_address_payable_uint256(_74, value0_6, value_7), _74), 0xb7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3, /** @src 4:3897:3907  \"msg.sender\" */ caller())\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                let expr_component_8 := call(gas(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:4371:4391  \"withdrawAddress.call\" */ value0_6, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), /** @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\" */ value_7, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, 0, 0)\n                                                /// @src 4:4371:4409  \"withdrawAddress.call{value: stake}(\\\"\\\")\"\n                                                pop(extract_returndata())\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if iszero(expr_component_8)\n                                                {\n                                                    let memPtr_17 := mload(64)\n                                                    mstore(memPtr_17, shl(229, 4594637))\n                                                    mstore(add(memPtr_17, 4), _71)\n                                                    mstore(add(memPtr_17, 36), 24)\n                                                    mstore(add(memPtr_17, 68), \"failed to withdraw stake\")\n                                                    revert(memPtr_17, 100)\n                                                }\n                                                return(0, 0)\n                                            }\n                                            case 0xdbed18e0 {\n                                                if callvalue() { revert(0, 0) }\n                                                let param_3, param_4, param_5 := abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(calldatasize())\n                                                /// @src 72:2322:2425  \"modifier nonReentrant() {...\"\n                                                fun_nonReentrantBefore()\n                                                /// @src 0:8042:8062  \"uint256 totalOps = 0\"\n                                                let var_totalOps := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8077:8090  \"uint256 i = 0\"\n                                                let var_i_2 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8072:8839  \"for (uint256 i = 0; i < opasLen; i++) {...\"\n                                                for { }\n                                                /** @src 0:8092:8103  \"i < opasLen\" */ lt(var_i_2, param_4)\n                                                /// @src 0:8077:8090  \"uint256 i = 0\"\n                                                {\n                                                    /// @src 0:8105:8108  \"i++\"\n                                                    var_i_2 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8105:8108  \"i++\" */ var_i_2, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:8105:8108  \"i++\"\n                                                {\n                                                    /// @src 0:8160:8179  \"opsPerAggregator[i]\"\n                                                    let expr_offset_1 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_i_2)\n                                                    /// @src 0:8230:8241  \"opa.userOps\"\n                                                    let expr_offset_2, expr_length := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_1, expr_offset_1)\n                                                    /// @src 0:8280:8294  \"opa.aggregator\"\n                                                    let _75 := 32\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _76 := and(/** @src 0:8280:8294  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_1, _75)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                                    /// @src 0:8429:8430  \"1\"\n                                                    let _77 := 0x01\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    if /** @src 0:8398:8431  \"address(aggregator) != address(1)\" */ eq(_76, /** @src 0:8429:8430  \"1\" */ _77)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    {\n                                                        let memPtr_18 := mload(64)\n                                                        mstore(memPtr_18, shl(229, 4594637))\n                                                        mstore(add(memPtr_18, 4), /** @src 0:8280:8294  \"opa.aggregator\" */ _75)\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(memPtr_18, 36), 23)\n                                                        mstore(add(memPtr_18, 68), \"AA96 invalid aggregator\")\n                                                        revert(memPtr_18, 100)\n                                                    }\n                                                    /// @src 0:8503:8792  \"if (address(aggregator) != address(0)) {...\"\n                                                    if /** @src 0:8507:8540  \"address(aggregator) != address(0)\" */ iszero(iszero(_76))\n                                                    /// @src 0:8503:8792  \"if (address(aggregator) != address(0)) {...\"\n                                                    {\n                                                        /// @src 0:8660:8673  \"opa.signature\"\n                                                        let expr_offset_3, expr_length_1 := access_calldata_tail_bytes_calldata(expr_offset_1, add(expr_offset_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64))\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if iszero(extcodesize(_76))\n                                                        {\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            revert(0, 0)\n                                                        }\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let _78 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        mstore(_78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x2dd81133))\n                                                        let tail_1 := add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68)\n                                                        mstore(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ add(_78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), 64)\n                                                        let pos_1 := tail_1\n                                                        mstore(tail_1, expr_length)\n                                                        let _79 := 100\n                                                        pos_1 := add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _79)\n                                                        let tail_2 := add(add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(5, expr_length)), _79)\n                                                        let srcPtr := expr_offset_2\n                                                        let i := 0\n                                                        for { }\n                                                        lt(i, expr_length)\n                                                        {\n                                                            i := add(i, /** @src 0:8429:8430  \"1\" */ _77)\n                                                        }\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        {\n                                                            mstore(pos_1, add(sub(tail_2, /** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(99)))\n                                                            let rel_offset_of_tail := calldataload(srcPtr)\n                                                            if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), expr_offset_2), not(286)))) { revert(0, 0) }\n                                                            tail_2 := abi_encode_struct_PackedUserOperation_calldata(add(rel_offset_of_tail, expr_offset_2), tail_2)\n                                                            srcPtr := add(srcPtr, /** @src 0:8280:8294  \"opa.aggregator\" */ _75)\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            pos_1 := add(pos_1, /** @src 0:8280:8294  \"opa.aggregator\" */ _75)\n                                                        }\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        mstore(add(/** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), add(sub(tail_2, /** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(3)))\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        let trySuccessCondition_1 := staticcall(gas(), _76, _78, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_3, expr_length_1, tail_2), /** @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\" */ _78), _78, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                        /// @src 0:8625:8674  \"aggregator.validateSignatures(ops, opa.signature)\"\n                                                        if trySuccessCondition_1\n                                                        {\n                                                            finalize_allocation_26283(_78)\n                                                        }\n                                                        /// @src 0:8621:8778  \"try aggregator.validateSignatures(ops, opa.signature) {} catch {...\"\n                                                        switch iszero(trySuccessCondition_1)\n                                                        case 0 { }\n                                                        default {\n                                                            /// @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\"\n                                                            let _80 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\"\n                                                            mstore(_80, shl(228, 0x086a9f75))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\" */ add(_80, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), _76)\n                                                            /// @src 0:8713:8759  \"SignatureValidationFailed(address(aggregator))\"\n                                                            revert(_80, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)\n                                                        }\n                                                    }\n                                                    /// @src 0:8806:8828  \"totalOps += ops.length\"\n                                                    var_totalOps := checked_add_uint256(var_totalOps, /** @src 0:8818:8828  \"ops.length\" */ expr_length)\n                                                }\n                                                /// @src 0:8879:8905  \"new UserOpInfo[](totalOps)\"\n                                                let expr_mpos_1 := allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(var_totalOps)\n                                                /// @src 0:8916:8935  \"uint256 opIndex = 0\"\n                                                let var_opIndex := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8950:8963  \"uint256 a = 0\"\n                                                let var_a := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:8945:9776  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:8965:8976  \"a < opasLen\" */ lt(var_a, param_4)\n                                                /// @src 0:8950:8963  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:8978:8981  \"a++\"\n                                                    var_a := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:8978:8981  \"a++\" */ var_a, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:8978:8981  \"a++\"\n                                                {\n                                                    /// @src 0:9033:9052  \"opsPerAggregator[a]\"\n                                                    let expr_offset_4 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a)\n                                                    /// @src 0:9103:9114  \"opa.userOps\"\n                                                    let expr_offset_5, expr_length_2 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_4, expr_offset_4)\n                                                    /// @src 0:9153:9167  \"opa.aggregator\"\n                                                    let expr_address := read_from_calldatat_contract_IAggregator(add(expr_offset_4, /** @src 0:8280:8294  \"opa.aggregator\" */ 32))\n                                                    /// @src 0:9228:9241  \"uint256 i = 0\"\n                                                    let var_i_3 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    let _81 := sub(shl(160, 1), 1)\n                                                    let _82 := and(/** @src 0:9687:9706  \"address(aggregator)\" */ expr_address, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)\n                                                    /// @src 0:9223:9766  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:9243:9253  \"i < opslen\" */ lt(var_i_3, expr_length_2)\n                                                    /// @src 0:9228:9241  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:9255:9258  \"i++\"\n                                                        var_i_3 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9255:9258  \"i++\" */ var_i_3, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:9255:9258  \"i++\"\n                                                    {\n                                                        /// @src 0:9457:9501  \"_validatePrepayment(opIndex, ops[i], opInfo)\"\n                                                        let expr_component_9, expr_component_10 := fun_validatePrepayment(var_opIndex, /** @src 0:9486:9492  \"ops[i]\" */ calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_5, expr_length_2, var_i_3), /** @src 0:9305:9321  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex)))\n                                                        /// @src 0:21736:21792  \"_getValidationData(...\"\n                                                        let expr_component_11, expr_component_12 := fun_getValidationData(expr_component_9)\n                                                        /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                        if /** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ iszero(eq(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _82, and(/** @src 0:21806:21838  \"expectedAggregator != aggregator\" */ expr_component_11, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:21802:21913  \"if (expectedAggregator != aggregator) {...\"\n                                                        {\n                                                            /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            let _83 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            mstore(_83, shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ add(_83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ _83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA24 signature error\")\n                                                            /// @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\"\n                                                            revert(_83, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:21922:22018  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_12\n                                                        {\n                                                            /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            let _84 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            mstore(_84, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ add(_84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                            mstore(add(/** @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\" */ _84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA22 expired or not due\")\n                                                            /// @src 0:21963:22007  \"FailedOp(opIndex, \\\"AA22 expired or not due\\\")\"\n                                                            revert(_84, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:22320:22385  \"_getValidationData(...\"\n                                                        let expr_component_13, expr_component_14 := fun_getValidationData(expr_component_10)\n                                                        /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                        if /** @src 0:22399:22425  \"pmAggregator != address(0)\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:22399:22425  \"pmAggregator != address(0)\" */ expr_component_13, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _81)))\n                                                        /// @src 0:22395:22500  \"if (pmAggregator != address(0)) {...\"\n                                                        {\n                                                            /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            let _85 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            mstore(_85, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ add(_85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 20)\n                                                            mstore(add(/** @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\" */ _85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA34 signature error\")\n                                                            /// @src 0:22448:22489  \"FailedOp(opIndex, \\\"AA34 signature error\\\")\"\n                                                            revert(_85, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                                        }\n                                                        /// @src 0:22509:22615  \"if (outOfTimeRange) {...\"\n                                                        if expr_component_14\n                                                        {\n                                                            /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            let _86 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                                            /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            mstore(_86, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            mstore(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ add(_86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 4), var_i_3)\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), 64)\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 33)\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA32 paymaster expired or not du\")\n                                                            mstore(add(/** @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\" */ _86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"e\")\n                                                            /// @src 0:22550:22604  \"FailedOp(opIndex, \\\"AA32 paymaster expired or not due\\\")\"\n                                                            revert(_86, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                                        }\n                                                        /// @src 0:9742:9751  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:9791:9808  \"BeforeExecution()\"\n                                                log1(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9791:9808  \"BeforeExecution()\" */ 0xbb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972)\n                                                /// @src 0:9850:9861  \"opIndex = 0\"\n                                                var_opIndex := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9819:9840  \"uint256 collected = 0\"\n                                                let var_collected_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9876:9889  \"uint256 a = 0\"\n                                                let var_a_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                /// @src 0:9871:10335  \"for (uint256 a = 0; a < opasLen; a++) {...\"\n                                                for { }\n                                                /** @src 0:9891:9902  \"a < opasLen\" */ lt(var_a_1, param_4)\n                                                /// @src 0:9876:9889  \"uint256 a = 0\"\n                                                {\n                                                    /// @src 0:9904:9907  \"a++\"\n                                                    var_a_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:9904:9907  \"a++\" */ var_a_1, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                }\n                                                /// @src 0:9904:9907  \"a++\"\n                                                {\n                                                    /// @src 0:9959:9978  \"opsPerAggregator[a]\"\n                                                    let expr_offset_6 := calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(param_3, param_4, var_a_1)\n                                                    /// @src 0:9997:10048  \"SignatureAggregatorChanged(address(opa.aggregator))\"\n                                                    log2(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9997:10048  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:10032:10046  \"opa.aggregator\" */ read_from_calldatat_contract_IAggregator(add(expr_offset_6, /** @src 0:8280:8294  \"opa.aggregator\" */ 32)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                                    /// @src 0:10099:10110  \"opa.userOps\"\n                                                    let expr_offset_7, expr_length_3 := access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_6, expr_offset_6)\n                                                    /// @src 0:10171:10184  \"uint256 i = 0\"\n                                                    let var_i_4 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:10166:10325  \"for (uint256 i = 0; i < opslen; i++) {...\"\n                                                    for { }\n                                                    /** @src 0:10186:10196  \"i < opslen\" */ lt(var_i_4, expr_length_3)\n                                                    /// @src 0:10171:10184  \"uint256 i = 0\"\n                                                    {\n                                                        /// @src 0:10198:10201  \"i++\"\n                                                        var_i_4 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:10198:10201  \"i++\" */ var_i_4, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                    }\n                                                    /// @src 0:10198:10201  \"i++\"\n                                                    {\n                                                        /// @src 0:10258:10264  \"ops[i]\"\n                                                        let expr_offset_8 := calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(expr_offset_7, expr_length_3, var_i_4)\n                                                        /// @src 0:10221:10283  \"collected += _executeUserOp(opIndex, ops[i], opInfos[opIndex])\"\n                                                        var_collected_1 := checked_add_uint256(var_collected_1, /** @src 0:10234:10283  \"_executeUserOp(opIndex, ops[i], opInfos[opIndex])\" */ fun_executeUserOp(var_opIndex, expr_offset_8, /** @src 0:10266:10282  \"opInfos[opIndex]\" */ mload(memory_array_index_access_struct_UserOpInfo_dyn(expr_mpos_1, var_opIndex))))\n                                                        /// @src 0:10301:10310  \"opIndex++\"\n                                                        var_opIndex := increment_uint256(var_opIndex)\n                                                    }\n                                                }\n                                                /// @src 0:10349:10387  \"SignatureAggregatorChanged(address(0))\"\n                                                log2(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, 0, /** @src 0:9997:10048  \"SignatureAggregatorChanged(address(opa.aggregator))\" */ 0x575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                                /// @src 0:10423:10432  \"collected\"\n                                                fun_compensate(param_5, var_collected_1)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                sstore(/** @src 72:2924:2945  \"_status = NOT_ENTERED\" */ 0x02, /** @src 0:8429:8430  \"1\" */ 0x01)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                return(0, 0)\n                                            }\n                                            case 0xfc7e286d {\n                                                if callvalue() { revert(0, 0) }\n                                                if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                                                mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                                                mstore(32, 0)\n                                                let dataSlot_5 := keccak256(0, 64)\n                                                let _87 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ dataSlot_5)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let _88 := sload(/** @src 4:507:554  \"mapping(address => DepositInfo) public deposits\" */ add(dataSlot_5, 1))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let memPos_7 := mload(64)\n                                                mstore(memPos_7, _87)\n                                                mstore(add(memPos_7, 32), iszero(iszero(and(_88, 0xff))))\n                                                mstore(add(memPos_7, 64), and(shr(8, _88), 0xffffffffffffffffffffffffffff))\n                                                mstore(add(memPos_7, 96), and(shr(120, _88), 0xffffffff))\n                                                mstore(add(memPos_7, 128), and(shr(152, _88), 0xffffffffffff))\n                                                return(memPos_7, 160)\n                                            }\n                                        }\n                                        if iszero(calldatasize())\n                                        {\n                                            /// @src 4:1326:1336  \"msg.sender\"\n                                            fun_depositTo(caller())\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            stop()\n                                        }\n                                        revert(0, 0)\n                                    }\n                                    function finalize_allocation_26259(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0xa0)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26260(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 0x0140)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation_26283(memPtr)\n                                    {\n                                        if gt(memPtr, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, memPtr)\n                                    }\n                                    function finalize_allocation_26350(memPtr)\n                                    {\n                                        let newFreePtr := add(memPtr, 96)\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function finalize_allocation(memPtr, size)\n                                    {\n                                        let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(64, newFreePtr)\n                                    }\n                                    function array_allocation_size_bytes(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(and(add(length, 31), not(31)), 0x20)\n                                    }\n                                    function abi_decode_available_length_bytes(src, length, end) -> array\n                                    {\n                                        let _1 := array_allocation_size_bytes(length)\n                                        let memPtr := mload(64)\n                                        finalize_allocation(memPtr, _1)\n                                        array := memPtr\n                                        mstore(memPtr, length)\n                                        if gt(add(src, length), end)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        calldatacopy(add(memPtr, 0x20), src, length)\n                                        mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_decode_address() -> value\n                                    {\n                                        value := calldataload(4)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n                                    {\n                                        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                                        length := calldataload(offset)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        arrayPos := add(offset, 0x20)\n                                        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n                                    }\n                                    function abi_decode_uint192() -> value\n                                    {\n                                        value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(192, 1), 1)))) { revert(0, 0) }\n                                    }\n                                    function abi_decode_array_struct_PackedUserOperation_calldata_dyn_calldatat_address_payable(dataEnd) -> value0, value1, value2\n                                    {\n                                        if slt(add(dataEnd, not(3)), 64) { revert(0, 0) }\n                                        let offset := calldataload(4)\n                                        let _1 := 0xffffffffffffffff\n                                        if gt(offset, _1) { revert(0, 0) }\n                                        if iszero(slt(add(offset, 35), dataEnd))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let length := calldataload(add(4, offset))\n                                        if gt(length, _1)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if gt(add(add(offset, shl(5, length)), 36), dataEnd)\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := add(offset, 36)\n                                        value1 := length\n                                        let value := calldataload(36)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value2 := value\n                                    }\n                                    /// @src 0:1543:1547  \"2048\"\n                                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                                    {\n                                        let i := 0\n                                        for { } lt(i, length) { i := add(i, 32) }\n                                        {\n                                            mstore(add(dst, i), mload(add(src, i)))\n                                        }\n                                        mstore(add(dst, length), 0)\n                                    }\n                                    function abi_encode_bytes(value, pos) -> end\n                                    {\n                                        let length := /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:1543:1547  \"2048\" */ value)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, length)\n                                        /// @src 0:1543:1547  \"2048\"\n                                        copy_memory_to_memory_with_cleanup(add(value, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x20), add(pos, 0x20), /** @src 0:1543:1547  \"2048\" */ length)\n                                        end := add(add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ pos, and(add(/** @src 0:1543:1547  \"2048\" */ length, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 31), not(31))), 0x20)\n                                    }\n                                    function checked_add_uint256(x, y) -> sum\n                                    {\n                                        sum := add(x, y)\n                                        if gt(x, sum)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function update_storage_value_offsett_uint48_to_uint48(slot, value)\n                                    {\n                                        let _1 := sload(slot)\n                                        sstore(slot, or(and(_1, not(shl(152, 0xffffffffffff))), and(shl(152, value), shl(152, 0xffffffffffff))))\n                                    }\n                                    function increment_uint256(value) -> ret\n                                    {\n                                        if eq(value, not(0))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                        ret := add(value, 1)\n                                    }\n                                    function checked_sub_uint256(x, y) -> diff\n                                    {\n                                        diff := sub(x, y)\n                                        if gt(diff, x)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x11)\n                                            revert(0, 0x24)\n                                        }\n                                    }\n                                    function abi_encode_address_payable_uint256(headStart, value0, value1) -> tail\n                                    {\n                                        tail := add(headStart, 64)\n                                        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n                                        mstore(add(headStart, 32), value1)\n                                    }\n                                    function extract_returndata() -> data\n                                    {\n                                        switch returndatasize()\n                                        case 0 { data := 96 }\n                                        default {\n                                            let _1 := returndatasize()\n                                            let _2 := array_allocation_size_bytes(_1)\n                                            let memPtr := mload(64)\n                                            finalize_allocation(memPtr, _2)\n                                            mstore(memPtr, _1)\n                                            data := memPtr\n                                            returndatacopy(add(memPtr, 0x20), /** @src -1:-1:-1 */ 0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ returndatasize())\n                                        }\n                                    }\n                                    /// @ast-id 968 @src 0:13258:13464  \"function getUserOpHash(...\"\n                                    function fun_getUserOpHash(var_userOp_947_offset) -> var\n                                    {\n                                        /// @src 5:1998:2013  \"userOp.initCode\"\n                                        let _1 := 64\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, _1))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem, expr_offset, expr_length)\n                                        let var_ret := keccak256(usr$mem, expr_length)\n                                        /// @src 5:2062:2077  \"userOp.callData\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 96))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_1 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_1, expr_offset_1, expr_length_1)\n                                        let var_ret_1 := keccak256(usr$mem_1, expr_length_1)\n                                        /// @src 5:2300:2323  \"userOp.paymasterAndData\"\n                                        let expr_offset_2, expr_length_2 := access_calldata_tail_bytes_calldata(var_userOp_947_offset, add(var_userOp_947_offset, 224))\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let usr$mem_2 := mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 1:2961:3154  \"assembly (\\\"memory-safe\\\") {...\"\n                                        calldatacopy(usr$mem_2, expr_offset_2, expr_length_2)\n                                        let var_ret_2 := keccak256(usr$mem_2, expr_length_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let expr_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 5:1998:2013  \"userOp.initCode\" */ _1)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        let _2 := add(expr_mpos, /** @src 5:1938:1950  \"userOp.nonce\" */ 32)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_2, and(/** @src 5:823:884  \"assembly {...\" */ calldataload(/** @src 5:1895:1912  \"getSender(userOp)\" */ var_userOp_947_offset), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:1998:2013  \"userOp.initCode\" */ _1), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:1938:1950  \"userOp.nonce\" */ add(var_userOp_947_offset, 32)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2062:2077  \"userOp.callData\" */ 96), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2115:2138  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_ret_1)\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2177:2202  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2115:2138  \"userOp.accountGasLimits\" */ add(var_userOp_947_offset, 128)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2230:2244  \"userOp.gasFees\" */ 192), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2177:2202  \"userOp.preVerificationGas\" */ add(var_userOp_947_offset, 160)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 5:2300:2323  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 5:2230:2244  \"userOp.gasFees\" */ add(var_userOp_947_offset, 192)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 256\n                                        mstore(add(/** @src 5:2342:2522  \"abi.encode(...\" */ expr_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3), var_ret_2)\n                                        /// @src 5:2342:2522  \"abi.encode(...\"\n                                        mstore(expr_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3)\n                                        let newFreePtr := add(expr_mpos, 288)\n                                        let _4 := 0xffffffffffffffff\n                                        if or(gt(newFreePtr, _4), lt(newFreePtr, expr_mpos))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr)\n                                        /// @src 5:4955:4987  \"return keccak256(encode(userOp))\"\n                                        let var_1 := /** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ keccak256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2, /** @src 0:1297:1302  \"10000\" */ mload(/** @src 5:4962:4987  \"keccak256(encode(userOp))\" */ expr_mpos))\n                                        /// @src 0:13401:13456  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        let _5 := add(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ expr_mpos, /** @src 0:13401:13456  \"abi.encode(userOp.hash(), address(this), block.chainid)\" */ 320)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(_5, var_1)\n                                        mstore(add(expr_mpos, 352), /** @src 0:13435:13439  \"this\" */ address())\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(expr_mpos, 384), /** @src 0:13442:13455  \"block.chainid\" */ chainid())\n                                        /// @src 0:13401:13456  \"abi.encode(userOp.hash(), address(this), block.chainid)\"\n                                        mstore(newFreePtr, /** @src 5:2062:2077  \"userOp.callData\" */ 96)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let newFreePtr_1 := add(expr_mpos, 416)\n                                        if or(gt(newFreePtr_1, _4), lt(newFreePtr_1, newFreePtr))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        mstore(/** @src 5:1998:2013  \"userOp.initCode\" */ _1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ newFreePtr_1)\n                                        /// @src 0:13372:13457  \"return...\"\n                                        var := /** @src 0:13391:13457  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ keccak256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5, /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:13391:13457  \"keccak256(abi.encode(userOp.hash(), address(this), block.chainid))\" */ newFreePtr))\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function array_allocation_size_array_struct_UserOpInfo_dyn(length) -> size\n                                    {\n                                        if gt(length, 0xffffffffffffffff)\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x41)\n                                            revert(0, 0x24)\n                                        }\n                                        size := add(shl(5, length), 0x20)\n                                    }\n                                    function allocate_and_zero_memory_array_array_struct_UserOpInfo_dyn(length) -> memPtr\n                                    {\n                                        let _1 := array_allocation_size_array_struct_UserOpInfo_dyn(length)\n                                        let _2 := 64\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation(memPtr_1, _1)\n                                        mstore(memPtr_1, length)\n                                        memPtr := memPtr_1\n                                        let _3 := add(array_allocation_size_array_struct_UserOpInfo_dyn(length), not(31))\n                                        let i := /** @src -1:-1:-1 */ 0\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        for { } lt(i, _3) { i := add(i, 32) }\n                                        {\n                                            let memPtr_2 := mload(_2)\n                                            finalize_allocation_26259(memPtr_2)\n                                            let memPtr_3 := mload(_2)\n                                            finalize_allocation_26260(memPtr_3)\n                                            mstore(memPtr_3, /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _4 := 32\n                                            mstore(add(memPtr_3, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _5 := 96\n                                            mstore(add(memPtr_3, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _6 := 128\n                                            mstore(add(memPtr_3, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 160), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 192), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 224), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 256), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_3, 288), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_2, memPtr_3)\n                                            mstore(add(memPtr_2, _4), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _2), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _5), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_2, _6), /** @src -1:-1:-1 */ 0)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(add(memPtr_1, i), _4), memPtr_2)\n                                        }\n                                    }\n                                    function memory_array_index_access_struct_UserOpInfo_dyn(baseRef, index) -> addr\n                                    {\n                                        if iszero(lt(index, /** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ baseRef)))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        addr := add(add(baseRef, shl(5, index)), 32)\n                                    }\n                                    function calldata_array_index_access_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(286))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function abi_decode_address_fromMemory(headStart, dataEnd) -> value0\n                                    {\n                                        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n                                        let value := mload(headStart)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        value0 := value\n                                    }\n                                    function abi_encode_bytes_calldata(start, length, pos) -> end\n                                    {\n                                        mstore(pos, length)\n                                        calldatacopy(add(pos, 0x20), start, length)\n                                        mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n                                    }\n                                    /// @ast-id 2547 @src 4:1935:2114  \"function depositTo(address account) public virtual payable {...\"\n                                    function fun_depositTo(var_account)\n                                    {\n                                        /// @src 4:2025:2062  \"_incrementDeposit(account, msg.value)\"\n                                        let expr := fun_incrementDeposit(var_account, /** @src 4:2052:2061  \"msg.value\" */ callvalue())\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        let _1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_1, expr)\n                                        /// @src 4:2077:2107  \"Deposited(account, newDeposit)\"\n                                        log2(_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32, /** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ 0x2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 4:2077:2107  \"Deposited(account, newDeposit)\" */ var_account, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)))\n                                    }\n                                    function calldata_array_index_access_struct_UserOpsPerAggregator_calldata_dyn_calldata(base_ref, length, index) -> addr\n                                    {\n                                        if iszero(lt(index, length))\n                                        {\n                                            mstore(0, shl(224, 0x4e487b71))\n                                            mstore(4, 0x32)\n                                            revert(0, 0x24)\n                                        }\n                                        let rel_offset_of_tail := calldataload(add(base_ref, shl(5, index)))\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(94))))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        addr := add(base_ref, rel_offset_of_tail)\n                                    }\n                                    function access_calldata_tail_array_struct_PackedUserOperation_calldata_dyn_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n                                    }\n                                    function read_from_calldatat_contract_IAggregator(ptr) -> returnValue\n                                    {\n                                        let value := calldataload(ptr)\n                                        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                                        returnValue := value\n                                    }\n                                    function access_calldata_tail_bytes_calldata(base_ref, ptr_to_tail) -> addr, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr_to_tail)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let addr_1 := add(base_ref, rel_offset_of_tail)\n                                        length := calldataload(addr_1)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        addr := add(addr_1, 0x20)\n                                        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function calldata_access_bytes_calldata(base_ref, ptr) -> value, length\n                                    {\n                                        let rel_offset_of_tail := calldataload(ptr)\n                                        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n                                        let value_1 := add(rel_offset_of_tail, base_ref)\n                                        length := calldataload(value_1)\n                                        value := add(value_1, 0x20)\n                                        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n                                        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n                                    }\n                                    function abi_encode_struct_PackedUserOperation_calldata(value, pos) -> end\n                                    {\n                                        let _1 := 0x0120\n                                        let value_1 := calldataload(value)\n                                        let _2 := and(value_1, sub(shl(160, 1), 1))\n                                        if iszero(eq(value_1, _2))\n                                        {\n                                            revert(/** @src -1:-1:-1 */ 0, 0)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(pos, _2)\n                                        mstore(add(pos, 0x20), calldataload(add(value, 0x20)))\n                                        let memberValue0, memberValue1 := calldata_access_bytes_calldata(value, add(value, 0x40))\n                                        mstore(add(pos, 0x40), _1)\n                                        let tail := abi_encode_bytes_calldata(memberValue0, memberValue1, add(pos, _1))\n                                        let memberValue0_1, memberValue1_1 := calldata_access_bytes_calldata(value, add(value, 0x60))\n                                        mstore(add(pos, 0x60), sub(tail, pos))\n                                        let tail_1 := abi_encode_bytes_calldata(memberValue0_1, memberValue1_1, tail)\n                                        mstore(add(pos, 0x80), calldataload(add(value, 0x80)))\n                                        mstore(add(pos, 0xa0), calldataload(add(value, 0xa0)))\n                                        mstore(add(pos, 0xc0), calldataload(add(value, 0xc0)))\n                                        let memberValue0_2, memberValue1_2 := calldata_access_bytes_calldata(value, add(value, 0xe0))\n                                        mstore(add(pos, 0xe0), sub(tail_1, pos))\n                                        let tail_2 := abi_encode_bytes_calldata(memberValue0_2, memberValue1_2, tail_1)\n                                        let _3 := 0x0100\n                                        let memberValue0_3, memberValue1_3 := calldata_access_bytes_calldata(value, add(value, _3))\n                                        mstore(add(pos, _3), sub(tail_2, pos))\n                                        end := abi_encode_bytes_calldata(memberValue0_3, memberValue1_3, tail_2)\n                                    }\n                                    /// @ast-id 48912 @src 72:2431:2738  \"function _nonReentrantBefore() private {...\"\n                                    function fun_nonReentrantBefore()\n                                    {\n                                        /// @src 72:2554:2640  \"if (_status == ENTERED) {...\"\n                                        if /** @src 72:2558:2576  \"_status == ENTERED\" */ eq(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 72:2558:2565  \"_status\" */ 0x02), 0x02)\n                                        /// @src 72:2554:2640  \"if (_status == ENTERED) {...\"\n                                        {\n                                            /// @src 72:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            let _1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                            /// @src 72:2599:2629  \"ReentrancyGuardReentrantCall()\"\n                                            mstore(_1, shl(224, 0x3ee5aeb5))\n                                            revert(_1, 4)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(/** @src 72:2558:2565  \"_status\" */ 0x02, 0x02)\n                                    }\n                                    /// @ast-id 1795 @src 0:23805:25958  \"function _validatePrepayment(...\"\n                                    function fun_validatePrepayment(var_opIndex, var_userOp_1628_offset, var_outOpInfo_mpos) -> var_validationData, var_paymasterValidationData\n                                    {\n                                        /// @src 0:24005:24036  \"uint256 paymasterValidationData\"\n                                        var_paymasterValidationData := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:24069:24078  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:24118:24135  \"outOpInfo.mUserOp\"\n                                        let _431_mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let value := calldataload(var_userOp_1628_offset)\n                                        let _1 := and(value, sub(shl(160, 1), 1))\n                                        if iszero(eq(value, _1)) { revert(0, 0) }\n                                        mstore(_431_mpos, _1)\n                                        mstore(/** @src 0:13835:13848  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:13851:13863  \"userOp.nonce\" */ add(var_userOp_1628_offset, 32)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := calldataload(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ add(var_userOp_1628_offset, 128))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := 0xffffffffffffffffffffffffffffffff\n                                        mstore(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _2))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:14020:14045  \"userOp.preVerificationGas\" */ add(var_userOp_1628_offset, 160)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _4 := calldataload(/** @src 0:14139:14153  \"userOp.gasFees\" */ add(var_userOp_1628_offset, /** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ 192))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:14086:14106  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 5:2694:2709  \"uint256(packed)\" */ _4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _3))\n                                        mstore(/** @src 0:14056:14084  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:2668:2683  \"bytes16(packed)\" */ _4))\n                                        /// @src 0:14198:14221  \"userOp.paymasterAndData\"\n                                        let expr_offset, expr_length := access_calldata_tail_bytes_calldata(var_userOp_1628_offset, add(var_userOp_1628_offset, 224))\n                                        /// @src 0:14231:14777  \"if (paymasterAndData.length > 0) {...\"\n                                        switch /** @src 0:14235:14262  \"paymasterAndData.length > 0\" */ iszero(iszero(expr_length))\n                                        case /** @src 0:14231:14777  \"if (paymasterAndData.length > 0) {...\" */ 0 {\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:14632:14649  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:14676:14713  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            mstore(/** @src 0:14731:14762  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        }\n                                        default /// @src 0:14231:14777  \"if (paymasterAndData.length > 0) {...\"\n                                        {\n                                            /// @src 5:490:492  \"52\"\n                                            if /** @src 0:14303:14368  \"paymasterAndData.length >= UserOperationLib.PAYMASTER_DATA_OFFSET\" */ lt(expr_length, /** @src 5:490:492  \"52\" */ 0x34)\n                                            {\n                                                let memPtr := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(memPtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(229, 4594637))\n                                                /// @src 5:490:492  \"52\"\n                                                mstore(add(memPtr, 4), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 5:490:492  \"52\" */ add(memPtr, 36), 29)\n                                                mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 5:490:492  \"52\" */ memPtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 5:490:492  \"52\" */ \"AA93 invalid paymasterAndData\")\n                                                revert(memPtr, 100)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(0x14, expr_length)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:434:436  \"36\" */ 0x24, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 5:490:492  \"52\" */ 0x34, /** @src 5:372:374  \"20\" */ expr_length)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            mstore(/** @src 0:14504:14535  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, /** @src 5:434:436  \"36\" */ 0x24))))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:14465:14502  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shr(/** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128, /** @src 5:434:436  \"36\" */ calldataload(/** @src 5:372:374  \"20\" */ add(expr_offset, 0x14))))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:14446:14463  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224), /** @src 5:372:374  \"20\" */ shr(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 5:4451:4511  \"bytes20(paymasterAndData[: PAYMASTER_VALIDATION_GAS_OFFSET])\" */ expr_offset)))\n                                        }\n                                        /// @src 0:24214:24235  \"getUserOpHash(userOp)\"\n                                        let _5 := fun_getUserOpHash(var_userOp_1628_offset)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _5)\n                                        let _6 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:24491:24552  \"mUserOp.preVerificationGas |...\"\n                                        let expr_1 := or(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)), /** @src 0:24491:24552  \"mUserOp.preVerificationGas |...\" */ _6)\n                                        /// @src 0:24491:24587  \"mUserOp.preVerificationGas |...\"\n                                        let expr_2 := or(expr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:24491:24639  \"mUserOp.preVerificationGas |...\"\n                                        let expr_3 := or(expr_2, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:24602:24639  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:24491:24685  \"mUserOp.preVerificationGas |...\"\n                                        let expr_4 := or(expr_3, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:24654:24685  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:24491:24720  \"mUserOp.preVerificationGas |...\"\n                                        let expr_5 := or(expr_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:14086:14106  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if /** @src 0:24781:24814  \"maxGasValues <= type(uint120).max\" */ gt(/** @src 0:24491:24763  \"mUserOp.preVerificationGas |...\" */ or(expr_5, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:14056:14084  \"mUserOp.maxPriorityFeePerGas\" */ add(_431_mpos, 288))), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffffffffffffffffff)\n                                        {\n                                            let memPtr_1 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(memPtr_1, 36), 24)\n                                            mstore(add(memPtr_1, 68), \"AA94 gas values overflow\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                        let _7 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ add(_431_mpos, 64))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum := add(_7, mload(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ add(_431_mpos, 96)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_1 := add(sum, mload(/** @src 0:24602:24639  \"mUserOp.paymasterVerificationGasLimit\" */ add(_431_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_2 := add(sum_1, mload(/** @src 0:24654:24685  \"mUserOp.paymasterPostOpGasLimit\" */ add(_431_mpos, /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let sum_3 := add(sum_2, mload(/** @src 0:13991:14017  \"mUserOp.preVerificationGas\" */ add(_431_mpos, 192)))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let product := mul(sum_3, mload(/** @src 0:14086:14106  \"mUserOp.maxFeePerGas\" */ add(_431_mpos, 256)))\n                                        /// @src 0:24935:25098  \"_validateAccountPrepayment(...\"\n                                        let var_validationData_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:17742:17756  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_outOpInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:17787:17801  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:17854:17865  \"op.initCode\"\n                                        let expr_offset_1, expr_length_1 := access_calldata_tail_bytes_calldata(var_userOp_1628_offset, add(var_userOp_1628_offset, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64))\n                                        /// @src 0:15806:16738  \"if (initCode.length != 0) {...\"\n                                        if /** @src 0:15810:15830  \"initCode.length != 0\" */ iszero(iszero(expr_length_1))\n                                        /// @src 0:15806:16738  \"if (initCode.length != 0) {...\"\n                                        {\n                                            /// @src 0:15898:16002  \"if (sender.code.length != 0)...\"\n                                            if /** @src 0:15902:15925  \"sender.code.length != 0\" */ iszero(iszero(/** @src 0:15902:15920  \"sender.code.length\" */ extcodesize(cleaned)))\n                                            /// @src 0:15898:16002  \"if (sender.code.length != 0)...\"\n                                            {\n                                                /// @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                let _8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                mstore(_8, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ add(_8, 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 31)\n                                                mstore(add(/** @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\" */ _8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA10 sender already constructed\")\n                                                /// @src 0:15950:16002  \"FailedOp(opIndex, \\\"AA10 sender already constructed\\\")\"\n                                                revert(_8, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            let _9 := mload(/** @src 0:16085:16120  \"opInfo.mUserOp.verificationGasLimit\" */ add(/** @src 0:16085:16099  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            let _10 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            mstore(_10, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(225, 0x2b870d1b))\n                                            mstore(/** @src 0:16034:16144  \"senderCreator().createSender{...\" */ add(_10, 4), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            let _11 := call(_9, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1100:1114  \"_senderCreator\" */ loadimmutable(\"35\"), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1)), 0, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ _10, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes_calldata(expr_offset_1, expr_length_1, add(/** @src 0:16034:16144  \"senderCreator().createSender{...\" */ _10, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36)), /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ _10), _10, /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            if iszero(_11)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                let pos := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                returndatacopy(pos, 0, returndatasize())\n                                                revert(pos, returndatasize())\n                                            }\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            let expr_6 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                            if _11\n                                            {\n                                                let _12 := /** @src 0:13851:13863  \"userOp.nonce\" */ 32\n                                                /// @src 0:16034:16144  \"senderCreator().createSender{...\"\n                                                if gt(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ returndatasize()) { _12 := returndatasize() }\n                                                finalize_allocation(_10, _12)\n                                                expr_6 := abi_decode_address_fromMemory(_10, add(_10, _12))\n                                            }\n                                            /// @src 0:16162:16183  \"sender1 == address(0)\"\n                                            let _13 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:16162:16183  \"sender1 == address(0)\" */ expr_6, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:16158:16256  \"if (sender1 == address(0))...\"\n                                            if /** @src 0:16162:16183  \"sender1 == address(0)\" */ iszero(_13)\n                                            /// @src 0:16158:16256  \"if (sender1 == address(0))...\"\n                                            {\n                                                /// @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                let _14 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                mstore(_14, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ add(_14, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 27)\n                                                mstore(add(/** @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\" */ _14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA13 initCode failed or OOG\")\n                                                /// @src 0:16208:16256  \"FailedOp(opIndex, \\\"AA13 initCode failed or OOG\\\")\"\n                                                revert(_14, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:16270:16369  \"if (sender1 != sender)...\"\n                                            if /** @src 0:16274:16291  \"sender1 != sender\" */ iszero(eq(_13, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned))\n                                            /// @src 0:16270:16369  \"if (sender1 != sender)...\"\n                                            {\n                                                /// @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                let _15 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                mstore(_15, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ add(_15, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\" */ _15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA14 initCode must return sender\")\n                                                /// @src 0:16316:16369  \"FailedOp(opIndex, \\\"AA14 initCode must return sender\\\")\"\n                                                revert(_15, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 0:16383:16489  \"if (sender1.code.length == 0)...\"\n                                            if /** @src 0:16387:16411  \"sender1.code.length == 0\" */ iszero(/** @src 0:16387:16406  \"sender1.code.length\" */ extcodesize(expr_6))\n                                            /// @src 0:16383:16489  \"if (sender1.code.length == 0)...\"\n                                            {\n                                                /// @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                let _16 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                mstore(_16, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ add(_16, /** @src 0:16034:16144  \"senderCreator().createSender{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\" */ _16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA15 initCode must create sender\")\n                                                /// @src 0:16436:16489  \"FailedOp(opIndex, \\\"AA15 initCode must create sender\\\")\"\n                                                revert(_16, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            /// @src 5:372:374  \"20\"\n                                            if gt(/** @src 0:16548:16550  \"20\" */ 0x14, /** @src 5:372:374  \"20\" */ expr_length_1)\n                                            {\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                revert(0, 0)\n                                            }\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _17 := mload(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:16689:16713  \"opInfo.mUserOp.paymaster\" */ add(/** @src 0:16689:16703  \"opInfo.mUserOp\" */ mload(var_outOpInfo_mpos), /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            /// @src 0:16572:16727  \"AccountDeployed(...\"\n                                            let _18 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(_18, /** @src 5:372:374  \"20\" */ shr(/** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96, /** @src 5:372:374  \"20\" */ calldataload(/** @src 0:16529:16552  \"bytes20(initCode[0:20])\" */ expr_offset_1)))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(_18, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                            /// @src 0:16572:16727  \"AccountDeployed(...\"\n                                            log3(_18, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:16572:16727  \"AccountDeployed(...\" */ 0xd51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d, _17, cleaned)\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_2 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:17900:17917  \"mUserOp.paymaster\" */ add(_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        /// @src 0:17931:17962  \"uint256 missingAccountFunds = 0\"\n                                        let var_missingAccountFunds := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:17976:18198  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:17980:18003  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:17976:18198  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let _19 := sload(keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64))\n                                            /// @src 0:18094:18183  \"bal > requiredPrefund...\"\n                                            let expr_7 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:18094:18183  \"bal > requiredPrefund...\"\n                                            switch /** @src 0:18094:18115  \"bal > requiredPrefund\" */ gt(_19, product)\n                                            case /** @src 0:18094:18183  \"bal > requiredPrefund...\" */ 0 {\n                                                expr_7 := /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:18162:18183  \"requiredPrefund - bal\" */ product, _19)\n                                            }\n                                            default /// @src 0:18094:18183  \"bal > requiredPrefund...\"\n                                            {\n                                                expr_7 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            }\n                                            /// @src 0:18072:18183  \"missingAccountFunds = bal > requiredPrefund...\"\n                                            var_missingAccountFunds := expr_7\n                                        }\n                                        /// @src 0:1543:1547  \"2048\"\n                                        let _20 := mload(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        let _21 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        mstore(_21, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x06608bdf))\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        let trySuccessCondition := call(_6, cleaned, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ _21, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_21, 4), var_userOp_1628_offset, _20, var_missingAccountFunds), _21), _21, /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        let expr_8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                        if trySuccessCondition\n                                        {\n                                            let _22 := /** @src 0:13851:13863  \"userOp.nonce\" */ 32\n                                            /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                            if gt(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ returndatasize()) { _22 := returndatasize() }\n                                            finalize_allocation(_21, _22)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            if slt(sub(/** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ add(_21, _22), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _21), /** @src 0:13851:13863  \"userOp.nonce\" */ 32)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            { revert(0, 0) }\n                                            /// @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\"\n                                            expr_8 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(_21)\n                                        }\n                                        /// @src 0:18211:18617  \"try...\"\n                                        switch iszero(trySuccessCondition)\n                                        case 0 {\n                                            /// @src 0:18436:18468  \"validationData = _validationData\"\n                                            var_validationData_1 := expr_8\n                                        }\n                                        default /// @src 0:18211:18617  \"try...\"\n                                        {\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$len := returndatasize()\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _23 := 0x0800\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if gt(usr$len, /** @src 0:1543:1547  \"2048\" */ _23)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            {\n                                                usr$len := /** @src 0:1543:1547  \"2048\" */ _23\n                                            }\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            let usr$ptr := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                            /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                            mstore(usr$ptr, usr$len)\n                                            returndatacopy(add(usr$ptr, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                            /// @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            let _24 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            mstore(_24, shl(224, 0x65c8fd4d))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_24, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA23 reverted\")\n                                            mstore(add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)\n                                            /// @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                            revert(_24, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr, add(/** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _24))\n                                        }\n                                        /// @src 0:18630:18999  \"if (paymaster == address(0)) {...\"\n                                        if /** @src 0:17980:18003  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_2)\n                                        /// @src 0:18630:18999  \"if (paymaster == address(0)) {...\"\n                                        {\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(0, cleaned)\n                                            mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _25 := sload(/** @src 0:18762:18780  \"senderInfo.deposit\" */ dataSlot)\n                                            /// @src 0:18798:18921  \"if (requiredPrefund > deposit) {...\"\n                                            if /** @src 0:18802:18827  \"requiredPrefund > deposit\" */ gt(product, _25)\n                                            /// @src 0:18798:18921  \"if (requiredPrefund > deposit) {...\"\n                                            {\n                                                /// @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                let _26 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                mstore(_26, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ add(_26, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 23)\n                                                mstore(add(/** @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\" */ _26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA21 didn't pay prefund\")\n                                                /// @src 0:18858:18902  \"FailedOp(opIndex, \\\"AA21 didn't pay prefund\\\")\"\n                                                revert(_26, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:18959:18984  \"deposit - requiredPrefund\" */ _25, product))\n                                        }\n                                        /// @src 0:24918:25098  \"validationData = _validateAccountPrepayment(...\"\n                                        var_validationData := var_validationData_1\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned_3 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:25138:25152  \"mUserOp.sender\" */ _431_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _27 := mload(/** @src 0:13835:13848  \"mUserOp.nonce\" */ add(_431_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, cleaned_3)\n                                        mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 1)\n                                        let _28 := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(0, shr(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _27))\n                                        mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _28)\n                                        let dataSlot_1 := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _29 := sload(/** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ dataSlot_1)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot_1, /** @src 2:1373:1407  \"nonceSequenceNumber[sender][key]++\" */ increment_uint256(_29))\n                                        /// @src 0:25109:25249  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        if /** @src 0:25113:25168  \"!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)\" */ iszero(/** @src 2:1373:1414  \"nonceSequenceNumber[sender][key]++ == seq\" */ eq(_29, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 2:1343:1356  \"uint64(nonce)\" */ _27, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0xffffffffffffffff)))\n                                        /// @src 0:25109:25249  \"if (!_validateAndUpdateNonce(mUserOp.sender, mUserOp.nonce)) {...\"\n                                        {\n                                            /// @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            let _30 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            mstore(_30, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ add(_30, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 26)\n                                            mstore(add(/** @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\" */ _30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA25 invalid account nonce\")\n                                            /// @src 0:25191:25238  \"FailedOp(opIndex, \\\"AA25 invalid account nonce\\\")\"\n                                            revert(_30, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:25283:25421  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        if /** @src 0:25287:25328  \"preGas - gasleft() > verificationGasLimit\" */ gt(/** @src 0:1543:1547  \"2048\" */ sub(expr, /** @src 0:25296:25305  \"gasleft()\" */ gas()), /** @src 0:25287:25328  \"preGas - gasleft() > verificationGasLimit\" */ _6)\n                                        /// @src 0:25283:25421  \"if (preGas - gasleft() > verificationGasLimit) {...\"\n                                        {\n                                            /// @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            let _31 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            mstore(_31, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ add(_31, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                            mstore(add(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(add(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                            mstore(add(/** @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\" */ _31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA26 over verificationGasLimit\")\n                                            /// @src 0:25355:25406  \"FailedOp(opIndex, \\\"AA26 over verificationGasLimit\\\")\"\n                                            revert(_31, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                        }\n                                        /// @src 0:25441:25461  \"bytes memory context\"\n                                        let var_context_1745_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:25441:25461  \"bytes memory context\"\n                                        var_context_1745_mpos := /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96\n                                        /// @src 0:25471:25721  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        if /** @src 0:25475:25506  \"mUserOp.paymaster != address(0)\" */ iszero(iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:25475:25492  \"mUserOp.paymaster\" */ add(_431_mpos, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))))\n                                        /// @src 0:25471:25721  \"if (mUserOp.paymaster != address(0)) {...\"\n                                        {\n                                            /// @src 0:25559:25710  \"_validatePaymasterPrepayment(...\"\n                                            let var_context_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:25559:25710  \"_validatePaymasterPrepayment(...\"\n                                            let var_validationData_2 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:19872:19881  \"gasleft()\"\n                                            let expr_9 := gas()\n                                            /// @src 0:19925:19939  \"opInfo.mUserOp\"\n                                            let _mpos_1 := mload(var_outOpInfo_mpos)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let cleaned_4 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:19973:19990  \"mUserOp.paymaster\" */ add(_mpos_1, /** @src 0:14198:14221  \"userOp.paymasterAndData\" */ 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                            mstore(0, cleaned_4)\n                                            mstore(/** @src 0:13851:13863  \"userOp.nonce\" */ 32, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            let dataSlot_2 := keccak256(0, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _32 := sload(/** @src 0:20091:20112  \"paymasterInfo.deposit\" */ dataSlot_2)\n                                            /// @src 0:20126:20248  \"if (deposit < requiredPreFund) {...\"\n                                            if /** @src 0:20130:20155  \"deposit < requiredPreFund\" */ lt(_32, product)\n                                            /// @src 0:20126:20248  \"if (deposit < requiredPreFund) {...\"\n                                            {\n                                                /// @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                let _33 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                mstore(_33, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ add(_33, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 30)\n                                                mstore(add(/** @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\" */ _33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA31 paymaster deposit too low\")\n                                                /// @src 0:20182:20233  \"FailedOp(opIndex, \\\"AA31 paymaster deposit too low\\\")\"\n                                                revert(_33, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132)\n                                            }\n                                            sstore(dataSlot_2, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:20285:20310  \"deposit - requiredPreFund\" */ _32, product))\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let _34 := mload(/** @src 0:20357:20394  \"mUserOp.paymasterVerificationGasLimit\" */ add(_mpos_1, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128))\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _35 := mload(/** @src 0:24191:24211  \"outOpInfo.userOpHash\" */ add(var_outOpInfo_mpos, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let _36 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            mstore(_36, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(226, 0x14add44b))\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let trySuccessCondition_1 := call(_34, cleaned_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _36, sub(abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(add(_36, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ var_userOp_1628_offset, _35, product), _36), _36, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            let expr_component_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            let expr_component := 0\n                                            /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                            if trySuccessCondition_1\n                                            {\n                                                let _37 := returndatasize()\n                                                returndatacopy(_36, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ _37)\n                                                finalize_allocation(_36, _37)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                if slt(sub(/** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let offset := mload(_36)\n                                                if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                                                if iszero(slt(add(add(_36, offset), 0x1f), /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37)))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                let _38 := mload(add(_36, offset))\n                                                let _39 := array_allocation_size_bytes(_38)\n                                                let memPtr_2 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                finalize_allocation(memPtr_2, _39)\n                                                mstore(memPtr_2, _38)\n                                                if gt(add(add(add(_36, offset), _38), /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\" */ add(_36, _37))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                { revert(0, 0) }\n                                                copy_memory_to_memory_with_cleanup(add(add(_36, offset), /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(memPtr_2, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _38)\n                                                let value_1 := mload(add(_36, /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                                /// @src 0:20428:20620  \"IPaymaster(paymaster).validatePaymasterUserOp{gas: pmVerificationGasLimit}(...\"\n                                                expr_component_mpos := memPtr_2\n                                                expr_component := value_1\n                                            }\n                                            /// @src 0:20408:20925  \"try...\"\n                                            switch iszero(trySuccessCondition_1)\n                                            case 0 {\n                                                /// @src 0:20708:20726  \"context = _context\"\n                                                var_context_mpos := expr_component_mpos\n                                                /// @src 0:20744:20776  \"validationData = _validationData\"\n                                                var_validationData_2 := expr_component\n                                            }\n                                            default /// @src 0:20408:20925  \"try...\"\n                                            {\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$len_1 := returndatasize()\n                                                /// @src 0:1543:1547  \"2048\"\n                                                let _40 := 0x0800\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                if gt(usr$len_1, /** @src 0:1543:1547  \"2048\" */ _40)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                {\n                                                    usr$len_1 := /** @src 0:1543:1547  \"2048\" */ _40\n                                                }\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                let usr$ptr_1 := mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr_1, usr$len_1), /** @src 0:13851:13863  \"userOp.nonce\" */ 32))\n                                                /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                mstore(usr$ptr_1, usr$len_1)\n                                                returndatacopy(add(usr$ptr_1, /** @src 0:13851:13863  \"userOp.nonce\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len_1)\n                                                /// @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                let _41 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                mstore(_41, /** @src 0:18515:18602  \"FailedOpWithRevert(opIndex, \\\"AA23 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ shl(224, 0x65c8fd4d))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ add(_41, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), 13)\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"AA33 reverted\")\n                                                mstore(add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), /** @src 0:14020:14045  \"userOp.preVerificationGas\" */ 160)\n                                                /// @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\"\n                                                revert(_41, sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(usr$ptr_1, add(/** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)), /** @src 0:20823:20910  \"FailedOpWithRevert(opIndex, \\\"AA33 reverted\\\", Exec.getReturnData(REVERT_REASON_MAX_LEN))\" */ _41))\n                                            }\n                                            /// @src 0:20938:21087  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            if /** @src 0:20942:20985  \"preGas - gasleft() > pmVerificationGasLimit\" */ gt(/** @src 0:1543:1547  \"2048\" */ sub(expr_9, /** @src 0:20951:20960  \"gasleft()\" */ gas()), /** @src 0:20942:20985  \"preGas - gasleft() > pmVerificationGasLimit\" */ _34)\n                                            /// @src 0:20938:21087  \"if (preGas - gasleft() > pmVerificationGasLimit) {...\"\n                                            {\n                                                /// @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                let _42 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                mstore(_42, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ add(_42, /** @src 0:18231:18371  \"IAccount(sender).validateUserOp{...\" */ 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 36), /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), 39)\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), \"AA36 over paymasterVerificationG\")\n                                                mstore(add(/** @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\" */ _42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 132), \"asLimit\")\n                                                /// @src 0:21012:21072  \"FailedOp(opIndex, \\\"AA36 over paymasterVerificationGasLimit\\\")\"\n                                                revert(_42, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 164)\n                                            }\n                                            /// @src 0:25522:25710  \"(context, paymasterValidationData) = _validatePaymasterPrepayment(...\"\n                                            var_paymasterValidationData := var_validationData_2\n                                            var_context_1745_mpos := var_context_mpos\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 0:25754:25771  \"outOpInfo.prefund\" */ add(var_outOpInfo_mpos, /** @src 0:13874:13902  \"mUserOp.verificationGasLimit\" */ 64), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ product)\n                                        mstore(/** @src 0:25803:25826  \"outOpInfo.contextOffset\" */ add(var_outOpInfo_mpos, /** @src 0:13904:13924  \"mUserOp.callGasLimit\" */ 96), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_context_1745_mpos)\n                                        mstore(/** @src 0:25874:25892  \"outOpInfo.preOpGas\" */ add(var_outOpInfo_mpos, /** @src 0:13957:13980  \"userOp.accountGasLimits\" */ 128), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:1543:1547  \"2048\" */ sub(expr, /** @src 0:25904:25913  \"gasleft()\" */ gas()), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ calldataload(/** @src 0:14020:14045  \"userOp.preVerificationGas\" */ add(var_userOp_1628_offset, 160))))\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_UserOpInfo(value, pos)\n                                    {\n                                        let _1 := mload(value)\n                                        let _2 := sub(shl(160, 1), 1)\n                                        mstore(pos, and(mload(_1), _2))\n                                        mstore(add(pos, 0x20), mload(add(_1, 0x20)))\n                                        mstore(add(pos, 0x40), mload(add(_1, 0x40)))\n                                        mstore(add(pos, 0x60), mload(add(_1, 0x60)))\n                                        mstore(add(pos, 0x80), mload(add(_1, 0x80)))\n                                        mstore(add(pos, 0xa0), mload(add(_1, 0xa0)))\n                                        mstore(add(pos, 0xc0), mload(add(_1, 0xc0)))\n                                        mstore(add(pos, 0xe0), and(mload(add(_1, 0xe0)), _2))\n                                        let _3 := 0x0100\n                                        mstore(add(pos, _3), mload(add(_1, _3)))\n                                        let _4 := 0x0120\n                                        mstore(add(pos, _4), mload(add(_1, _4)))\n                                        mstore(add(pos, 0x0140), mload(add(value, 0x20)))\n                                        mstore(add(pos, 0x0160), mload(add(value, 0x40)))\n                                        mstore(add(pos, 0x0180), mload(add(value, 0x60)))\n                                        mstore(add(pos, 0x01a0), mload(add(value, 0x80)))\n                                    }\n                                    /// @ast-id 328 @src 0:3032:6109  \"function _executeUserOp(...\"\n                                    function fun_executeUserOp(var_opIndex, var_userOp_offset, var_opInfo_155_mpos) -> var_collected\n                                    {\n                                        /// @src 0:3242:3251  \"gasleft()\"\n                                        let expr := gas()\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:3309:3329  \"opInfo.contextOffset\" */ add(var_opInfo_155_mpos, 96))\n                                        /// @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _2 := 0x40\n                                        let var_saveFreePtr := mload(_2)\n                                        /// @src 0:3531:3546  \"userOp.callData\"\n                                        let expr_offset, expr_182_length := access_calldata_tail_bytes_calldata(var_userOp_offset, add(var_userOp_offset, /** @src 0:3309:3329  \"opInfo.contextOffset\" */ 96))\n                                        /// @src 0:3560:3582  \"bytes memory innerCall\"\n                                        let var_innerCall_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                        /// @src 0:3596:3612  \"bytes4 methodSig\"\n                                        let var_methodSig := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3596:3612  \"bytes4 methodSig\"\n                                        var_methodSig := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerCall_mpos\n                                        /// @src 0:3626:3806  \"assembly {...\"\n                                        if gt(expr_182_length, 3)\n                                        {\n                                            var_methodSig := calldataload(expr_offset)\n                                        }\n                                        /// @src 0:3836:3874  \"IAccountExecute.executeUserOp.selector\"\n                                        let _3 := shl(224, 0x8dd7712f)\n                                        /// @src 0:3819:4236  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        switch /** @src 0:3823:3874  \"methodSig == IAccountExecute.executeUserOp.selector\" */ eq(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:3823:3874  \"methodSig == IAccountExecute.executeUserOp.selector\" */ var_methodSig, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0xffffffff)), /** @src 0:3836:3874  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                        case /** @src 0:3819:4236  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\" */ 0 {\n                                            /// @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            mstore(add(var_saveFreePtr, 0x20), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ add(var_saveFreePtr, 36), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail := abi_encode_bytes_calldata(expr_offset, expr_182_length, add(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail, /** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            let _4 := sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail), /** @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\" */ var_saveFreePtr)\n                                            mstore(var_saveFreePtr, add(_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)))\n                                            /// @src 0:4158:4221  \"abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            finalize_allocation(var_saveFreePtr, _4)\n                                            /// @src 0:4146:4221  \"innerCall = abi.encodeCall(this.innerHandleOp, (callData, opInfo, context))\"\n                                            var_innerCall_mpos := var_saveFreePtr\n                                        }\n                                        default /// @src 0:3819:4236  \"if (methodSig == IAccountExecute.executeUserOp.selector) {...\"\n                                        {\n                                            /// @src 0:1543:1547  \"2048\"\n                                            let _5 := mload(/** @src 0:3978:3995  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, 32))\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let expr_206_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(add(expr_206_mpos, /** @src 0:3978:3995  \"opInfo.userOpHash\" */ 32), /** @src 0:3836:3874  \"IAccountExecute.executeUserOp.selector\" */ _3)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            mstore(/** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ add(expr_206_mpos, 36), /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                            let tail_1 := abi_encode_struct_PackedUserOperation_calldata(var_userOp_offset, add(/** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_206_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100))\n                                            mstore(add(/** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ expr_206_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68), _5)\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            let _6 := sub(tail_1, expr_206_mpos)\n                                            let _7 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(31)\n                                            /// @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\"\n                                            mstore(expr_206_mpos, add(_6, _7))\n                                            finalize_allocation(expr_206_mpos, _6)\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let expr_217_mpos := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            mstore(add(expr_217_mpos, /** @src 0:3978:3995  \"opInfo.userOpHash\" */ 32), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 4381779))\n                                            mstore(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ add(expr_217_mpos, /** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ 36), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 512)\n                                            let tail_2 := abi_encode_bytes(expr_206_mpos, add(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 548))\n                                            abi_encode_struct_UserOpInfo(var_opInfo_155_mpos, add(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 68))\n                                            mstore(add(/** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 516), add(sub(tail_2, /** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ not(35)))\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            let _8 := sub(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ abi_encode_bytes(_1, tail_2), /** @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\" */ expr_217_mpos)\n                                            mstore(expr_217_mpos, add(_8, /** @src 0:3923:3997  \"abi.encodeCall(IAccountExecute.executeUserOp, (userOp, opInfo.userOpHash))\" */ _7))\n                                            /// @src 0:4027:4095  \"abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            finalize_allocation(expr_217_mpos, _8)\n                                            /// @src 0:4015:4095  \"innerCall = abi.encodeCall(this.innerHandleOp, (executeUserOp, opInfo, context))\"\n                                            var_innerCall_mpos := expr_217_mpos\n                                        }\n                                        /// @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\"\n                                        let _9 := 32\n                                        let var_success := call(gas(), address(), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ add(var_innerCall_mpos, _9), mload(var_innerCall_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                        var_collected := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0)\n                                        /// @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\"\n                                        mstore(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ var_saveFreePtr)\n                                        /// @src 0:4488:6103  \"if (!success) {...\"\n                                        if /** @src 0:4492:4500  \"!success\" */ iszero(var_success)\n                                        /// @src 0:4488:6103  \"if (!success) {...\"\n                                        {\n                                            /// @src 0:4516:4539  \"bytes32 innerRevertCode\"\n                                            let var_innerRevertCode := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                            /// @src 0:4553:4780  \"assembly (\\\"memory-safe\\\") {...\"\n                                            if eq(/** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9, /** @src 0:4553:4780  \"assembly (\\\"memory-safe\\\") {...\" */ returndatasize())\n                                            {\n                                                returndatacopy(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode, var_innerRevertCode, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9)\n                                                /// @src 0:4553:4780  \"assembly (\\\"memory-safe\\\") {...\"\n                                                var_innerRevertCode := mload(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_innerRevertCode)\n                                            }\n                                            /// @src 0:4793:6093  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            switch /** @src 0:4797:4832  \"innerRevertCode == INNER_OUT_OF_GAS\" */ eq(var_innerRevertCode, /** @src 0:12228:12354  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeaddead))\n                                            case /** @src 0:4793:6093  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\" */ 0 {\n                                                /// @src 0:5089:6093  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                switch /** @src 0:5093:5136  \"innerRevertCode == INNER_REVERT_LOW_PREFUND\" */ eq(var_innerRevertCode, /** @src 0:29031:29177  \"assembly (\\\"memory-safe\\\") {...\" */ shl(224, 0xdeadaa51))\n                                                case /** @src 0:5089:6093  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\" */ 0 {\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let _10 := mload(/** @src 0:5612:5629  \"opInfo.userOpHash\" */ add(var_opInfo_155_mpos, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 0:5651:5665  \"opInfo.mUserOp\"\n                                                    let _565_mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _11 := sub(shl(160, 1), 1)\n                                                    let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:5651:5672  \"opInfo.mUserOp.sender\" */ _565_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    let _12 := mload(/** @src 0:5694:5714  \"opInfo.mUserOp.nonce\" */ add(_565_mpos, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$len := returndatasize()\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let _13 := 0x0800\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    if gt(usr$len, /** @src 0:1543:1547  \"2048\" */ _13)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    {\n                                                        usr$len := /** @src 0:1543:1547  \"2048\" */ _13\n                                                    }\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let usr$ptr := mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ add(add(usr$ptr, usr$len), /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9))\n                                                    /// @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    mstore(usr$ptr, usr$len)\n                                                    returndatacopy(add(usr$ptr, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0, /** @src 14:1204:1553  \"assembly (\\\"memory-safe\\\") {...\" */ usr$len)\n                                                    /// @src 0:5572:5795  \"PostOpRevertReason(...\"\n                                                    let _14 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    mstore(_14, _12)\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    mstore(add(_14, /** @src 0:4249:4469  \"assembly (\\\"memory-safe\\\") {...\" */ _9), /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                    /// @src 0:5572:5795  \"PostOpRevertReason(...\"\n                                                    log3(_14, sub(/** @src 0:1543:1547  \"2048\" */ abi_encode_bytes(usr$ptr, add(_14, /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)), /** @src 0:5572:5795  \"PostOpRevertReason(...\" */ _14), 0xf62676f440ff169a3a9afdbf812e89e7f95975ee8e5c31214ffdef631c5f4792, _10, cleaned)\n                                                    /// @src 0:5834:5852  \"preGas - gasleft()\"\n                                                    let expr_1 := checked_sub_uint256(expr, /** @src 0:5843:5852  \"gasleft()\" */ gas())\n                                                    /// @src 0:5855:5870  \"opInfo.preOpGas\"\n                                                    let _15 := add(var_opInfo_155_mpos, 128)\n                                                    /// @src 0:5900:6078  \"_postExecution(...\"\n                                                    let var_actualGas := /** @src 0:5834:5870  \"preGas - gasleft() + opInfo.preOpGas\" */ checked_add_uint256(expr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5855:5870  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:5900:6078  \"_postExecution(...\"\n                                                    let var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0\n                                                    /// @src 0:26799:26808  \"gasleft()\"\n                                                    let expr_2 := gas()\n                                                    /// @src 0:26842:26863  \"address refundAddress\"\n                                                    let var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:26842:26863  \"address refundAddress\"\n                                                    let var_refundAddress_1 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_actualGasCost\n                                                    /// @src 0:26907:26921  \"opInfo.mUserOp\"\n                                                    let _mpos := mload(var_opInfo_155_mpos)\n                                                    /// @src 0:26954:26980  \"getUserOpGasPrice(mUserOp)\"\n                                                    let expr_3 := fun_getUserOpGasPrice(_mpos)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27015:27032  \"mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                    switch /** @src 0:27050:27073  \"paymaster == address(0)\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ cleaned_1)\n                                                    case /** @src 0:27046:27885  \"if (paymaster == address(0)) {...\" */ 0 {\n                                                        /// @src 0:27162:27187  \"refundAddress = paymaster\"\n                                                        var_refundAddress := cleaned_1\n                                                        /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                        if /** @src 0:27209:27227  \"context.length > 0\" */ iszero(iszero(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27209:27223  \"context.length\" */ _1)))\n                                                        /// @src 0:27205:27871  \"if (context.length > 0) {...\"\n                                                        {\n                                                            /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                            var_refundAddress_1 := var_actualGasCost\n                                                        }\n                                                    }\n                                                    default /// @src 0:27046:27885  \"if (paymaster == address(0)) {...\"\n                                                    {\n                                                        /// @src 0:27093:27123  \"refundAddress = mUserOp.sender\"\n                                                        var_refundAddress := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:27109:27123  \"mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _11)\n                                                    }\n                                                    /// @src 0:27898:27929  \"actualGas += preGas - gasleft()\"\n                                                    var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, /** @src 0:1543:1547  \"2048\" */ sub(expr_2, /** @src 0:27920:27929  \"gasleft()\" */ gas()))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _16 := mload(/** @src 0:28052:28072  \"mUserOp.callGasLimit\" */ add(_mpos, /** @src 0:3309:3329  \"opInfo.contextOffset\" */ 96))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let sum := add(_16, mload(/** @src 0:28075:28106  \"mUserOp.paymasterPostOpGasLimit\" */ add(_mpos, 160)))\n                                                    /// @src 0:1543:1547  \"2048\"\n                                                    let diff := sub(var_actualGas, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:28163:28178  \"opInfo.preOpGas\" */ _15))\n                                                    /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    if /** @src 0:28316:28352  \"executionGasLimit > executionGasUsed\" */ gt(sum, diff)\n                                                    /// @src 0:28312:28586  \"if (executionGasLimit > executionGasUsed) {...\"\n                                                    {\n                                                        /// @src 0:28538:28567  \"actualGas += unusedGasPenalty\"\n                                                        var_actualGas := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(var_actualGas, div(mul(/** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:28396:28432  \"executionGasLimit - executionGasUsed\" */ sum, diff), /** @src 0:1596:1598  \"10\" */ 0x0a), /** @src 0:28513:28516  \"100\" */ 0x64))\n                                                    }\n                                                    /// @src 0:28614:28650  \"actualGasCost = actualGas * gasPrice\"\n                                                    var_actualGasCost := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mul(/** @src 0:28630:28650  \"actualGas * gasPrice\" */ var_actualGas, expr_3)\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _17 := mload(/** @src 0:28682:28696  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                    switch /** @src 0:28714:28737  \"prefund < actualGasCost\" */ lt(_17, var_actualGasCost)\n                                                    case /** @src 0:28710:29503  \"if (prefund < actualGasCost) {...\" */ 0 {\n                                                        /// @src 0:29291:29331  \"_incrementDeposit(refundAddress, refund)\"\n                                                        pop(fun_incrementDeposit(var_refundAddress, /** @src 0:1543:1547  \"2048\" */ sub(/** @src 0:29250:29273  \"prefund - actualGasCost\" */ _17, var_actualGasCost)))\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:29478:29487  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, var_actualGasCost, var_actualGas)\n                                                    }\n                                                    default /// @src 0:28710:29503  \"if (prefund < actualGasCost) {...\"\n                                                    {\n                                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                        if var_refundAddress_1\n                                                        {\n                                                            mstore(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ shl(224, 0x4e487b71))\n                                                            mstore(4, 0x21)\n                                                            revert(/** @src -1:-1:-1 */ var_refundAddress_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x24)\n                                                        }\n                                                        /// @src 0:28829:28852  \"actualGasCost = prefund\"\n                                                        var_actualGasCost := _17\n                                                        /// @src 0:28892:28898  \"opInfo\"\n                                                        fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                        /// @src 0:28974:28983  \"actualGas\"\n                                                        fun_emitUserOperationEvent(var_opInfo_155_mpos, _17, var_actualGas)\n                                                    }\n                                                    /// @src 0:5888:6078  \"collected = _postExecution(...\"\n                                                    var_collected := var_actualGasCost\n                                                }\n                                                default /// @src 0:5089:6093  \"if (innerRevertCode == INNER_REVERT_LOW_PREFUND) {...\"\n                                                {\n                                                    /// @src 0:5269:5287  \"preGas - gasleft()\"\n                                                    let expr_4 := checked_sub_uint256(expr, /** @src 0:5278:5287  \"gasleft()\" */ gas())\n                                                    /// @src 0:5269:5305  \"preGas - gasleft() + opInfo.preOpGas\"\n                                                    let expr_5 := checked_add_uint256(expr_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:5290:5305  \"opInfo.preOpGas\" */ add(var_opInfo_155_mpos, 128)))\n                                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                    let _18 := mload(/** @src 0:5347:5361  \"opInfo.prefund\" */ add(var_opInfo_155_mpos, /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2))\n                                                    /// @src 0:5397:5403  \"opInfo\"\n                                                    fun_emitPrefundTooLow(var_opInfo_155_mpos)\n                                                    /// @src 0:5475:5484  \"actualGas\"\n                                                    fun_emitUserOperationEvent(var_opInfo_155_mpos, _18, expr_5)\n                                                    /// @src 0:5503:5528  \"collected = actualGasCost\"\n                                                    var_collected := _18\n                                                }\n                                            }\n                                            default /// @src 0:4793:6093  \"if (innerRevertCode == INNER_OUT_OF_GAS) {...\"\n                                            {\n                                                /// @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                let _19 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(/** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                mstore(_19, /** @src 0:21861:21902  \"FailedOp(opIndex, \\\"AA24 signature error\\\")\" */ shl(225, 0x1101335b))\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ add(_19, 4), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_opIndex)\n                                                /// @src 0:1474:1487  \"hex\\\"deadaa51\\\"\"\n                                                mstore(add(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ 36), /** @src 0:3409:3492  \"assembly (\\\"memory-safe\\\") {...\" */ _2)\n                                                /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                                mstore(/** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ add(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ 68), 15)\n                                                mstore(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ add(/** @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\" */ _19, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 100), /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ \"AA95 out of gas\")\n                                                /// @src 0:5032:5068  \"FailedOp(opIndex, \\\"AA95 out of gas\\\")\"\n                                                revert(_19, /** @src 0:1474:1487  \"hex\\\"deadaa51\\\"\" */ 132)\n                                            }\n                                        }\n                                    }\n                                    /// @ast-id 146 @src 0:2446:2725  \"function _compensate(address payable beneficiary, uint256 amount) internal {...\"\n                                    function fun_compensate(var_beneficiary, var_amount)\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 0:2539:2564  \"beneficiary != address(0)\" */ var_beneficiary, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        if /** @src 0:2539:2564  \"beneficiary != address(0)\" */ iszero(_1)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        {\n                                            let memPtr := mload(64)\n                                            mstore(memPtr, shl(229, 4594637))\n                                            mstore(add(memPtr, 4), 32)\n                                            mstore(add(memPtr, 36), 24)\n                                            mstore(add(memPtr, 68), \"AA90 invalid beneficiary\")\n                                            revert(memPtr, 100)\n                                        }\n                                        /// @src 0:2622:2657  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        let expr_138_component := call(gas(), _1, var_amount, /** @src 0:2562:2563  \"0\" */ 0x00, 0x00, 0x00, 0x00)\n                                        /// @src 0:2622:2657  \"beneficiary.call{value: amount}(\\\"\\\")\"\n                                        pop(extract_returndata())\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        if iszero(expr_138_component)\n                                        {\n                                            let memPtr_1 := mload(64)\n                                            mstore(memPtr_1, shl(229, 4594637))\n                                            mstore(add(memPtr_1, 4), 32)\n                                            mstore(add(memPtr_1, 36), 31)\n                                            mstore(add(memPtr_1, 68), \"AA91 failed send to beneficiary\")\n                                            revert(memPtr_1, 100)\n                                        }\n                                    }\n                                    /// @ast-id 2527 @src 4:1559:1818  \"function _incrementDeposit(address account, uint256 amount) internal returns (uint256) {...\"\n                                    function fun_incrementDeposit(var_account, var_amount) -> var\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(var_account, sub(shl(160, 1), 1)))\n                                        mstore(0x20, /** @src 4:1683:1691  \"deposits\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let dataSlot := keccak256(/** @src 4:1683:1691  \"deposits\" */ 0x00, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 0x40)\n                                        /// @src 4:1730:1751  \"info.deposit + amount\"\n                                        let expr := checked_add_uint256(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sload(/** @src 4:1730:1742  \"info.deposit\" */ dataSlot), /** @src 4:1730:1751  \"info.deposit + amount\" */ var_amount)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        sstore(dataSlot, expr)\n                                        /// @src 4:1795:1811  \"return newAmount\"\n                                        var := expr\n                                    }\n                                    /// @ast-id 2053 @src 0:29763:30294  \"function getUserOpGasPrice(...\"\n                                    function fun_getUserOpGasPrice(var_mUserOp_mpos) -> var_\n                                    {\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := mload(/** @src 0:29922:29942  \"mUserOp.maxFeePerGas\" */ add(var_mUserOp_mpos, 256))\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := mload(/** @src 0:29987:30015  \"mUserOp.maxPriorityFeePerGas\" */ add(var_mUserOp_mpos, 288))\n                                        /// @src 0:30029:30202  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        if /** @src 0:30033:30069  \"maxFeePerGas == maxPriorityFeePerGas\" */ eq(_1, _2)\n                                        /// @src 0:30029:30202  \"if (maxFeePerGas == maxPriorityFeePerGas) {...\"\n                                        {\n                                            /// @src 0:30168:30187  \"return maxFeePerGas\"\n                                            var_ := _1\n                                            leave\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _3 := add(/** @src 0:30240:30276  \"maxPriorityFeePerGas + block.basefee\" */ _2, /** @src 0:30263:30276  \"block.basefee\" */ basefee())\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        let expr := /** @src -1:-1:-1 */ 0\n                                        /// @src 1:3338:3351  \"a < b ? a : b\"\n                                        switch /** @src 1:3338:3343  \"a < b\" */ lt(_1, _3)\n                                        case /** @src 1:3338:3351  \"a < b ? a : b\" */ 0 { expr := _3 }\n                                        default { expr := _1 }\n                                        /// @src 0:30215:30277  \"return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee)\"\n                                        var_ := expr\n                                    }\n                                    /// @ast-id 358 @src 0:6115:6505  \"function emitUserOperationEvent(UserOpInfo memory opInfo, bool success, uint256 actualGasCost, uint256 actualGas) internal virtual {...\"\n                                    function fun_emitUserOperationEvent(var_opInfo_mpos, var_actualGasCost, var_actualGas)\n                                    {\n                                        /// @src 0:1543:1547  \"2048\"\n                                        let _1 := mload(/** @src 0:6293:6310  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6324:6338  \"opInfo.mUserOp\"\n                                        let _mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _2 := sub(shl(160, 1), 1)\n                                        let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6324:6345  \"opInfo.mUserOp.sender\" */ _mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let cleaned_1 := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6359:6383  \"opInfo.mUserOp.paymaster\" */ add(_mpos, 224)), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2)\n                                        let _3 := mload(/** @src 0:6397:6417  \"opInfo.mUserOp.nonce\" */ add(_mpos, /** @src 0:6293:6310  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                        let _4 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_4, _3)\n                                        mstore(add(_4, /** @src 0:6293:6310  \"opInfo.userOpHash\" */ 32), /** @src -1:-1:-1 */ 0)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(_4, 64), var_actualGasCost)\n                                        mstore(add(_4, 96), var_actualGas)\n                                        /// @src 0:6261:6498  \"UserOperationEvent(...\"\n                                        log4(_4, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 128, /** @src 0:6261:6498  \"UserOperationEvent(...\" */ 0x49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f, _1, cleaned, cleaned_1)\n                                    }\n                                    /// @ast-id 376 @src 0:6511:6739  \"function emitPrefundTooLow(UserOpInfo memory opInfo) internal virtual {...\"\n                                    function fun_emitPrefundTooLow(var_opInfo_mpos)\n                                    {\n                                        /// @src 0:1543:1547  \"2048\"\n                                        let _1 := mload(/** @src 0:6636:6653  \"opInfo.userOpHash\" */ add(var_opInfo_mpos, 32))\n                                        /// @src 0:6667:6681  \"opInfo.mUserOp\"\n                                        let _665_mpos := mload(var_opInfo_mpos)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let cleaned := and(/** @src 0:1297:1302  \"10000\" */ mload(/** @src 0:6667:6688  \"opInfo.mUserOp.sender\" */ _665_mpos), /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := mload(/** @src 0:6702:6722  \"opInfo.mUserOp.nonce\" */ add(_665_mpos, /** @src 0:6636:6653  \"opInfo.userOpHash\" */ 32))\n                                        /// @src 0:6596:6732  \"UserOperationPrefundTooLow(...\"\n                                        let _3 := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ mload(64)\n                                        mstore(_3, _2)\n                                        /// @src 0:6596:6732  \"UserOperationPrefundTooLow(...\"\n                                        log3(_3, /** @src 0:6636:6653  \"opInfo.userOpHash\" */ 32, /** @src 0:6596:6732  \"UserOperationPrefundTooLow(...\" */ 0x67b4fa9642f42120bf031f3051d1824b0fe25627945b27b8a6a65d5761d5482e, _1, cleaned)\n                                    }\n                                    /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                    function abi_encode_struct_PackedUserOperation_calldata_bytes32_uint256(headStart, value0, value1, value2) -> tail\n                                    {\n                                        mstore(headStart, 96)\n                                        tail := abi_encode_struct_PackedUserOperation_calldata(value0, add(headStart, 96))\n                                        mstore(add(headStart, 32), value1)\n                                        mstore(add(headStart, 64), value2)\n                                    }\n                                    /// @ast-id 1622 @src 0:22951:23437  \"function _getValidationData(...\"\n                                    function fun_getValidationData(var_validationData) -> var_aggregator, var_outOfTimeRange\n                                    {\n                                        /// @src 0:23091:23167  \"if (validationData == 0) {...\"\n                                        if /** @src 0:23095:23114  \"validationData == 0\" */ iszero(var_validationData)\n                                        /// @src 0:23091:23167  \"if (validationData == 0) {...\"\n                                        {\n                                            /// @src 0:23130:23156  \"return (address(0), false)\"\n                                            var_aggregator := /** @src 0:23113:23114  \"0\" */ 0x00\n                                            /// @src 0:23130:23156  \"return (address(0), false)\"\n                                            var_outOfTimeRange := /** @src 0:23113:23114  \"0\" */ 0x00\n                                            /// @src 0:23130:23156  \"return (address(0), false)\"\n                                            leave\n                                        }\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let memPtr := mload(64)\n                                        finalize_allocation_26350(memPtr)\n                                        mstore(memPtr, /** @src 0:23113:23114  \"0\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 32), /** @src 0:23113:23114  \"0\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        mstore(add(memPtr, 64), /** @src 0:23113:23114  \"0\" */ 0x00)\n                                        /// @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\"\n                                        let _1 := and(/** @src 1:1507:1530  \"uint160(validationData)\" */ var_validationData, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ sub(shl(160, 1), 1))\n                                        let _2 := 0xffffffffffff\n                                        /// @src 1:1537:1586  \"uint48 validUntil = uint48(validationData >> 160)\"\n                                        let var_validUntil := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ and(shr(/** @src 1:1582:1585  \"160\" */ 0xa0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData), _2)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        if /** @src 1:1596:1611  \"validUntil == 0\" */ iszero(/** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validUntil)\n                                        /// @src 1:1592:1659  \"if (validUntil == 0) {...\"\n                                        {\n                                            /// @src 1:1623:1652  \"validUntil = type(uint48).max\"\n                                            var_validUntil := /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ _2\n                                        }\n                                        let result := shr(/** @src 1:1710:1718  \"48 + 160\" */ 0xd0, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ var_validationData)\n                                        let memPtr_1 := mload(64)\n                                        finalize_allocation_26350(memPtr_1)\n                                        mstore(memPtr_1, _1)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 32), result)\n                                        let _3 := and(var_validUntil, _2)\n                                        mstore(/** @src 1:1733:1783  \"ValidationData(aggregator, validAfter, validUntil)\" */ add(memPtr_1, /** @src 0:789:31134  \"contract EntryPoint is IEntryPoint, StakeManager, NonceManager, ReentrancyGuard, ERC165 {...\" */ 64), _3)\n                                        /// @src 0:23322:23392  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        let expr := /** @src 0:23322:23355  \"block.timestamp > data.validUntil\" */ gt(/** @src 0:23322:23337  \"block.timestamp\" */ timestamp(), /** @src 0:23322:23355  \"block.timestamp > data.validUntil\" */ _3)\n                                        /// @src 0:23322:23392  \"block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        if iszero(expr)\n                                        {\n                                            expr := /** @src 0:23359:23392  \"block.timestamp < data.validAfter\" */ lt(/** @src 0:23322:23337  \"block.timestamp\" */ timestamp(), /** @src 0:23359:23392  \"block.timestamp < data.validAfter\" */ result)\n                                        }\n                                        /// @src 0:23305:23392  \"outOfTimeRange = block.timestamp > data.validUntil || block.timestamp < data.validAfter\"\n                                        var_outOfTimeRange := expr\n                                        /// @src 0:23402:23430  \"aggregator = data.aggregator\"\n                                        var_aggregator := _1\n                                    }\n                                }\n                                data \".metadata\" hex\"a164736f6c6343000818000a\"\n                            }\n                            /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                            object \"SenderCreator_2414\" {\n                                code {\n                                    {\n                                        /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                        let _1 := memoryguard(0x80)\n                                        mstore(64, _1)\n                                        if callvalue() { revert(0, 0) }\n                                        let _2 := datasize(\"SenderCreator_2414_deployed\")\n                                        codecopy(_1, dataoffset(\"SenderCreator_2414_deployed\"), _2)\n                                        return(_1, _2)\n                                    }\n                                }\n                                /// @use-src 3:\"lib/account-abstraction/contracts/core/SenderCreator.sol\"\n                                object \"SenderCreator_2414_deployed\" {\n                                    code {\n                                        {\n                                            /// @src 3:205:1231  \"contract SenderCreator {...\"\n                                            let _1 := memoryguard(0x80)\n                                            if iszero(lt(calldatasize(), 4))\n                                            {\n                                                let _2 := 0\n                                                if eq(0x570e1a36, shr(224, calldataload(_2)))\n                                                {\n                                                    if callvalue() { revert(_2, _2) }\n                                                    if slt(add(calldatasize(), not(3)), 32) { revert(_2, _2) }\n                                                    let offset := calldataload(4)\n                                                    let _3 := 0xffffffffffffffff\n                                                    if gt(offset, _3) { revert(_2, _2) }\n                                                    if iszero(slt(add(offset, 35), calldatasize())) { revert(_2, _2) }\n                                                    let length := calldataload(add(4, offset))\n                                                    if gt(length, _3) { revert(_2, _2) }\n                                                    if gt(add(add(offset, length), 36), calldatasize()) { revert(_2, _2) }\n                                                    let var_sender := _2\n                                                    if gt(/** @src 3:726:728  \"20\" */ 0x14, /** @src 3:205:1231  \"contract SenderCreator {...\" */ length) { revert(_2, _2) }\n                                                    let lengthOut := add(length, not(19))\n                                                    if gt(lengthOut, _3)\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    let _4 := not(31)\n                                                    let newFreePtr := add(_1, and(add(and(add(length, 11), _4), 63), _4))\n                                                    if or(gt(newFreePtr, _3), lt(newFreePtr, _1))\n                                                    {\n                                                        mstore(_2, shl(224, 0x4e487b71))\n                                                        mstore(4, 0x41)\n                                                        revert(_2, 36)\n                                                    }\n                                                    mstore(64, newFreePtr)\n                                                    mstore(_1, lengthOut)\n                                                    let dst := add(_1, 32)\n                                                    calldatacopy(dst, add(offset, 56), lengthOut)\n                                                    mstore(add(add(_1, length), 12), _2)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    let var_success := call(gas(), /** @src 3:205:1231  \"contract SenderCreator {...\" */ shr(96, calldataload(add(offset, 36))), _2, /** @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\" */ dst, mload(_1), /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2, 32)\n                                                    /// @src 3:863:1156  \"assembly (\\\"memory-safe\\\") {...\"\n                                                    var_sender := mload(/** @src 3:205:1231  \"contract SenderCreator {...\" */ _2)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    if /** @src 3:1169:1177  \"!success\" */ iszero(var_success)\n                                                    /// @src 3:1165:1223  \"if (!success) {...\"\n                                                    {\n                                                        /// @src 3:1193:1212  \"sender = address(0)\"\n                                                        var_sender := /** @src 3:205:1231  \"contract SenderCreator {...\" */ _2\n                                                    }\n                                                    let memPos := mload(64)\n                                                    mstore(memPos, and(var_sender, sub(shl(160, 1), 1)))\n                                                    return(memPos, 32)\n                                                }\n                                            }\n                                            revert(0, 0)\n                                        }\n                                    }\n                                    data \".metadata\" hex\"a164736f6c6343000818000a\"\n                                }\n                            }\n                        }\n                        data \".metadata\" hex\"a164736f6c6343000818000a\"\n                    }\n                }\n                data \".metadata\" hex\"a164736f6c6343000818000a\"\n            }\n        }\n        data \".metadata\" hex\"a164736f6c6343000818000a\"\n    }\n}\n","hash":"010006d928709631c8a59f7bf3095ce290622925a43d9886f63229bd3101119e","factoryDependencies":{"010000a57c2e703f62f07fa81d727124254c6117a307329d89ea63261e2784bf":"script/DeployMinimal.s.sol:DeployMinimal","010001191bd0c20330815eebb1830a5ce2fc61c5966f725b42e03468f37140f6":"lib/openzeppelin-contracts/contracts/mocks/token/ERC20Mock.sol:ERC20Mock","01000253005c8b08923561217a2b0efc65f01ff2f19e87ad0c011ee6dee7020a":"script/SendPackedUserOp.s.sol:SendPackedUserOp"},"id":86}